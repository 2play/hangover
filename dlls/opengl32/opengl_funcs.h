/* Automatically generated from http://www.opengl.org/registry files; DO NOT EDIT! */

#ifndef __QEMU_GL_FUNCS_H
#define __QEMU_GL_FUNCS_H

enum opengl32_calls
{
    CALL_GLACCUM,
    CALL_GLALPHAFUNC,
    CALL_GLARETEXTURESRESIDENT,
    CALL_GLARRAYELEMENT,
    CALL_GLBEGIN,
    CALL_GLBINDTEXTURE,
    CALL_GLBITMAP,
    CALL_GLBLENDFUNC,
    CALL_GLCALLLIST,
    CALL_GLCALLLISTS,
    CALL_GLCLEAR,
    CALL_GLCLEARACCUM,
    CALL_GLCLEARCOLOR,
    CALL_GLCLEARDEPTH,
    CALL_GLCLEARINDEX,
    CALL_GLCLEARSTENCIL,
    CALL_GLCLIPPLANE,
    CALL_GLCOLOR3B,
    CALL_GLCOLOR3BV,
    CALL_GLCOLOR3D,
    CALL_GLCOLOR3DV,
    CALL_GLCOLOR3F,
    CALL_GLCOLOR3FV,
    CALL_GLCOLOR3I,
    CALL_GLCOLOR3IV,
    CALL_GLCOLOR3S,
    CALL_GLCOLOR3SV,
    CALL_GLCOLOR3UB,
    CALL_GLCOLOR3UBV,
    CALL_GLCOLOR3UI,
    CALL_GLCOLOR3UIV,
    CALL_GLCOLOR3US,
    CALL_GLCOLOR3USV,
    CALL_GLCOLOR4B,
    CALL_GLCOLOR4BV,
    CALL_GLCOLOR4D,
    CALL_GLCOLOR4DV,
    CALL_GLCOLOR4F,
    CALL_GLCOLOR4FV,
    CALL_GLCOLOR4I,
    CALL_GLCOLOR4IV,
    CALL_GLCOLOR4S,
    CALL_GLCOLOR4SV,
    CALL_GLCOLOR4UB,
    CALL_GLCOLOR4UBV,
    CALL_GLCOLOR4UI,
    CALL_GLCOLOR4UIV,
    CALL_GLCOLOR4US,
    CALL_GLCOLOR4USV,
    CALL_GLCOLORMASK,
    CALL_GLCOLORMATERIAL,
    CALL_GLCOLORPOINTER,
    CALL_GLCOPYPIXELS,
    CALL_GLCOPYTEXIMAGE1D,
    CALL_GLCOPYTEXIMAGE2D,
    CALL_GLCOPYTEXSUBIMAGE1D,
    CALL_GLCOPYTEXSUBIMAGE2D,
    CALL_GLCULLFACE,
    CALL_GLDEBUGENTRY,
    CALL_GLDELETELISTS,
    CALL_GLDELETETEXTURES,
    CALL_GLDEPTHFUNC,
    CALL_GLDEPTHMASK,
    CALL_GLDEPTHRANGE,
    CALL_GLDISABLE,
    CALL_GLDISABLECLIENTSTATE,
    CALL_GLDRAWARRAYS,
    CALL_GLDRAWBUFFER,
    CALL_GLDRAWELEMENTS,
    CALL_GLDRAWPIXELS,
    CALL_GLEDGEFLAG,
    CALL_GLEDGEFLAGPOINTER,
    CALL_GLEDGEFLAGV,
    CALL_GLENABLE,
    CALL_GLENABLECLIENTSTATE,
    CALL_GLEND,
    CALL_GLENDLIST,
    CALL_GLEVALCOORD1D,
    CALL_GLEVALCOORD1DV,
    CALL_GLEVALCOORD1F,
    CALL_GLEVALCOORD1FV,
    CALL_GLEVALCOORD2D,
    CALL_GLEVALCOORD2DV,
    CALL_GLEVALCOORD2F,
    CALL_GLEVALCOORD2FV,
    CALL_GLEVALMESH1,
    CALL_GLEVALMESH2,
    CALL_GLEVALPOINT1,
    CALL_GLEVALPOINT2,
    CALL_GLFEEDBACKBUFFER,
    CALL_GLFINISH,
    CALL_GLFLUSH,
    CALL_GLFOGF,
    CALL_GLFOGFV,
    CALL_GLFOGI,
    CALL_GLFOGIV,
    CALL_GLFRONTFACE,
    CALL_GLFRUSTUM,
    CALL_GLGENLISTS,
    CALL_GLGENTEXTURES,
    CALL_GLGETBOOLEANV,
    CALL_GLGETCLIPPLANE,
    CALL_GLGETDOUBLEV,
    CALL_GLGETERROR,
    CALL_GLGETFLOATV,
    CALL_GLGETINTEGERV,
    CALL_GLGETLIGHTFV,
    CALL_GLGETLIGHTIV,
    CALL_GLGETMAPDV,
    CALL_GLGETMAPFV,
    CALL_GLGETMAPIV,
    CALL_GLGETMATERIALFV,
    CALL_GLGETMATERIALIV,
    CALL_GLGETPIXELMAPFV,
    CALL_GLGETPIXELMAPUIV,
    CALL_GLGETPIXELMAPUSV,
    CALL_GLGETPOINTERV,
    CALL_GLGETPOLYGONSTIPPLE,
    CALL_GLGETSTRING,
    CALL_GLGETTEXENVFV,
    CALL_GLGETTEXENVIV,
    CALL_GLGETTEXGENDV,
    CALL_GLGETTEXGENFV,
    CALL_GLGETTEXGENIV,
    CALL_GLGETTEXIMAGE,
    CALL_GLGETTEXLEVELPARAMETERFV,
    CALL_GLGETTEXLEVELPARAMETERIV,
    CALL_GLGETTEXPARAMETERFV,
    CALL_GLGETTEXPARAMETERIV,
    CALL_GLHINT,
    CALL_GLINDEXMASK,
    CALL_GLINDEXPOINTER,
    CALL_GLINDEXD,
    CALL_GLINDEXDV,
    CALL_GLINDEXF,
    CALL_GLINDEXFV,
    CALL_GLINDEXI,
    CALL_GLINDEXIV,
    CALL_GLINDEXS,
    CALL_GLINDEXSV,
    CALL_GLINDEXUB,
    CALL_GLINDEXUBV,
    CALL_GLINITNAMES,
    CALL_GLINTERLEAVEDARRAYS,
    CALL_GLISENABLED,
    CALL_GLISLIST,
    CALL_GLISTEXTURE,
    CALL_GLLIGHTMODELF,
    CALL_GLLIGHTMODELFV,
    CALL_GLLIGHTMODELI,
    CALL_GLLIGHTMODELIV,
    CALL_GLLIGHTF,
    CALL_GLLIGHTFV,
    CALL_GLLIGHTI,
    CALL_GLLIGHTIV,
    CALL_GLLINESTIPPLE,
    CALL_GLLINEWIDTH,
    CALL_GLLISTBASE,
    CALL_GLLOADIDENTITY,
    CALL_GLLOADMATRIXD,
    CALL_GLLOADMATRIXF,
    CALL_GLLOADNAME,
    CALL_GLLOGICOP,
    CALL_GLMAP1D,
    CALL_GLMAP1F,
    CALL_GLMAP2D,
    CALL_GLMAP2F,
    CALL_GLMAPGRID1D,
    CALL_GLMAPGRID1F,
    CALL_GLMAPGRID2D,
    CALL_GLMAPGRID2F,
    CALL_GLMATERIALF,
    CALL_GLMATERIALFV,
    CALL_GLMATERIALI,
    CALL_GLMATERIALIV,
    CALL_GLMATRIXMODE,
    CALL_GLMULTMATRIXD,
    CALL_GLMULTMATRIXF,
    CALL_GLNEWLIST,
    CALL_GLNORMAL3B,
    CALL_GLNORMAL3BV,
    CALL_GLNORMAL3D,
    CALL_GLNORMAL3DV,
    CALL_GLNORMAL3F,
    CALL_GLNORMAL3FV,
    CALL_GLNORMAL3I,
    CALL_GLNORMAL3IV,
    CALL_GLNORMAL3S,
    CALL_GLNORMAL3SV,
    CALL_GLNORMALPOINTER,
    CALL_GLORTHO,
    CALL_GLPASSTHROUGH,
    CALL_GLPIXELMAPFV,
    CALL_GLPIXELMAPUIV,
    CALL_GLPIXELMAPUSV,
    CALL_GLPIXELSTOREF,
    CALL_GLPIXELSTOREI,
    CALL_GLPIXELTRANSFERF,
    CALL_GLPIXELTRANSFERI,
    CALL_GLPIXELZOOM,
    CALL_GLPOINTSIZE,
    CALL_GLPOLYGONMODE,
    CALL_GLPOLYGONOFFSET,
    CALL_GLPOLYGONSTIPPLE,
    CALL_GLPOPATTRIB,
    CALL_GLPOPCLIENTATTRIB,
    CALL_GLPOPMATRIX,
    CALL_GLPOPNAME,
    CALL_GLPRIORITIZETEXTURES,
    CALL_GLPUSHATTRIB,
    CALL_GLPUSHCLIENTATTRIB,
    CALL_GLPUSHMATRIX,
    CALL_GLPUSHNAME,
    CALL_GLRASTERPOS2D,
    CALL_GLRASTERPOS2DV,
    CALL_GLRASTERPOS2F,
    CALL_GLRASTERPOS2FV,
    CALL_GLRASTERPOS2I,
    CALL_GLRASTERPOS2IV,
    CALL_GLRASTERPOS2S,
    CALL_GLRASTERPOS2SV,
    CALL_GLRASTERPOS3D,
    CALL_GLRASTERPOS3DV,
    CALL_GLRASTERPOS3F,
    CALL_GLRASTERPOS3FV,
    CALL_GLRASTERPOS3I,
    CALL_GLRASTERPOS3IV,
    CALL_GLRASTERPOS3S,
    CALL_GLRASTERPOS3SV,
    CALL_GLRASTERPOS4D,
    CALL_GLRASTERPOS4DV,
    CALL_GLRASTERPOS4F,
    CALL_GLRASTERPOS4FV,
    CALL_GLRASTERPOS4I,
    CALL_GLRASTERPOS4IV,
    CALL_GLRASTERPOS4S,
    CALL_GLRASTERPOS4SV,
    CALL_GLREADBUFFER,
    CALL_GLREADPIXELS,
    CALL_GLRECTD,
    CALL_GLRECTDV,
    CALL_GLRECTF,
    CALL_GLRECTFV,
    CALL_GLRECTI,
    CALL_GLRECTIV,
    CALL_GLRECTS,
    CALL_GLRECTSV,
    CALL_GLRENDERMODE,
    CALL_GLROTATED,
    CALL_GLROTATEF,
    CALL_GLSCALED,
    CALL_GLSCALEF,
    CALL_GLSCISSOR,
    CALL_GLSELECTBUFFER,
    CALL_GLSHADEMODEL,
    CALL_GLSTENCILFUNC,
    CALL_GLSTENCILMASK,
    CALL_GLSTENCILOP,
    CALL_GLTEXCOORD1D,
    CALL_GLTEXCOORD1DV,
    CALL_GLTEXCOORD1F,
    CALL_GLTEXCOORD1FV,
    CALL_GLTEXCOORD1I,
    CALL_GLTEXCOORD1IV,
    CALL_GLTEXCOORD1S,
    CALL_GLTEXCOORD1SV,
    CALL_GLTEXCOORD2D,
    CALL_GLTEXCOORD2DV,
    CALL_GLTEXCOORD2F,
    CALL_GLTEXCOORD2FV,
    CALL_GLTEXCOORD2I,
    CALL_GLTEXCOORD2IV,
    CALL_GLTEXCOORD2S,
    CALL_GLTEXCOORD2SV,
    CALL_GLTEXCOORD3D,
    CALL_GLTEXCOORD3DV,
    CALL_GLTEXCOORD3F,
    CALL_GLTEXCOORD3FV,
    CALL_GLTEXCOORD3I,
    CALL_GLTEXCOORD3IV,
    CALL_GLTEXCOORD3S,
    CALL_GLTEXCOORD3SV,
    CALL_GLTEXCOORD4D,
    CALL_GLTEXCOORD4DV,
    CALL_GLTEXCOORD4F,
    CALL_GLTEXCOORD4FV,
    CALL_GLTEXCOORD4I,
    CALL_GLTEXCOORD4IV,
    CALL_GLTEXCOORD4S,
    CALL_GLTEXCOORD4SV,
    CALL_GLTEXCOORDPOINTER,
    CALL_GLTEXENVF,
    CALL_GLTEXENVFV,
    CALL_GLTEXENVI,
    CALL_GLTEXENVIV,
    CALL_GLTEXGEND,
    CALL_GLTEXGENDV,
    CALL_GLTEXGENF,
    CALL_GLTEXGENFV,
    CALL_GLTEXGENI,
    CALL_GLTEXGENIV,
    CALL_GLTEXIMAGE1D,
    CALL_GLTEXIMAGE2D,
    CALL_GLTEXPARAMETERF,
    CALL_GLTEXPARAMETERFV,
    CALL_GLTEXPARAMETERI,
    CALL_GLTEXPARAMETERIV,
    CALL_GLTEXSUBIMAGE1D,
    CALL_GLTEXSUBIMAGE2D,
    CALL_GLTRANSLATED,
    CALL_GLTRANSLATEF,
    CALL_GLVERTEX2D,
    CALL_GLVERTEX2DV,
    CALL_GLVERTEX2F,
    CALL_GLVERTEX2FV,
    CALL_GLVERTEX2I,
    CALL_GLVERTEX2IV,
    CALL_GLVERTEX2S,
    CALL_GLVERTEX2SV,
    CALL_GLVERTEX3D,
    CALL_GLVERTEX3DV,
    CALL_GLVERTEX3F,
    CALL_GLVERTEX3FV,
    CALL_GLVERTEX3I,
    CALL_GLVERTEX3IV,
    CALL_GLVERTEX3S,
    CALL_GLVERTEX3SV,
    CALL_GLVERTEX4D,
    CALL_GLVERTEX4DV,
    CALL_GLVERTEX4F,
    CALL_GLVERTEX4FV,
    CALL_GLVERTEX4I,
    CALL_GLVERTEX4IV,
    CALL_GLVERTEX4S,
    CALL_GLVERTEX4SV,
    CALL_GLVERTEXPOINTER,
    CALL_GLVIEWPORT,
    CALL_GLACCUMXOES,
    CALL_GLACQUIREKEYEDMUTEXWIN32EXT,
    CALL_GLACTIVEPROGRAMEXT,
    CALL_GLACTIVESHADERPROGRAM,
    CALL_GLACTIVESTENCILFACEEXT,
    CALL_GLACTIVETEXTURE,
    CALL_GLACTIVETEXTUREARB,
    CALL_GLACTIVEVARYINGNV,
    CALL_GLALPHAFRAGMENTOP1ATI,
    CALL_GLALPHAFRAGMENTOP2ATI,
    CALL_GLALPHAFRAGMENTOP3ATI,
    CALL_GLALPHAFUNCXOES,
    CALL_GLALPHATOCOVERAGEDITHERCONTROLNV,
    CALL_GLAPPLYFRAMEBUFFERATTACHMENTCMAAINTEL,
    CALL_GLAPPLYTEXTUREEXT,
    CALL_GLAREPROGRAMSRESIDENTNV,
    CALL_GLARETEXTURESRESIDENTEXT,
    CALL_GLARRAYELEMENTEXT,
    CALL_GLARRAYOBJECTATI,
    CALL_GLASYNCCOPYBUFFERSUBDATANVX,
    CALL_GLASYNCCOPYIMAGESUBDATANVX,
    CALL_GLASYNCMARKERSGIX,
    CALL_GLATTACHOBJECTARB,
    CALL_GLATTACHSHADER,
    CALL_GLBEGINCONDITIONALRENDER,
    CALL_GLBEGINCONDITIONALRENDERNV,
    CALL_GLBEGINCONDITIONALRENDERNVX,
    CALL_GLBEGINFRAGMENTSHADERATI,
    CALL_GLBEGINOCCLUSIONQUERYNV,
    CALL_GLBEGINPERFMONITORAMD,
    CALL_GLBEGINPERFQUERYINTEL,
    CALL_GLBEGINQUERY,
    CALL_GLBEGINQUERYARB,
    CALL_GLBEGINQUERYINDEXED,
    CALL_GLBEGINTRANSFORMFEEDBACK,
    CALL_GLBEGINTRANSFORMFEEDBACKEXT,
    CALL_GLBEGINTRANSFORMFEEDBACKNV,
    CALL_GLBEGINVERTEXSHADEREXT,
    CALL_GLBEGINVIDEOCAPTURENV,
    CALL_GLBINDATTRIBLOCATION,
    CALL_GLBINDATTRIBLOCATIONARB,
    CALL_GLBINDBUFFER,
    CALL_GLBINDBUFFERARB,
    CALL_GLBINDBUFFERBASE,
    CALL_GLBINDBUFFERBASEEXT,
    CALL_GLBINDBUFFERBASENV,
    CALL_GLBINDBUFFEROFFSETEXT,
    CALL_GLBINDBUFFEROFFSETNV,
    CALL_GLBINDBUFFERRANGE,
    CALL_GLBINDBUFFERRANGEEXT,
    CALL_GLBINDBUFFERRANGENV,
    CALL_GLBINDBUFFERSBASE,
    CALL_GLBINDBUFFERSRANGE,
    CALL_GLBINDFRAGDATALOCATION,
    CALL_GLBINDFRAGDATALOCATIONEXT,
    CALL_GLBINDFRAGDATALOCATIONINDEXED,
    CALL_GLBINDFRAGMENTSHADERATI,
    CALL_GLBINDFRAMEBUFFER,
    CALL_GLBINDFRAMEBUFFEREXT,
    CALL_GLBINDIMAGETEXTURE,
    CALL_GLBINDIMAGETEXTUREEXT,
    CALL_GLBINDIMAGETEXTURES,
    CALL_GLBINDLIGHTPARAMETEREXT,
    CALL_GLBINDMATERIALPARAMETEREXT,
    CALL_GLBINDMULTITEXTUREEXT,
    CALL_GLBINDPARAMETEREXT,
    CALL_GLBINDPROGRAMARB,
    CALL_GLBINDPROGRAMNV,
    CALL_GLBINDPROGRAMPIPELINE,
    CALL_GLBINDRENDERBUFFER,
    CALL_GLBINDRENDERBUFFEREXT,
    CALL_GLBINDSAMPLER,
    CALL_GLBINDSAMPLERS,
    CALL_GLBINDSHADINGRATEIMAGENV,
    CALL_GLBINDTEXGENPARAMETEREXT,
    CALL_GLBINDTEXTUREEXT,
    CALL_GLBINDTEXTUREUNIT,
    CALL_GLBINDTEXTUREUNITPARAMETEREXT,
    CALL_GLBINDTEXTURES,
    CALL_GLBINDTRANSFORMFEEDBACK,
    CALL_GLBINDTRANSFORMFEEDBACKNV,
    CALL_GLBINDVERTEXARRAY,
    CALL_GLBINDVERTEXARRAYAPPLE,
    CALL_GLBINDVERTEXBUFFER,
    CALL_GLBINDVERTEXBUFFERS,
    CALL_GLBINDVERTEXSHADEREXT,
    CALL_GLBINDVIDEOCAPTURESTREAMBUFFERNV,
    CALL_GLBINDVIDEOCAPTURESTREAMTEXTURENV,
    CALL_GLBINORMAL3BEXT,
    CALL_GLBINORMAL3BVEXT,
    CALL_GLBINORMAL3DEXT,
    CALL_GLBINORMAL3DVEXT,
    CALL_GLBINORMAL3FEXT,
    CALL_GLBINORMAL3FVEXT,
    CALL_GLBINORMAL3IEXT,
    CALL_GLBINORMAL3IVEXT,
    CALL_GLBINORMAL3SEXT,
    CALL_GLBINORMAL3SVEXT,
    CALL_GLBINORMALPOINTEREXT,
    CALL_GLBITMAPXOES,
    CALL_GLBLENDBARRIERKHR,
    CALL_GLBLENDBARRIERNV,
    CALL_GLBLENDCOLOR,
    CALL_GLBLENDCOLOREXT,
    CALL_GLBLENDCOLORXOES,
    CALL_GLBLENDEQUATION,
    CALL_GLBLENDEQUATIONEXT,
    CALL_GLBLENDEQUATIONINDEXEDAMD,
    CALL_GLBLENDEQUATIONSEPARATE,
    CALL_GLBLENDEQUATIONSEPARATEEXT,
    CALL_GLBLENDEQUATIONSEPARATEINDEXEDAMD,
    CALL_GLBLENDEQUATIONSEPARATEI,
    CALL_GLBLENDEQUATIONSEPARATEIARB,
    CALL_GLBLENDEQUATIONI,
    CALL_GLBLENDEQUATIONIARB,
    CALL_GLBLENDFUNCINDEXEDAMD,
    CALL_GLBLENDFUNCSEPARATE,
    CALL_GLBLENDFUNCSEPARATEEXT,
    CALL_GLBLENDFUNCSEPARATEINGR,
    CALL_GLBLENDFUNCSEPARATEINDEXEDAMD,
    CALL_GLBLENDFUNCSEPARATEI,
    CALL_GLBLENDFUNCSEPARATEIARB,
    CALL_GLBLENDFUNCI,
    CALL_GLBLENDFUNCIARB,
    CALL_GLBLENDPARAMETERINV,
    CALL_GLBLITFRAMEBUFFER,
    CALL_GLBLITFRAMEBUFFEREXT,
    CALL_GLBLITNAMEDFRAMEBUFFER,
    CALL_GLBUFFERADDRESSRANGENV,
    CALL_GLBUFFERATTACHMEMORYNV,
    CALL_GLBUFFERDATA,
    CALL_GLBUFFERDATAARB,
    CALL_GLBUFFERPAGECOMMITMENTARB,
    CALL_GLBUFFERPARAMETERIAPPLE,
    CALL_GLBUFFERREGIONENABLED,
    CALL_GLBUFFERSTORAGE,
    CALL_GLBUFFERSTORAGEEXTERNALEXT,
    CALL_GLBUFFERSTORAGEMEMEXT,
    CALL_GLBUFFERSUBDATA,
    CALL_GLBUFFERSUBDATAARB,
    CALL_GLCALLCOMMANDLISTNV,
    CALL_GLCHECKFRAMEBUFFERSTATUS,
    CALL_GLCHECKFRAMEBUFFERSTATUSEXT,
    CALL_GLCHECKNAMEDFRAMEBUFFERSTATUS,
    CALL_GLCHECKNAMEDFRAMEBUFFERSTATUSEXT,
    CALL_GLCLAMPCOLOR,
    CALL_GLCLAMPCOLORARB,
    CALL_GLCLEARACCUMXOES,
    CALL_GLCLEARBUFFERDATA,
    CALL_GLCLEARBUFFERSUBDATA,
    CALL_GLCLEARBUFFERFI,
    CALL_GLCLEARBUFFERFV,
    CALL_GLCLEARBUFFERIV,
    CALL_GLCLEARBUFFERUIV,
    CALL_GLCLEARCOLORIIEXT,
    CALL_GLCLEARCOLORIUIEXT,
    CALL_GLCLEARCOLORXOES,
    CALL_GLCLEARDEPTHDNV,
    CALL_GLCLEARDEPTHF,
    CALL_GLCLEARDEPTHFOES,
    CALL_GLCLEARDEPTHXOES,
    CALL_GLCLEARNAMEDBUFFERDATA,
    CALL_GLCLEARNAMEDBUFFERDATAEXT,
    CALL_GLCLEARNAMEDBUFFERSUBDATA,
    CALL_GLCLEARNAMEDBUFFERSUBDATAEXT,
    CALL_GLCLEARNAMEDFRAMEBUFFERFI,
    CALL_GLCLEARNAMEDFRAMEBUFFERFV,
    CALL_GLCLEARNAMEDFRAMEBUFFERIV,
    CALL_GLCLEARNAMEDFRAMEBUFFERUIV,
    CALL_GLCLEARTEXIMAGE,
    CALL_GLCLEARTEXSUBIMAGE,
    CALL_GLCLIENTACTIVETEXTURE,
    CALL_GLCLIENTACTIVETEXTUREARB,
    CALL_GLCLIENTACTIVEVERTEXSTREAMATI,
    CALL_GLCLIENTATTRIBDEFAULTEXT,
    CALL_GLCLIENTWAITSEMAPHOREUI64NVX,
    CALL_GLCLIENTWAITSYNC,
    CALL_GLCLIPCONTROL,
    CALL_GLCLIPPLANEFOES,
    CALL_GLCLIPPLANEXOES,
    CALL_GLCOLOR3FVERTEX3FSUN,
    CALL_GLCOLOR3FVERTEX3FVSUN,
    CALL_GLCOLOR3HNV,
    CALL_GLCOLOR3HVNV,
    CALL_GLCOLOR3XOES,
    CALL_GLCOLOR3XVOES,
    CALL_GLCOLOR4FNORMAL3FVERTEX3FSUN,
    CALL_GLCOLOR4FNORMAL3FVERTEX3FVSUN,
    CALL_GLCOLOR4HNV,
    CALL_GLCOLOR4HVNV,
    CALL_GLCOLOR4UBVERTEX2FSUN,
    CALL_GLCOLOR4UBVERTEX2FVSUN,
    CALL_GLCOLOR4UBVERTEX3FSUN,
    CALL_GLCOLOR4UBVERTEX3FVSUN,
    CALL_GLCOLOR4XOES,
    CALL_GLCOLOR4XVOES,
    CALL_GLCOLORFORMATNV,
    CALL_GLCOLORFRAGMENTOP1ATI,
    CALL_GLCOLORFRAGMENTOP2ATI,
    CALL_GLCOLORFRAGMENTOP3ATI,
    CALL_GLCOLORMASKINDEXEDEXT,
    CALL_GLCOLORMASKI,
    CALL_GLCOLORP3UI,
    CALL_GLCOLORP3UIV,
    CALL_GLCOLORP4UI,
    CALL_GLCOLORP4UIV,
    CALL_GLCOLORPOINTEREXT,
    CALL_GLCOLORPOINTERLISTIBM,
    CALL_GLCOLORPOINTERVINTEL,
    CALL_GLCOLORSUBTABLE,
    CALL_GLCOLORSUBTABLEEXT,
    CALL_GLCOLORTABLE,
    CALL_GLCOLORTABLEEXT,
    CALL_GLCOLORTABLEPARAMETERFV,
    CALL_GLCOLORTABLEPARAMETERFVSGI,
    CALL_GLCOLORTABLEPARAMETERIV,
    CALL_GLCOLORTABLEPARAMETERIVSGI,
    CALL_GLCOLORTABLESGI,
    CALL_GLCOMBINERINPUTNV,
    CALL_GLCOMBINEROUTPUTNV,
    CALL_GLCOMBINERPARAMETERFNV,
    CALL_GLCOMBINERPARAMETERFVNV,
    CALL_GLCOMBINERPARAMETERINV,
    CALL_GLCOMBINERPARAMETERIVNV,
    CALL_GLCOMBINERSTAGEPARAMETERFVNV,
    CALL_GLCOMMANDLISTSEGMENTSNV,
    CALL_GLCOMPILECOMMANDLISTNV,
    CALL_GLCOMPILESHADER,
    CALL_GLCOMPILESHADERARB,
    CALL_GLCOMPILESHADERINCLUDEARB,
    CALL_GLCOMPRESSEDMULTITEXIMAGE1DEXT,
    CALL_GLCOMPRESSEDMULTITEXIMAGE2DEXT,
    CALL_GLCOMPRESSEDMULTITEXIMAGE3DEXT,
    CALL_GLCOMPRESSEDMULTITEXSUBIMAGE1DEXT,
    CALL_GLCOMPRESSEDMULTITEXSUBIMAGE2DEXT,
    CALL_GLCOMPRESSEDMULTITEXSUBIMAGE3DEXT,
    CALL_GLCOMPRESSEDTEXIMAGE1D,
    CALL_GLCOMPRESSEDTEXIMAGE1DARB,
    CALL_GLCOMPRESSEDTEXIMAGE2D,
    CALL_GLCOMPRESSEDTEXIMAGE2DARB,
    CALL_GLCOMPRESSEDTEXIMAGE3D,
    CALL_GLCOMPRESSEDTEXIMAGE3DARB,
    CALL_GLCOMPRESSEDTEXSUBIMAGE1D,
    CALL_GLCOMPRESSEDTEXSUBIMAGE1DARB,
    CALL_GLCOMPRESSEDTEXSUBIMAGE2D,
    CALL_GLCOMPRESSEDTEXSUBIMAGE2DARB,
    CALL_GLCOMPRESSEDTEXSUBIMAGE3D,
    CALL_GLCOMPRESSEDTEXSUBIMAGE3DARB,
    CALL_GLCOMPRESSEDTEXTUREIMAGE1DEXT,
    CALL_GLCOMPRESSEDTEXTUREIMAGE2DEXT,
    CALL_GLCOMPRESSEDTEXTUREIMAGE3DEXT,
    CALL_GLCOMPRESSEDTEXTURESUBIMAGE1D,
    CALL_GLCOMPRESSEDTEXTURESUBIMAGE1DEXT,
    CALL_GLCOMPRESSEDTEXTURESUBIMAGE2D,
    CALL_GLCOMPRESSEDTEXTURESUBIMAGE2DEXT,
    CALL_GLCOMPRESSEDTEXTURESUBIMAGE3D,
    CALL_GLCOMPRESSEDTEXTURESUBIMAGE3DEXT,
    CALL_GLCONSERVATIVERASTERPARAMETERFNV,
    CALL_GLCONSERVATIVERASTERPARAMETERINV,
    CALL_GLCONVOLUTIONFILTER1D,
    CALL_GLCONVOLUTIONFILTER1DEXT,
    CALL_GLCONVOLUTIONFILTER2D,
    CALL_GLCONVOLUTIONFILTER2DEXT,
    CALL_GLCONVOLUTIONPARAMETERF,
    CALL_GLCONVOLUTIONPARAMETERFEXT,
    CALL_GLCONVOLUTIONPARAMETERFV,
    CALL_GLCONVOLUTIONPARAMETERFVEXT,
    CALL_GLCONVOLUTIONPARAMETERI,
    CALL_GLCONVOLUTIONPARAMETERIEXT,
    CALL_GLCONVOLUTIONPARAMETERIV,
    CALL_GLCONVOLUTIONPARAMETERIVEXT,
    CALL_GLCONVOLUTIONPARAMETERXOES,
    CALL_GLCONVOLUTIONPARAMETERXVOES,
    CALL_GLCOPYBUFFERSUBDATA,
    CALL_GLCOPYCOLORSUBTABLE,
    CALL_GLCOPYCOLORSUBTABLEEXT,
    CALL_GLCOPYCOLORTABLE,
    CALL_GLCOPYCOLORTABLESGI,
    CALL_GLCOPYCONVOLUTIONFILTER1D,
    CALL_GLCOPYCONVOLUTIONFILTER1DEXT,
    CALL_GLCOPYCONVOLUTIONFILTER2D,
    CALL_GLCOPYCONVOLUTIONFILTER2DEXT,
    CALL_GLCOPYIMAGESUBDATA,
    CALL_GLCOPYIMAGESUBDATANV,
    CALL_GLCOPYMULTITEXIMAGE1DEXT,
    CALL_GLCOPYMULTITEXIMAGE2DEXT,
    CALL_GLCOPYMULTITEXSUBIMAGE1DEXT,
    CALL_GLCOPYMULTITEXSUBIMAGE2DEXT,
    CALL_GLCOPYMULTITEXSUBIMAGE3DEXT,
    CALL_GLCOPYNAMEDBUFFERSUBDATA,
    CALL_GLCOPYPATHNV,
    CALL_GLCOPYTEXIMAGE1DEXT,
    CALL_GLCOPYTEXIMAGE2DEXT,
    CALL_GLCOPYTEXSUBIMAGE1DEXT,
    CALL_GLCOPYTEXSUBIMAGE2DEXT,
    CALL_GLCOPYTEXSUBIMAGE3D,
    CALL_GLCOPYTEXSUBIMAGE3DEXT,
    CALL_GLCOPYTEXTUREIMAGE1DEXT,
    CALL_GLCOPYTEXTUREIMAGE2DEXT,
    CALL_GLCOPYTEXTURESUBIMAGE1D,
    CALL_GLCOPYTEXTURESUBIMAGE1DEXT,
    CALL_GLCOPYTEXTURESUBIMAGE2D,
    CALL_GLCOPYTEXTURESUBIMAGE2DEXT,
    CALL_GLCOPYTEXTURESUBIMAGE3D,
    CALL_GLCOPYTEXTURESUBIMAGE3DEXT,
    CALL_GLCOVERFILLPATHINSTANCEDNV,
    CALL_GLCOVERFILLPATHNV,
    CALL_GLCOVERSTROKEPATHINSTANCEDNV,
    CALL_GLCOVERSTROKEPATHNV,
    CALL_GLCOVERAGEMODULATIONNV,
    CALL_GLCOVERAGEMODULATIONTABLENV,
    CALL_GLCREATEBUFFERS,
    CALL_GLCREATECOMMANDLISTSNV,
    CALL_GLCREATEFRAMEBUFFERS,
    CALL_GLCREATEMEMORYOBJECTSEXT,
    CALL_GLCREATEPERFQUERYINTEL,
    CALL_GLCREATEPROGRAM,
    CALL_GLCREATEPROGRAMOBJECTARB,
    CALL_GLCREATEPROGRAMPIPELINES,
    CALL_GLCREATEPROGRESSFENCENVX,
    CALL_GLCREATEQUERIES,
    CALL_GLCREATERENDERBUFFERS,
    CALL_GLCREATESAMPLERS,
    CALL_GLCREATESHADER,
    CALL_GLCREATESHADEROBJECTARB,
    CALL_GLCREATESHADERPROGRAMEXT,
    CALL_GLCREATESHADERPROGRAMV,
    CALL_GLCREATESTATESNV,
    CALL_GLCREATESYNCFROMCLEVENTARB,
    CALL_GLCREATETEXTURES,
    CALL_GLCREATETRANSFORMFEEDBACKS,
    CALL_GLCREATEVERTEXARRAYS,
    CALL_GLCULLPARAMETERDVEXT,
    CALL_GLCULLPARAMETERFVEXT,
    CALL_GLCURRENTPALETTEMATRIXARB,
    CALL_GLDEBUGMESSAGECALLBACK,
    CALL_GLDEBUGMESSAGECALLBACKAMD,
    CALL_GLDEBUGMESSAGECALLBACKARB,
    CALL_GLDEBUGMESSAGECONTROL,
    CALL_GLDEBUGMESSAGECONTROLARB,
    CALL_GLDEBUGMESSAGEENABLEAMD,
    CALL_GLDEBUGMESSAGEINSERT,
    CALL_GLDEBUGMESSAGEINSERTAMD,
    CALL_GLDEBUGMESSAGEINSERTARB,
    CALL_GLDEFORMSGIX,
    CALL_GLDEFORMATIONMAP3DSGIX,
    CALL_GLDEFORMATIONMAP3FSGIX,
    CALL_GLDELETEASYNCMARKERSSGIX,
    CALL_GLDELETEBUFFERREGION,
    CALL_GLDELETEBUFFERS,
    CALL_GLDELETEBUFFERSARB,
    CALL_GLDELETECOMMANDLISTSNV,
    CALL_GLDELETEFENCESAPPLE,
    CALL_GLDELETEFENCESNV,
    CALL_GLDELETEFRAGMENTSHADERATI,
    CALL_GLDELETEFRAMEBUFFERS,
    CALL_GLDELETEFRAMEBUFFERSEXT,
    CALL_GLDELETEMEMORYOBJECTSEXT,
    CALL_GLDELETENAMEDSTRINGARB,
    CALL_GLDELETENAMESAMD,
    CALL_GLDELETEOBJECTARB,
    CALL_GLDELETEOBJECTBUFFERATI,
    CALL_GLDELETEOCCLUSIONQUERIESNV,
    CALL_GLDELETEPATHSNV,
    CALL_GLDELETEPERFMONITORSAMD,
    CALL_GLDELETEPERFQUERYINTEL,
    CALL_GLDELETEPROGRAM,
    CALL_GLDELETEPROGRAMPIPELINES,
    CALL_GLDELETEPROGRAMSARB,
    CALL_GLDELETEPROGRAMSNV,
    CALL_GLDELETEQUERIES,
    CALL_GLDELETEQUERIESARB,
    CALL_GLDELETEQUERYRESOURCETAGNV,
    CALL_GLDELETERENDERBUFFERS,
    CALL_GLDELETERENDERBUFFERSEXT,
    CALL_GLDELETESAMPLERS,
    CALL_GLDELETESEMAPHORESEXT,
    CALL_GLDELETESHADER,
    CALL_GLDELETESTATESNV,
    CALL_GLDELETESYNC,
    CALL_GLDELETETEXTURESEXT,
    CALL_GLDELETETRANSFORMFEEDBACKS,
    CALL_GLDELETETRANSFORMFEEDBACKSNV,
    CALL_GLDELETEVERTEXARRAYS,
    CALL_GLDELETEVERTEXARRAYSAPPLE,
    CALL_GLDELETEVERTEXSHADEREXT,
    CALL_GLDEPTHBOUNDSEXT,
    CALL_GLDEPTHBOUNDSDNV,
    CALL_GLDEPTHRANGEARRAYDVNV,
    CALL_GLDEPTHRANGEARRAYV,
    CALL_GLDEPTHRANGEINDEXED,
    CALL_GLDEPTHRANGEINDEXEDDNV,
    CALL_GLDEPTHRANGEDNV,
    CALL_GLDEPTHRANGEF,
    CALL_GLDEPTHRANGEFOES,
    CALL_GLDEPTHRANGEXOES,
    CALL_GLDETACHOBJECTARB,
    CALL_GLDETACHSHADER,
    CALL_GLDETAILTEXFUNCSGIS,
    CALL_GLDISABLECLIENTSTATEINDEXEDEXT,
    CALL_GLDISABLECLIENTSTATEIEXT,
    CALL_GLDISABLEINDEXEDEXT,
    CALL_GLDISABLEVARIANTCLIENTSTATEEXT,
    CALL_GLDISABLEVERTEXARRAYATTRIB,
    CALL_GLDISABLEVERTEXARRAYATTRIBEXT,
    CALL_GLDISABLEVERTEXARRAYEXT,
    CALL_GLDISABLEVERTEXATTRIBAPPLE,
    CALL_GLDISABLEVERTEXATTRIBARRAY,
    CALL_GLDISABLEVERTEXATTRIBARRAYARB,
    CALL_GLDISABLEI,
    CALL_GLDISPATCHCOMPUTE,
    CALL_GLDISPATCHCOMPUTEGROUPSIZEARB,
    CALL_GLDISPATCHCOMPUTEINDIRECT,
    CALL_GLDRAWARRAYSEXT,
    CALL_GLDRAWARRAYSINDIRECT,
    CALL_GLDRAWARRAYSINSTANCED,
    CALL_GLDRAWARRAYSINSTANCEDARB,
    CALL_GLDRAWARRAYSINSTANCEDBASEINSTANCE,
    CALL_GLDRAWARRAYSINSTANCEDEXT,
    CALL_GLDRAWBUFFERREGION,
    CALL_GLDRAWBUFFERS,
    CALL_GLDRAWBUFFERSARB,
    CALL_GLDRAWBUFFERSATI,
    CALL_GLDRAWCOMMANDSADDRESSNV,
    CALL_GLDRAWCOMMANDSNV,
    CALL_GLDRAWCOMMANDSSTATESADDRESSNV,
    CALL_GLDRAWCOMMANDSSTATESNV,
    CALL_GLDRAWELEMENTARRAYAPPLE,
    CALL_GLDRAWELEMENTARRAYATI,
    CALL_GLDRAWELEMENTSBASEVERTEX,
    CALL_GLDRAWELEMENTSINDIRECT,
    CALL_GLDRAWELEMENTSINSTANCED,
    CALL_GLDRAWELEMENTSINSTANCEDARB,
    CALL_GLDRAWELEMENTSINSTANCEDBASEINSTANCE,
    CALL_GLDRAWELEMENTSINSTANCEDBASEVERTEX,
    CALL_GLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCE,
    CALL_GLDRAWELEMENTSINSTANCEDEXT,
    CALL_GLDRAWMESHARRAYSSUN,
    CALL_GLDRAWMESHTASKSINDIRECTNV,
    CALL_GLDRAWMESHTASKSNV,
    CALL_GLDRAWRANGEELEMENTARRAYAPPLE,
    CALL_GLDRAWRANGEELEMENTARRAYATI,
    CALL_GLDRAWRANGEELEMENTS,
    CALL_GLDRAWRANGEELEMENTSBASEVERTEX,
    CALL_GLDRAWRANGEELEMENTSEXT,
    CALL_GLDRAWTEXTURENV,
    CALL_GLDRAWTRANSFORMFEEDBACK,
    CALL_GLDRAWTRANSFORMFEEDBACKINSTANCED,
    CALL_GLDRAWTRANSFORMFEEDBACKNV,
    CALL_GLDRAWTRANSFORMFEEDBACKSTREAM,
    CALL_GLDRAWTRANSFORMFEEDBACKSTREAMINSTANCED,
    CALL_GLDRAWVKIMAGENV,
    CALL_GLEGLIMAGETARGETTEXSTORAGEEXT,
    CALL_GLEGLIMAGETARGETTEXTURESTORAGEEXT,
    CALL_GLEDGEFLAGFORMATNV,
    CALL_GLEDGEFLAGPOINTEREXT,
    CALL_GLEDGEFLAGPOINTERLISTIBM,
    CALL_GLELEMENTPOINTERAPPLE,
    CALL_GLELEMENTPOINTERATI,
    CALL_GLENABLECLIENTSTATEINDEXEDEXT,
    CALL_GLENABLECLIENTSTATEIEXT,
    CALL_GLENABLEINDEXEDEXT,
    CALL_GLENABLEVARIANTCLIENTSTATEEXT,
    CALL_GLENABLEVERTEXARRAYATTRIB,
    CALL_GLENABLEVERTEXARRAYATTRIBEXT,
    CALL_GLENABLEVERTEXARRAYEXT,
    CALL_GLENABLEVERTEXATTRIBAPPLE,
    CALL_GLENABLEVERTEXATTRIBARRAY,
    CALL_GLENABLEVERTEXATTRIBARRAYARB,
    CALL_GLENABLEI,
    CALL_GLENDCONDITIONALRENDER,
    CALL_GLENDCONDITIONALRENDERNV,
    CALL_GLENDCONDITIONALRENDERNVX,
    CALL_GLENDFRAGMENTSHADERATI,
    CALL_GLENDOCCLUSIONQUERYNV,
    CALL_GLENDPERFMONITORAMD,
    CALL_GLENDPERFQUERYINTEL,
    CALL_GLENDQUERY,
    CALL_GLENDQUERYARB,
    CALL_GLENDQUERYINDEXED,
    CALL_GLENDTRANSFORMFEEDBACK,
    CALL_GLENDTRANSFORMFEEDBACKEXT,
    CALL_GLENDTRANSFORMFEEDBACKNV,
    CALL_GLENDVERTEXSHADEREXT,
    CALL_GLENDVIDEOCAPTURENV,
    CALL_GLEVALCOORD1XOES,
    CALL_GLEVALCOORD1XVOES,
    CALL_GLEVALCOORD2XOES,
    CALL_GLEVALCOORD2XVOES,
    CALL_GLEVALMAPSNV,
    CALL_GLEVALUATEDEPTHVALUESARB,
    CALL_GLEXECUTEPROGRAMNV,
    CALL_GLEXTRACTCOMPONENTEXT,
    CALL_GLFEEDBACKBUFFERXOES,
    CALL_GLFENCESYNC,
    CALL_GLFINALCOMBINERINPUTNV,
    CALL_GLFINISHASYNCSGIX,
    CALL_GLFINISHFENCEAPPLE,
    CALL_GLFINISHFENCENV,
    CALL_GLFINISHOBJECTAPPLE,
    CALL_GLFINISHTEXTURESUNX,
    CALL_GLFLUSHMAPPEDBUFFERRANGE,
    CALL_GLFLUSHMAPPEDBUFFERRANGEAPPLE,
    CALL_GLFLUSHMAPPEDNAMEDBUFFERRANGE,
    CALL_GLFLUSHMAPPEDNAMEDBUFFERRANGEEXT,
    CALL_GLFLUSHPIXELDATARANGENV,
    CALL_GLFLUSHRASTERSGIX,
    CALL_GLFLUSHSTATICDATAIBM,
    CALL_GLFLUSHVERTEXARRAYRANGEAPPLE,
    CALL_GLFLUSHVERTEXARRAYRANGENV,
    CALL_GLFOGCOORDFORMATNV,
    CALL_GLFOGCOORDPOINTER,
    CALL_GLFOGCOORDPOINTEREXT,
    CALL_GLFOGCOORDPOINTERLISTIBM,
    CALL_GLFOGCOORDD,
    CALL_GLFOGCOORDDEXT,
    CALL_GLFOGCOORDDV,
    CALL_GLFOGCOORDDVEXT,
    CALL_GLFOGCOORDF,
    CALL_GLFOGCOORDFEXT,
    CALL_GLFOGCOORDFV,
    CALL_GLFOGCOORDFVEXT,
    CALL_GLFOGCOORDHNV,
    CALL_GLFOGCOORDHVNV,
    CALL_GLFOGFUNCSGIS,
    CALL_GLFOGXOES,
    CALL_GLFOGXVOES,
    CALL_GLFRAGMENTCOLORMATERIALSGIX,
    CALL_GLFRAGMENTCOVERAGECOLORNV,
    CALL_GLFRAGMENTLIGHTMODELFSGIX,
    CALL_GLFRAGMENTLIGHTMODELFVSGIX,
    CALL_GLFRAGMENTLIGHTMODELISGIX,
    CALL_GLFRAGMENTLIGHTMODELIVSGIX,
    CALL_GLFRAGMENTLIGHTFSGIX,
    CALL_GLFRAGMENTLIGHTFVSGIX,
    CALL_GLFRAGMENTLIGHTISGIX,
    CALL_GLFRAGMENTLIGHTIVSGIX,
    CALL_GLFRAGMENTMATERIALFSGIX,
    CALL_GLFRAGMENTMATERIALFVSGIX,
    CALL_GLFRAGMENTMATERIALISGIX,
    CALL_GLFRAGMENTMATERIALIVSGIX,
    CALL_GLFRAMETERMINATORGREMEDY,
    CALL_GLFRAMEZOOMSGIX,
    CALL_GLFRAMEBUFFERDRAWBUFFEREXT,
    CALL_GLFRAMEBUFFERDRAWBUFFERSEXT,
    CALL_GLFRAMEBUFFERFETCHBARRIEREXT,
    CALL_GLFRAMEBUFFERPARAMETERI,
    CALL_GLFRAMEBUFFERPARAMETERIMESA,
    CALL_GLFRAMEBUFFERREADBUFFEREXT,
    CALL_GLFRAMEBUFFERRENDERBUFFER,
    CALL_GLFRAMEBUFFERRENDERBUFFEREXT,
    CALL_GLFRAMEBUFFERSAMPLELOCATIONSFVARB,
    CALL_GLFRAMEBUFFERSAMPLELOCATIONSFVNV,
    CALL_GLFRAMEBUFFERSAMPLEPOSITIONSFVAMD,
    CALL_GLFRAMEBUFFERTEXTURE,
    CALL_GLFRAMEBUFFERTEXTURE1D,
    CALL_GLFRAMEBUFFERTEXTURE1DEXT,
    CALL_GLFRAMEBUFFERTEXTURE2D,
    CALL_GLFRAMEBUFFERTEXTURE2DEXT,
    CALL_GLFRAMEBUFFERTEXTURE3D,
    CALL_GLFRAMEBUFFERTEXTURE3DEXT,
    CALL_GLFRAMEBUFFERTEXTUREARB,
    CALL_GLFRAMEBUFFERTEXTUREEXT,
    CALL_GLFRAMEBUFFERTEXTUREFACEARB,
    CALL_GLFRAMEBUFFERTEXTUREFACEEXT,
    CALL_GLFRAMEBUFFERTEXTURELAYER,
    CALL_GLFRAMEBUFFERTEXTURELAYERARB,
    CALL_GLFRAMEBUFFERTEXTURELAYEREXT,
    CALL_GLFRAMEBUFFERTEXTUREMULTIVIEWOVR,
    CALL_GLFREEOBJECTBUFFERATI,
    CALL_GLFRUSTUMFOES,
    CALL_GLFRUSTUMXOES,
    CALL_GLGENASYNCMARKERSSGIX,
    CALL_GLGENBUFFERS,
    CALL_GLGENBUFFERSARB,
    CALL_GLGENFENCESAPPLE,
    CALL_GLGENFENCESNV,
    CALL_GLGENFRAGMENTSHADERSATI,
    CALL_GLGENFRAMEBUFFERS,
    CALL_GLGENFRAMEBUFFERSEXT,
    CALL_GLGENNAMESAMD,
    CALL_GLGENOCCLUSIONQUERIESNV,
    CALL_GLGENPATHSNV,
    CALL_GLGENPERFMONITORSAMD,
    CALL_GLGENPROGRAMPIPELINES,
    CALL_GLGENPROGRAMSARB,
    CALL_GLGENPROGRAMSNV,
    CALL_GLGENQUERIES,
    CALL_GLGENQUERIESARB,
    CALL_GLGENQUERYRESOURCETAGNV,
    CALL_GLGENRENDERBUFFERS,
    CALL_GLGENRENDERBUFFERSEXT,
    CALL_GLGENSAMPLERS,
    CALL_GLGENSEMAPHORESEXT,
    CALL_GLGENSYMBOLSEXT,
    CALL_GLGENTEXTURESEXT,
    CALL_GLGENTRANSFORMFEEDBACKS,
    CALL_GLGENTRANSFORMFEEDBACKSNV,
    CALL_GLGENVERTEXARRAYS,
    CALL_GLGENVERTEXARRAYSAPPLE,
    CALL_GLGENVERTEXSHADERSEXT,
    CALL_GLGENERATEMIPMAP,
    CALL_GLGENERATEMIPMAPEXT,
    CALL_GLGENERATEMULTITEXMIPMAPEXT,
    CALL_GLGENERATETEXTUREMIPMAP,
    CALL_GLGENERATETEXTUREMIPMAPEXT,
    CALL_GLGETACTIVEATOMICCOUNTERBUFFERIV,
    CALL_GLGETACTIVEATTRIB,
    CALL_GLGETACTIVEATTRIBARB,
    CALL_GLGETACTIVESUBROUTINENAME,
    CALL_GLGETACTIVESUBROUTINEUNIFORMNAME,
    CALL_GLGETACTIVESUBROUTINEUNIFORMIV,
    CALL_GLGETACTIVEUNIFORM,
    CALL_GLGETACTIVEUNIFORMARB,
    CALL_GLGETACTIVEUNIFORMBLOCKNAME,
    CALL_GLGETACTIVEUNIFORMBLOCKIV,
    CALL_GLGETACTIVEUNIFORMNAME,
    CALL_GLGETACTIVEUNIFORMSIV,
    CALL_GLGETACTIVEVARYINGNV,
    CALL_GLGETARRAYOBJECTFVATI,
    CALL_GLGETARRAYOBJECTIVATI,
    CALL_GLGETATTACHEDOBJECTSARB,
    CALL_GLGETATTACHEDSHADERS,
    CALL_GLGETATTRIBLOCATION,
    CALL_GLGETATTRIBLOCATIONARB,
    CALL_GLGETBOOLEANINDEXEDVEXT,
    CALL_GLGETBOOLEANI_V,
    CALL_GLGETBUFFERPARAMETERI64V,
    CALL_GLGETBUFFERPARAMETERIV,
    CALL_GLGETBUFFERPARAMETERIVARB,
    CALL_GLGETBUFFERPARAMETERUI64VNV,
    CALL_GLGETBUFFERPOINTERV,
    CALL_GLGETBUFFERPOINTERVARB,
    CALL_GLGETBUFFERSUBDATA,
    CALL_GLGETBUFFERSUBDATAARB,
    CALL_GLGETCLIPPLANEFOES,
    CALL_GLGETCLIPPLANEXOES,
    CALL_GLGETCOLORTABLE,
    CALL_GLGETCOLORTABLEEXT,
    CALL_GLGETCOLORTABLEPARAMETERFV,
    CALL_GLGETCOLORTABLEPARAMETERFVEXT,
    CALL_GLGETCOLORTABLEPARAMETERFVSGI,
    CALL_GLGETCOLORTABLEPARAMETERIV,
    CALL_GLGETCOLORTABLEPARAMETERIVEXT,
    CALL_GLGETCOLORTABLEPARAMETERIVSGI,
    CALL_GLGETCOLORTABLESGI,
    CALL_GLGETCOMBINERINPUTPARAMETERFVNV,
    CALL_GLGETCOMBINERINPUTPARAMETERIVNV,
    CALL_GLGETCOMBINEROUTPUTPARAMETERFVNV,
    CALL_GLGETCOMBINEROUTPUTPARAMETERIVNV,
    CALL_GLGETCOMBINERSTAGEPARAMETERFVNV,
    CALL_GLGETCOMMANDHEADERNV,
    CALL_GLGETCOMPRESSEDMULTITEXIMAGEEXT,
    CALL_GLGETCOMPRESSEDTEXIMAGE,
    CALL_GLGETCOMPRESSEDTEXIMAGEARB,
    CALL_GLGETCOMPRESSEDTEXTUREIMAGE,
    CALL_GLGETCOMPRESSEDTEXTUREIMAGEEXT,
    CALL_GLGETCOMPRESSEDTEXTURESUBIMAGE,
    CALL_GLGETCONVOLUTIONFILTER,
    CALL_GLGETCONVOLUTIONFILTEREXT,
    CALL_GLGETCONVOLUTIONPARAMETERFV,
    CALL_GLGETCONVOLUTIONPARAMETERFVEXT,
    CALL_GLGETCONVOLUTIONPARAMETERIV,
    CALL_GLGETCONVOLUTIONPARAMETERIVEXT,
    CALL_GLGETCONVOLUTIONPARAMETERXVOES,
    CALL_GLGETCOVERAGEMODULATIONTABLENV,
    CALL_GLGETDEBUGMESSAGELOG,
    CALL_GLGETDEBUGMESSAGELOGAMD,
    CALL_GLGETDEBUGMESSAGELOGARB,
    CALL_GLGETDETAILTEXFUNCSGIS,
    CALL_GLGETDOUBLEINDEXEDVEXT,
    CALL_GLGETDOUBLEI_V,
    CALL_GLGETDOUBLEI_VEXT,
    CALL_GLGETFENCEIVNV,
    CALL_GLGETFINALCOMBINERINPUTPARAMETERFVNV,
    CALL_GLGETFINALCOMBINERINPUTPARAMETERIVNV,
    CALL_GLGETFIRSTPERFQUERYIDINTEL,
    CALL_GLGETFIXEDVOES,
    CALL_GLGETFLOATINDEXEDVEXT,
    CALL_GLGETFLOATI_V,
    CALL_GLGETFLOATI_VEXT,
    CALL_GLGETFOGFUNCSGIS,
    CALL_GLGETFRAGDATAINDEX,
    CALL_GLGETFRAGDATALOCATION,
    CALL_GLGETFRAGDATALOCATIONEXT,
    CALL_GLGETFRAGMENTLIGHTFVSGIX,
    CALL_GLGETFRAGMENTLIGHTIVSGIX,
    CALL_GLGETFRAGMENTMATERIALFVSGIX,
    CALL_GLGETFRAGMENTMATERIALIVSGIX,
    CALL_GLGETFRAMEBUFFERATTACHMENTPARAMETERIV,
    CALL_GLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXT,
    CALL_GLGETFRAMEBUFFERPARAMETERFVAMD,
    CALL_GLGETFRAMEBUFFERPARAMETERIV,
    CALL_GLGETFRAMEBUFFERPARAMETERIVEXT,
    CALL_GLGETFRAMEBUFFERPARAMETERIVMESA,
    CALL_GLGETGRAPHICSRESETSTATUS,
    CALL_GLGETGRAPHICSRESETSTATUSARB,
    CALL_GLGETHANDLEARB,
    CALL_GLGETHISTOGRAM,
    CALL_GLGETHISTOGRAMEXT,
    CALL_GLGETHISTOGRAMPARAMETERFV,
    CALL_GLGETHISTOGRAMPARAMETERFVEXT,
    CALL_GLGETHISTOGRAMPARAMETERIV,
    CALL_GLGETHISTOGRAMPARAMETERIVEXT,
    CALL_GLGETHISTOGRAMPARAMETERXVOES,
    CALL_GLGETIMAGEHANDLEARB,
    CALL_GLGETIMAGEHANDLENV,
    CALL_GLGETIMAGETRANSFORMPARAMETERFVHP,
    CALL_GLGETIMAGETRANSFORMPARAMETERIVHP,
    CALL_GLGETINFOLOGARB,
    CALL_GLGETINSTRUMENTSSGIX,
    CALL_GLGETINTEGER64I_V,
    CALL_GLGETINTEGER64V,
    CALL_GLGETINTEGERINDEXEDVEXT,
    CALL_GLGETINTEGERI_V,
    CALL_GLGETINTEGERUI64I_VNV,
    CALL_GLGETINTEGERUI64VNV,
    CALL_GLGETINTERNALFORMATSAMPLEIVNV,
    CALL_GLGETINTERNALFORMATI64V,
    CALL_GLGETINTERNALFORMATIV,
    CALL_GLGETINVARIANTBOOLEANVEXT,
    CALL_GLGETINVARIANTFLOATVEXT,
    CALL_GLGETINVARIANTINTEGERVEXT,
    CALL_GLGETLIGHTXOES,
    CALL_GLGETLISTPARAMETERFVSGIX,
    CALL_GLGETLISTPARAMETERIVSGIX,
    CALL_GLGETLOCALCONSTANTBOOLEANVEXT,
    CALL_GLGETLOCALCONSTANTFLOATVEXT,
    CALL_GLGETLOCALCONSTANTINTEGERVEXT,
    CALL_GLGETMAPATTRIBPARAMETERFVNV,
    CALL_GLGETMAPATTRIBPARAMETERIVNV,
    CALL_GLGETMAPCONTROLPOINTSNV,
    CALL_GLGETMAPPARAMETERFVNV,
    CALL_GLGETMAPPARAMETERIVNV,
    CALL_GLGETMAPXVOES,
    CALL_GLGETMATERIALXOES,
    CALL_GLGETMEMORYOBJECTDETACHEDRESOURCESUIVNV,
    CALL_GLGETMEMORYOBJECTPARAMETERIVEXT,
    CALL_GLGETMINMAX,
    CALL_GLGETMINMAXEXT,
    CALL_GLGETMINMAXPARAMETERFV,
    CALL_GLGETMINMAXPARAMETERFVEXT,
    CALL_GLGETMINMAXPARAMETERIV,
    CALL_GLGETMINMAXPARAMETERIVEXT,
    CALL_GLGETMULTITEXENVFVEXT,
    CALL_GLGETMULTITEXENVIVEXT,
    CALL_GLGETMULTITEXGENDVEXT,
    CALL_GLGETMULTITEXGENFVEXT,
    CALL_GLGETMULTITEXGENIVEXT,
    CALL_GLGETMULTITEXIMAGEEXT,
    CALL_GLGETMULTITEXLEVELPARAMETERFVEXT,
    CALL_GLGETMULTITEXLEVELPARAMETERIVEXT,
    CALL_GLGETMULTITEXPARAMETERIIVEXT,
    CALL_GLGETMULTITEXPARAMETERIUIVEXT,
    CALL_GLGETMULTITEXPARAMETERFVEXT,
    CALL_GLGETMULTITEXPARAMETERIVEXT,
    CALL_GLGETMULTISAMPLEFV,
    CALL_GLGETMULTISAMPLEFVNV,
    CALL_GLGETNAMEDBUFFERPARAMETERI64V,
    CALL_GLGETNAMEDBUFFERPARAMETERIV,
    CALL_GLGETNAMEDBUFFERPARAMETERIVEXT,
    CALL_GLGETNAMEDBUFFERPARAMETERUI64VNV,
    CALL_GLGETNAMEDBUFFERPOINTERV,
    CALL_GLGETNAMEDBUFFERPOINTERVEXT,
    CALL_GLGETNAMEDBUFFERSUBDATA,
    CALL_GLGETNAMEDBUFFERSUBDATAEXT,
    CALL_GLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIV,
    CALL_GLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXT,
    CALL_GLGETNAMEDFRAMEBUFFERPARAMETERFVAMD,
    CALL_GLGETNAMEDFRAMEBUFFERPARAMETERIV,
    CALL_GLGETNAMEDFRAMEBUFFERPARAMETERIVEXT,
    CALL_GLGETNAMEDPROGRAMLOCALPARAMETERIIVEXT,
    CALL_GLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXT,
    CALL_GLGETNAMEDPROGRAMLOCALPARAMETERDVEXT,
    CALL_GLGETNAMEDPROGRAMLOCALPARAMETERFVEXT,
    CALL_GLGETNAMEDPROGRAMSTRINGEXT,
    CALL_GLGETNAMEDPROGRAMIVEXT,
    CALL_GLGETNAMEDRENDERBUFFERPARAMETERIV,
    CALL_GLGETNAMEDRENDERBUFFERPARAMETERIVEXT,
    CALL_GLGETNAMEDSTRINGARB,
    CALL_GLGETNAMEDSTRINGIVARB,
    CALL_GLGETNEXTPERFQUERYIDINTEL,
    CALL_GLGETOBJECTBUFFERFVATI,
    CALL_GLGETOBJECTBUFFERIVATI,
    CALL_GLGETOBJECTLABEL,
    CALL_GLGETOBJECTLABELEXT,
    CALL_GLGETOBJECTPARAMETERFVARB,
    CALL_GLGETOBJECTPARAMETERIVAPPLE,
    CALL_GLGETOBJECTPARAMETERIVARB,
    CALL_GLGETOBJECTPTRLABEL,
    CALL_GLGETOCCLUSIONQUERYIVNV,
    CALL_GLGETOCCLUSIONQUERYUIVNV,
    CALL_GLGETPATHCOLORGENFVNV,
    CALL_GLGETPATHCOLORGENIVNV,
    CALL_GLGETPATHCOMMANDSNV,
    CALL_GLGETPATHCOORDSNV,
    CALL_GLGETPATHDASHARRAYNV,
    CALL_GLGETPATHLENGTHNV,
    CALL_GLGETPATHMETRICRANGENV,
    CALL_GLGETPATHMETRICSNV,
    CALL_GLGETPATHPARAMETERFVNV,
    CALL_GLGETPATHPARAMETERIVNV,
    CALL_GLGETPATHSPACINGNV,
    CALL_GLGETPATHTEXGENFVNV,
    CALL_GLGETPATHTEXGENIVNV,
    CALL_GLGETPERFCOUNTERINFOINTEL,
    CALL_GLGETPERFMONITORCOUNTERDATAAMD,
    CALL_GLGETPERFMONITORCOUNTERINFOAMD,
    CALL_GLGETPERFMONITORCOUNTERSTRINGAMD,
    CALL_GLGETPERFMONITORCOUNTERSAMD,
    CALL_GLGETPERFMONITORGROUPSTRINGAMD,
    CALL_GLGETPERFMONITORGROUPSAMD,
    CALL_GLGETPERFQUERYDATAINTEL,
    CALL_GLGETPERFQUERYIDBYNAMEINTEL,
    CALL_GLGETPERFQUERYINFOINTEL,
    CALL_GLGETPIXELMAPXV,
    CALL_GLGETPIXELTEXGENPARAMETERFVSGIS,
    CALL_GLGETPIXELTEXGENPARAMETERIVSGIS,
    CALL_GLGETPIXELTRANSFORMPARAMETERFVEXT,
    CALL_GLGETPIXELTRANSFORMPARAMETERIVEXT,
    CALL_GLGETPOINTERINDEXEDVEXT,
    CALL_GLGETPOINTERI_VEXT,
    CALL_GLGETPOINTERVEXT,
    CALL_GLGETPROGRAMBINARY,
    CALL_GLGETPROGRAMENVPARAMETERIIVNV,
    CALL_GLGETPROGRAMENVPARAMETERIUIVNV,
    CALL_GLGETPROGRAMENVPARAMETERDVARB,
    CALL_GLGETPROGRAMENVPARAMETERFVARB,
    CALL_GLGETPROGRAMINFOLOG,
    CALL_GLGETPROGRAMINTERFACEIV,
    CALL_GLGETPROGRAMLOCALPARAMETERIIVNV,
    CALL_GLGETPROGRAMLOCALPARAMETERIUIVNV,
    CALL_GLGETPROGRAMLOCALPARAMETERDVARB,
    CALL_GLGETPROGRAMLOCALPARAMETERFVARB,
    CALL_GLGETPROGRAMNAMEDPARAMETERDVNV,
    CALL_GLGETPROGRAMNAMEDPARAMETERFVNV,
    CALL_GLGETPROGRAMPARAMETERDVNV,
    CALL_GLGETPROGRAMPARAMETERFVNV,
    CALL_GLGETPROGRAMPIPELINEINFOLOG,
    CALL_GLGETPROGRAMPIPELINEIV,
    CALL_GLGETPROGRAMRESOURCEINDEX,
    CALL_GLGETPROGRAMRESOURCELOCATION,
    CALL_GLGETPROGRAMRESOURCELOCATIONINDEX,
    CALL_GLGETPROGRAMRESOURCENAME,
    CALL_GLGETPROGRAMRESOURCEFVNV,
    CALL_GLGETPROGRAMRESOURCEIV,
    CALL_GLGETPROGRAMSTAGEIV,
    CALL_GLGETPROGRAMSTRINGARB,
    CALL_GLGETPROGRAMSTRINGNV,
    CALL_GLGETPROGRAMSUBROUTINEPARAMETERUIVNV,
    CALL_GLGETPROGRAMIV,
    CALL_GLGETPROGRAMIVARB,
    CALL_GLGETPROGRAMIVNV,
    CALL_GLGETQUERYBUFFEROBJECTI64V,
    CALL_GLGETQUERYBUFFEROBJECTIV,
    CALL_GLGETQUERYBUFFEROBJECTUI64V,
    CALL_GLGETQUERYBUFFEROBJECTUIV,
    CALL_GLGETQUERYINDEXEDIV,
    CALL_GLGETQUERYOBJECTI64V,
    CALL_GLGETQUERYOBJECTI64VEXT,
    CALL_GLGETQUERYOBJECTIV,
    CALL_GLGETQUERYOBJECTIVARB,
    CALL_GLGETQUERYOBJECTUI64V,
    CALL_GLGETQUERYOBJECTUI64VEXT,
    CALL_GLGETQUERYOBJECTUIV,
    CALL_GLGETQUERYOBJECTUIVARB,
    CALL_GLGETQUERYIV,
    CALL_GLGETQUERYIVARB,
    CALL_GLGETRENDERBUFFERPARAMETERIV,
    CALL_GLGETRENDERBUFFERPARAMETERIVEXT,
    CALL_GLGETSAMPLERPARAMETERIIV,
    CALL_GLGETSAMPLERPARAMETERIUIV,
    CALL_GLGETSAMPLERPARAMETERFV,
    CALL_GLGETSAMPLERPARAMETERIV,
    CALL_GLGETSEMAPHOREPARAMETERUI64VEXT,
    CALL_GLGETSEPARABLEFILTER,
    CALL_GLGETSEPARABLEFILTEREXT,
    CALL_GLGETSHADERINFOLOG,
    CALL_GLGETSHADERPRECISIONFORMAT,
    CALL_GLGETSHADERSOURCE,
    CALL_GLGETSHADERSOURCEARB,
    CALL_GLGETSHADERIV,
    CALL_GLGETSHADINGRATEIMAGEPALETTENV,
    CALL_GLGETSHADINGRATESAMPLELOCATIONIVNV,
    CALL_GLGETSHARPENTEXFUNCSGIS,
    CALL_GLGETSTAGEINDEXNV,
    CALL_GLGETSTRINGI,
    CALL_GLGETSUBROUTINEINDEX,
    CALL_GLGETSUBROUTINEUNIFORMLOCATION,
    CALL_GLGETSYNCIV,
    CALL_GLGETTEXBUMPPARAMETERFVATI,
    CALL_GLGETTEXBUMPPARAMETERIVATI,
    CALL_GLGETTEXENVXVOES,
    CALL_GLGETTEXFILTERFUNCSGIS,
    CALL_GLGETTEXGENXVOES,
    CALL_GLGETTEXLEVELPARAMETERXVOES,
    CALL_GLGETTEXPARAMETERIIV,
    CALL_GLGETTEXPARAMETERIIVEXT,
    CALL_GLGETTEXPARAMETERIUIV,
    CALL_GLGETTEXPARAMETERIUIVEXT,
    CALL_GLGETTEXPARAMETERPOINTERVAPPLE,
    CALL_GLGETTEXPARAMETERXVOES,
    CALL_GLGETTEXTUREHANDLEARB,
    CALL_GLGETTEXTUREHANDLENV,
    CALL_GLGETTEXTUREIMAGE,
    CALL_GLGETTEXTUREIMAGEEXT,
    CALL_GLGETTEXTURELEVELPARAMETERFV,
    CALL_GLGETTEXTURELEVELPARAMETERFVEXT,
    CALL_GLGETTEXTURELEVELPARAMETERIV,
    CALL_GLGETTEXTURELEVELPARAMETERIVEXT,
    CALL_GLGETTEXTUREPARAMETERIIV,
    CALL_GLGETTEXTUREPARAMETERIIVEXT,
    CALL_GLGETTEXTUREPARAMETERIUIV,
    CALL_GLGETTEXTUREPARAMETERIUIVEXT,
    CALL_GLGETTEXTUREPARAMETERFV,
    CALL_GLGETTEXTUREPARAMETERFVEXT,
    CALL_GLGETTEXTUREPARAMETERIV,
    CALL_GLGETTEXTUREPARAMETERIVEXT,
    CALL_GLGETTEXTURESAMPLERHANDLEARB,
    CALL_GLGETTEXTURESAMPLERHANDLENV,
    CALL_GLGETTEXTURESUBIMAGE,
    CALL_GLGETTRACKMATRIXIVNV,
    CALL_GLGETTRANSFORMFEEDBACKVARYING,
    CALL_GLGETTRANSFORMFEEDBACKVARYINGEXT,
    CALL_GLGETTRANSFORMFEEDBACKVARYINGNV,
    CALL_GLGETTRANSFORMFEEDBACKI64_V,
    CALL_GLGETTRANSFORMFEEDBACKI_V,
    CALL_GLGETTRANSFORMFEEDBACKIV,
    CALL_GLGETUNIFORMBLOCKINDEX,
    CALL_GLGETUNIFORMBUFFERSIZEEXT,
    CALL_GLGETUNIFORMINDICES,
    CALL_GLGETUNIFORMLOCATION,
    CALL_GLGETUNIFORMLOCATIONARB,
    CALL_GLGETUNIFORMOFFSETEXT,
    CALL_GLGETUNIFORMSUBROUTINEUIV,
    CALL_GLGETUNIFORMDV,
    CALL_GLGETUNIFORMFV,
    CALL_GLGETUNIFORMFVARB,
    CALL_GLGETUNIFORMI64VARB,
    CALL_GLGETUNIFORMI64VNV,
    CALL_GLGETUNIFORMIV,
    CALL_GLGETUNIFORMIVARB,
    CALL_GLGETUNIFORMUI64VARB,
    CALL_GLGETUNIFORMUI64VNV,
    CALL_GLGETUNIFORMUIV,
    CALL_GLGETUNIFORMUIVEXT,
    CALL_GLGETUNSIGNEDBYTEI_VEXT,
    CALL_GLGETUNSIGNEDBYTEVEXT,
    CALL_GLGETVARIANTARRAYOBJECTFVATI,
    CALL_GLGETVARIANTARRAYOBJECTIVATI,
    CALL_GLGETVARIANTBOOLEANVEXT,
    CALL_GLGETVARIANTFLOATVEXT,
    CALL_GLGETVARIANTINTEGERVEXT,
    CALL_GLGETVARIANTPOINTERVEXT,
    CALL_GLGETVARYINGLOCATIONNV,
    CALL_GLGETVERTEXARRAYINDEXED64IV,
    CALL_GLGETVERTEXARRAYINDEXEDIV,
    CALL_GLGETVERTEXARRAYINTEGERI_VEXT,
    CALL_GLGETVERTEXARRAYINTEGERVEXT,
    CALL_GLGETVERTEXARRAYPOINTERI_VEXT,
    CALL_GLGETVERTEXARRAYPOINTERVEXT,
    CALL_GLGETVERTEXARRAYIV,
    CALL_GLGETVERTEXATTRIBARRAYOBJECTFVATI,
    CALL_GLGETVERTEXATTRIBARRAYOBJECTIVATI,
    CALL_GLGETVERTEXATTRIBIIV,
    CALL_GLGETVERTEXATTRIBIIVEXT,
    CALL_GLGETVERTEXATTRIBIUIV,
    CALL_GLGETVERTEXATTRIBIUIVEXT,
    CALL_GLGETVERTEXATTRIBLDV,
    CALL_GLGETVERTEXATTRIBLDVEXT,
    CALL_GLGETVERTEXATTRIBLI64VNV,
    CALL_GLGETVERTEXATTRIBLUI64VARB,
    CALL_GLGETVERTEXATTRIBLUI64VNV,
    CALL_GLGETVERTEXATTRIBPOINTERV,
    CALL_GLGETVERTEXATTRIBPOINTERVARB,
    CALL_GLGETVERTEXATTRIBPOINTERVNV,
    CALL_GLGETVERTEXATTRIBDV,
    CALL_GLGETVERTEXATTRIBDVARB,
    CALL_GLGETVERTEXATTRIBDVNV,
    CALL_GLGETVERTEXATTRIBFV,
    CALL_GLGETVERTEXATTRIBFVARB,
    CALL_GLGETVERTEXATTRIBFVNV,
    CALL_GLGETVERTEXATTRIBIV,
    CALL_GLGETVERTEXATTRIBIVARB,
    CALL_GLGETVERTEXATTRIBIVNV,
    CALL_GLGETVIDEOCAPTURESTREAMDVNV,
    CALL_GLGETVIDEOCAPTURESTREAMFVNV,
    CALL_GLGETVIDEOCAPTURESTREAMIVNV,
    CALL_GLGETVIDEOCAPTUREIVNV,
    CALL_GLGETVIDEOI64VNV,
    CALL_GLGETVIDEOIVNV,
    CALL_GLGETVIDEOUI64VNV,
    CALL_GLGETVIDEOUIVNV,
    CALL_GLGETVKPROCADDRNV,
    CALL_GLGETNCOLORTABLE,
    CALL_GLGETNCOLORTABLEARB,
    CALL_GLGETNCOMPRESSEDTEXIMAGE,
    CALL_GLGETNCOMPRESSEDTEXIMAGEARB,
    CALL_GLGETNCONVOLUTIONFILTER,
    CALL_GLGETNCONVOLUTIONFILTERARB,
    CALL_GLGETNHISTOGRAM,
    CALL_GLGETNHISTOGRAMARB,
    CALL_GLGETNMAPDV,
    CALL_GLGETNMAPDVARB,
    CALL_GLGETNMAPFV,
    CALL_GLGETNMAPFVARB,
    CALL_GLGETNMAPIV,
    CALL_GLGETNMAPIVARB,
    CALL_GLGETNMINMAX,
    CALL_GLGETNMINMAXARB,
    CALL_GLGETNPIXELMAPFV,
    CALL_GLGETNPIXELMAPFVARB,
    CALL_GLGETNPIXELMAPUIV,
    CALL_GLGETNPIXELMAPUIVARB,
    CALL_GLGETNPIXELMAPUSV,
    CALL_GLGETNPIXELMAPUSVARB,
    CALL_GLGETNPOLYGONSTIPPLE,
    CALL_GLGETNPOLYGONSTIPPLEARB,
    CALL_GLGETNSEPARABLEFILTER,
    CALL_GLGETNSEPARABLEFILTERARB,
    CALL_GLGETNTEXIMAGE,
    CALL_GLGETNTEXIMAGEARB,
    CALL_GLGETNUNIFORMDV,
    CALL_GLGETNUNIFORMDVARB,
    CALL_GLGETNUNIFORMFV,
    CALL_GLGETNUNIFORMFVARB,
    CALL_GLGETNUNIFORMI64VARB,
    CALL_GLGETNUNIFORMIV,
    CALL_GLGETNUNIFORMIVARB,
    CALL_GLGETNUNIFORMUI64VARB,
    CALL_GLGETNUNIFORMUIV,
    CALL_GLGETNUNIFORMUIVARB,
    CALL_GLGLOBALALPHAFACTORBSUN,
    CALL_GLGLOBALALPHAFACTORDSUN,
    CALL_GLGLOBALALPHAFACTORFSUN,
    CALL_GLGLOBALALPHAFACTORISUN,
    CALL_GLGLOBALALPHAFACTORSSUN,
    CALL_GLGLOBALALPHAFACTORUBSUN,
    CALL_GLGLOBALALPHAFACTORUISUN,
    CALL_GLGLOBALALPHAFACTORUSSUN,
    CALL_GLHINTPGI,
    CALL_GLHISTOGRAM,
    CALL_GLHISTOGRAMEXT,
    CALL_GLIGLOOINTERFACESGIX,
    CALL_GLIMAGETRANSFORMPARAMETERFHP,
    CALL_GLIMAGETRANSFORMPARAMETERFVHP,
    CALL_GLIMAGETRANSFORMPARAMETERIHP,
    CALL_GLIMAGETRANSFORMPARAMETERIVHP,
    CALL_GLIMPORTMEMORYFDEXT,
    CALL_GLIMPORTMEMORYWIN32HANDLEEXT,
    CALL_GLIMPORTMEMORYWIN32NAMEEXT,
    CALL_GLIMPORTSEMAPHOREFDEXT,
    CALL_GLIMPORTSEMAPHOREWIN32HANDLEEXT,
    CALL_GLIMPORTSEMAPHOREWIN32NAMEEXT,
    CALL_GLIMPORTSYNCEXT,
    CALL_GLINDEXFORMATNV,
    CALL_GLINDEXFUNCEXT,
    CALL_GLINDEXMATERIALEXT,
    CALL_GLINDEXPOINTEREXT,
    CALL_GLINDEXPOINTERLISTIBM,
    CALL_GLINDEXXOES,
    CALL_GLINDEXXVOES,
    CALL_GLINSERTCOMPONENTEXT,
    CALL_GLINSERTEVENTMARKEREXT,
    CALL_GLINSTRUMENTSBUFFERSGIX,
    CALL_GLINTERPOLATEPATHSNV,
    CALL_GLINVALIDATEBUFFERDATA,
    CALL_GLINVALIDATEBUFFERSUBDATA,
    CALL_GLINVALIDATEFRAMEBUFFER,
    CALL_GLINVALIDATENAMEDFRAMEBUFFERDATA,
    CALL_GLINVALIDATENAMEDFRAMEBUFFERSUBDATA,
    CALL_GLINVALIDATESUBFRAMEBUFFER,
    CALL_GLINVALIDATETEXIMAGE,
    CALL_GLINVALIDATETEXSUBIMAGE,
    CALL_GLISASYNCMARKERSGIX,
    CALL_GLISBUFFER,
    CALL_GLISBUFFERARB,
    CALL_GLISBUFFERRESIDENTNV,
    CALL_GLISCOMMANDLISTNV,
    CALL_GLISENABLEDINDEXEDEXT,
    CALL_GLISENABLEDI,
    CALL_GLISFENCEAPPLE,
    CALL_GLISFENCENV,
    CALL_GLISFRAMEBUFFER,
    CALL_GLISFRAMEBUFFEREXT,
    CALL_GLISIMAGEHANDLERESIDENTARB,
    CALL_GLISIMAGEHANDLERESIDENTNV,
    CALL_GLISMEMORYOBJECTEXT,
    CALL_GLISNAMEAMD,
    CALL_GLISNAMEDBUFFERRESIDENTNV,
    CALL_GLISNAMEDSTRINGARB,
    CALL_GLISOBJECTBUFFERATI,
    CALL_GLISOCCLUSIONQUERYNV,
    CALL_GLISPATHNV,
    CALL_GLISPOINTINFILLPATHNV,
    CALL_GLISPOINTINSTROKEPATHNV,
    CALL_GLISPROGRAM,
    CALL_GLISPROGRAMARB,
    CALL_GLISPROGRAMNV,
    CALL_GLISPROGRAMPIPELINE,
    CALL_GLISQUERY,
    CALL_GLISQUERYARB,
    CALL_GLISRENDERBUFFER,
    CALL_GLISRENDERBUFFEREXT,
    CALL_GLISSAMPLER,
    CALL_GLISSEMAPHOREEXT,
    CALL_GLISSHADER,
    CALL_GLISSTATENV,
    CALL_GLISSYNC,
    CALL_GLISTEXTUREEXT,
    CALL_GLISTEXTUREHANDLERESIDENTARB,
    CALL_GLISTEXTUREHANDLERESIDENTNV,
    CALL_GLISTRANSFORMFEEDBACK,
    CALL_GLISTRANSFORMFEEDBACKNV,
    CALL_GLISVARIANTENABLEDEXT,
    CALL_GLISVERTEXARRAY,
    CALL_GLISVERTEXARRAYAPPLE,
    CALL_GLISVERTEXATTRIBENABLEDAPPLE,
    CALL_GLLGPUCOPYIMAGESUBDATANVX,
    CALL_GLLGPUINTERLOCKNVX,
    CALL_GLLGPUNAMEDBUFFERSUBDATANVX,
    CALL_GLLABELOBJECTEXT,
    CALL_GLLIGHTENVISGIX,
    CALL_GLLIGHTMODELXOES,
    CALL_GLLIGHTMODELXVOES,
    CALL_GLLIGHTXOES,
    CALL_GLLIGHTXVOES,
    CALL_GLLINEWIDTHXOES,
    CALL_GLLINKPROGRAM,
    CALL_GLLINKPROGRAMARB,
    CALL_GLLISTDRAWCOMMANDSSTATESCLIENTNV,
    CALL_GLLISTPARAMETERFSGIX,
    CALL_GLLISTPARAMETERFVSGIX,
    CALL_GLLISTPARAMETERISGIX,
    CALL_GLLISTPARAMETERIVSGIX,
    CALL_GLLOADIDENTITYDEFORMATIONMAPSGIX,
    CALL_GLLOADMATRIXXOES,
    CALL_GLLOADPROGRAMNV,
    CALL_GLLOADTRANSPOSEMATRIXD,
    CALL_GLLOADTRANSPOSEMATRIXDARB,
    CALL_GLLOADTRANSPOSEMATRIXF,
    CALL_GLLOADTRANSPOSEMATRIXFARB,
    CALL_GLLOADTRANSPOSEMATRIXXOES,
    CALL_GLLOCKARRAYSEXT,
    CALL_GLMTEXCOORD2FSGIS,
    CALL_GLMTEXCOORD2FVSGIS,
    CALL_GLMAKEBUFFERNONRESIDENTNV,
    CALL_GLMAKEBUFFERRESIDENTNV,
    CALL_GLMAKEIMAGEHANDLENONRESIDENTARB,
    CALL_GLMAKEIMAGEHANDLENONRESIDENTNV,
    CALL_GLMAKEIMAGEHANDLERESIDENTARB,
    CALL_GLMAKEIMAGEHANDLERESIDENTNV,
    CALL_GLMAKENAMEDBUFFERNONRESIDENTNV,
    CALL_GLMAKENAMEDBUFFERRESIDENTNV,
    CALL_GLMAKETEXTUREHANDLENONRESIDENTARB,
    CALL_GLMAKETEXTUREHANDLENONRESIDENTNV,
    CALL_GLMAKETEXTUREHANDLERESIDENTARB,
    CALL_GLMAKETEXTUREHANDLERESIDENTNV,
    CALL_GLMAP1XOES,
    CALL_GLMAP2XOES,
    CALL_GLMAPBUFFER,
    CALL_GLMAPBUFFERARB,
    CALL_GLMAPBUFFERRANGE,
    CALL_GLMAPCONTROLPOINTSNV,
    CALL_GLMAPGRID1XOES,
    CALL_GLMAPGRID2XOES,
    CALL_GLMAPNAMEDBUFFER,
    CALL_GLMAPNAMEDBUFFEREXT,
    CALL_GLMAPNAMEDBUFFERRANGE,
    CALL_GLMAPNAMEDBUFFERRANGEEXT,
    CALL_GLMAPOBJECTBUFFERATI,
    CALL_GLMAPPARAMETERFVNV,
    CALL_GLMAPPARAMETERIVNV,
    CALL_GLMAPTEXTURE2DINTEL,
    CALL_GLMAPVERTEXATTRIB1DAPPLE,
    CALL_GLMAPVERTEXATTRIB1FAPPLE,
    CALL_GLMAPVERTEXATTRIB2DAPPLE,
    CALL_GLMAPVERTEXATTRIB2FAPPLE,
    CALL_GLMATERIALXOES,
    CALL_GLMATERIALXVOES,
    CALL_GLMATRIXFRUSTUMEXT,
    CALL_GLMATRIXINDEXPOINTERARB,
    CALL_GLMATRIXINDEXUBVARB,
    CALL_GLMATRIXINDEXUIVARB,
    CALL_GLMATRIXINDEXUSVARB,
    CALL_GLMATRIXLOAD3X2FNV,
    CALL_GLMATRIXLOAD3X3FNV,
    CALL_GLMATRIXLOADIDENTITYEXT,
    CALL_GLMATRIXLOADTRANSPOSE3X3FNV,
    CALL_GLMATRIXLOADTRANSPOSEDEXT,
    CALL_GLMATRIXLOADTRANSPOSEFEXT,
    CALL_GLMATRIXLOADDEXT,
    CALL_GLMATRIXLOADFEXT,
    CALL_GLMATRIXMULT3X2FNV,
    CALL_GLMATRIXMULT3X3FNV,
    CALL_GLMATRIXMULTTRANSPOSE3X3FNV,
    CALL_GLMATRIXMULTTRANSPOSEDEXT,
    CALL_GLMATRIXMULTTRANSPOSEFEXT,
    CALL_GLMATRIXMULTDEXT,
    CALL_GLMATRIXMULTFEXT,
    CALL_GLMATRIXORTHOEXT,
    CALL_GLMATRIXPOPEXT,
    CALL_GLMATRIXPUSHEXT,
    CALL_GLMATRIXROTATEDEXT,
    CALL_GLMATRIXROTATEFEXT,
    CALL_GLMATRIXSCALEDEXT,
    CALL_GLMATRIXSCALEFEXT,
    CALL_GLMATRIXTRANSLATEDEXT,
    CALL_GLMATRIXTRANSLATEFEXT,
    CALL_GLMAXSHADERCOMPILERTHREADSARB,
    CALL_GLMAXSHADERCOMPILERTHREADSKHR,
    CALL_GLMEMORYBARRIER,
    CALL_GLMEMORYBARRIERBYREGION,
    CALL_GLMEMORYBARRIEREXT,
    CALL_GLMEMORYOBJECTPARAMETERIVEXT,
    CALL_GLMINSAMPLESHADING,
    CALL_GLMINSAMPLESHADINGARB,
    CALL_GLMINMAX,
    CALL_GLMINMAXEXT,
    CALL_GLMULTMATRIXXOES,
    CALL_GLMULTTRANSPOSEMATRIXD,
    CALL_GLMULTTRANSPOSEMATRIXDARB,
    CALL_GLMULTTRANSPOSEMATRIXF,
    CALL_GLMULTTRANSPOSEMATRIXFARB,
    CALL_GLMULTTRANSPOSEMATRIXXOES,
    CALL_GLMULTIDRAWARRAYS,
    CALL_GLMULTIDRAWARRAYSEXT,
    CALL_GLMULTIDRAWARRAYSINDIRECT,
    CALL_GLMULTIDRAWARRAYSINDIRECTAMD,
    CALL_GLMULTIDRAWARRAYSINDIRECTBINDLESSCOUNTNV,
    CALL_GLMULTIDRAWARRAYSINDIRECTBINDLESSNV,
    CALL_GLMULTIDRAWARRAYSINDIRECTCOUNT,
    CALL_GLMULTIDRAWARRAYSINDIRECTCOUNTARB,
    CALL_GLMULTIDRAWELEMENTARRAYAPPLE,
    CALL_GLMULTIDRAWELEMENTS,
    CALL_GLMULTIDRAWELEMENTSBASEVERTEX,
    CALL_GLMULTIDRAWELEMENTSEXT,
    CALL_GLMULTIDRAWELEMENTSINDIRECT,
    CALL_GLMULTIDRAWELEMENTSINDIRECTAMD,
    CALL_GLMULTIDRAWELEMENTSINDIRECTBINDLESSCOUNTNV,
    CALL_GLMULTIDRAWELEMENTSINDIRECTBINDLESSNV,
    CALL_GLMULTIDRAWELEMENTSINDIRECTCOUNT,
    CALL_GLMULTIDRAWELEMENTSINDIRECTCOUNTARB,
    CALL_GLMULTIDRAWMESHTASKSINDIRECTCOUNTNV,
    CALL_GLMULTIDRAWMESHTASKSINDIRECTNV,
    CALL_GLMULTIDRAWRANGEELEMENTARRAYAPPLE,
    CALL_GLMULTIMODEDRAWARRAYSIBM,
    CALL_GLMULTIMODEDRAWELEMENTSIBM,
    CALL_GLMULTITEXBUFFEREXT,
    CALL_GLMULTITEXCOORD1BOES,
    CALL_GLMULTITEXCOORD1BVOES,
    CALL_GLMULTITEXCOORD1D,
    CALL_GLMULTITEXCOORD1DARB,
    CALL_GLMULTITEXCOORD1DSGIS,
    CALL_GLMULTITEXCOORD1DV,
    CALL_GLMULTITEXCOORD1DVARB,
    CALL_GLMULTITEXCOORD1DVSGIS,
    CALL_GLMULTITEXCOORD1F,
    CALL_GLMULTITEXCOORD1FARB,
    CALL_GLMULTITEXCOORD1FSGIS,
    CALL_GLMULTITEXCOORD1FV,
    CALL_GLMULTITEXCOORD1FVARB,
    CALL_GLMULTITEXCOORD1FVSGIS,
    CALL_GLMULTITEXCOORD1HNV,
    CALL_GLMULTITEXCOORD1HVNV,
    CALL_GLMULTITEXCOORD1I,
    CALL_GLMULTITEXCOORD1IARB,
    CALL_GLMULTITEXCOORD1ISGIS,
    CALL_GLMULTITEXCOORD1IV,
    CALL_GLMULTITEXCOORD1IVARB,
    CALL_GLMULTITEXCOORD1IVSGIS,
    CALL_GLMULTITEXCOORD1S,
    CALL_GLMULTITEXCOORD1SARB,
    CALL_GLMULTITEXCOORD1SSGIS,
    CALL_GLMULTITEXCOORD1SV,
    CALL_GLMULTITEXCOORD1SVARB,
    CALL_GLMULTITEXCOORD1SVSGIS,
    CALL_GLMULTITEXCOORD1XOES,
    CALL_GLMULTITEXCOORD1XVOES,
    CALL_GLMULTITEXCOORD2BOES,
    CALL_GLMULTITEXCOORD2BVOES,
    CALL_GLMULTITEXCOORD2D,
    CALL_GLMULTITEXCOORD2DARB,
    CALL_GLMULTITEXCOORD2DSGIS,
    CALL_GLMULTITEXCOORD2DV,
    CALL_GLMULTITEXCOORD2DVARB,
    CALL_GLMULTITEXCOORD2DVSGIS,
    CALL_GLMULTITEXCOORD2F,
    CALL_GLMULTITEXCOORD2FARB,
    CALL_GLMULTITEXCOORD2FSGIS,
    CALL_GLMULTITEXCOORD2FV,
    CALL_GLMULTITEXCOORD2FVARB,
    CALL_GLMULTITEXCOORD2FVSGIS,
    CALL_GLMULTITEXCOORD2HNV,
    CALL_GLMULTITEXCOORD2HVNV,
    CALL_GLMULTITEXCOORD2I,
    CALL_GLMULTITEXCOORD2IARB,
    CALL_GLMULTITEXCOORD2ISGIS,
    CALL_GLMULTITEXCOORD2IV,
    CALL_GLMULTITEXCOORD2IVARB,
    CALL_GLMULTITEXCOORD2IVSGIS,
    CALL_GLMULTITEXCOORD2S,
    CALL_GLMULTITEXCOORD2SARB,
    CALL_GLMULTITEXCOORD2SSGIS,
    CALL_GLMULTITEXCOORD2SV,
    CALL_GLMULTITEXCOORD2SVARB,
    CALL_GLMULTITEXCOORD2SVSGIS,
    CALL_GLMULTITEXCOORD2XOES,
    CALL_GLMULTITEXCOORD2XVOES,
    CALL_GLMULTITEXCOORD3BOES,
    CALL_GLMULTITEXCOORD3BVOES,
    CALL_GLMULTITEXCOORD3D,
    CALL_GLMULTITEXCOORD3DARB,
    CALL_GLMULTITEXCOORD3DSGIS,
    CALL_GLMULTITEXCOORD3DV,
    CALL_GLMULTITEXCOORD3DVARB,
    CALL_GLMULTITEXCOORD3DVSGIS,
    CALL_GLMULTITEXCOORD3F,
    CALL_GLMULTITEXCOORD3FARB,
    CALL_GLMULTITEXCOORD3FSGIS,
    CALL_GLMULTITEXCOORD3FV,
    CALL_GLMULTITEXCOORD3FVARB,
    CALL_GLMULTITEXCOORD3FVSGIS,
    CALL_GLMULTITEXCOORD3HNV,
    CALL_GLMULTITEXCOORD3HVNV,
    CALL_GLMULTITEXCOORD3I,
    CALL_GLMULTITEXCOORD3IARB,
    CALL_GLMULTITEXCOORD3ISGIS,
    CALL_GLMULTITEXCOORD3IV,
    CALL_GLMULTITEXCOORD3IVARB,
    CALL_GLMULTITEXCOORD3IVSGIS,
    CALL_GLMULTITEXCOORD3S,
    CALL_GLMULTITEXCOORD3SARB,
    CALL_GLMULTITEXCOORD3SSGIS,
    CALL_GLMULTITEXCOORD3SV,
    CALL_GLMULTITEXCOORD3SVARB,
    CALL_GLMULTITEXCOORD3SVSGIS,
    CALL_GLMULTITEXCOORD3XOES,
    CALL_GLMULTITEXCOORD3XVOES,
    CALL_GLMULTITEXCOORD4BOES,
    CALL_GLMULTITEXCOORD4BVOES,
    CALL_GLMULTITEXCOORD4D,
    CALL_GLMULTITEXCOORD4DARB,
    CALL_GLMULTITEXCOORD4DSGIS,
    CALL_GLMULTITEXCOORD4DV,
    CALL_GLMULTITEXCOORD4DVARB,
    CALL_GLMULTITEXCOORD4DVSGIS,
    CALL_GLMULTITEXCOORD4F,
    CALL_GLMULTITEXCOORD4FARB,
    CALL_GLMULTITEXCOORD4FSGIS,
    CALL_GLMULTITEXCOORD4FV,
    CALL_GLMULTITEXCOORD4FVARB,
    CALL_GLMULTITEXCOORD4FVSGIS,
    CALL_GLMULTITEXCOORD4HNV,
    CALL_GLMULTITEXCOORD4HVNV,
    CALL_GLMULTITEXCOORD4I,
    CALL_GLMULTITEXCOORD4IARB,
    CALL_GLMULTITEXCOORD4ISGIS,
    CALL_GLMULTITEXCOORD4IV,
    CALL_GLMULTITEXCOORD4IVARB,
    CALL_GLMULTITEXCOORD4IVSGIS,
    CALL_GLMULTITEXCOORD4S,
    CALL_GLMULTITEXCOORD4SARB,
    CALL_GLMULTITEXCOORD4SSGIS,
    CALL_GLMULTITEXCOORD4SV,
    CALL_GLMULTITEXCOORD4SVARB,
    CALL_GLMULTITEXCOORD4SVSGIS,
    CALL_GLMULTITEXCOORD4XOES,
    CALL_GLMULTITEXCOORD4XVOES,
    CALL_GLMULTITEXCOORDP1UI,
    CALL_GLMULTITEXCOORDP1UIV,
    CALL_GLMULTITEXCOORDP2UI,
    CALL_GLMULTITEXCOORDP2UIV,
    CALL_GLMULTITEXCOORDP3UI,
    CALL_GLMULTITEXCOORDP3UIV,
    CALL_GLMULTITEXCOORDP4UI,
    CALL_GLMULTITEXCOORDP4UIV,
    CALL_GLMULTITEXCOORDPOINTEREXT,
    CALL_GLMULTITEXCOORDPOINTERSGIS,
    CALL_GLMULTITEXENVFEXT,
    CALL_GLMULTITEXENVFVEXT,
    CALL_GLMULTITEXENVIEXT,
    CALL_GLMULTITEXENVIVEXT,
    CALL_GLMULTITEXGENDEXT,
    CALL_GLMULTITEXGENDVEXT,
    CALL_GLMULTITEXGENFEXT,
    CALL_GLMULTITEXGENFVEXT,
    CALL_GLMULTITEXGENIEXT,
    CALL_GLMULTITEXGENIVEXT,
    CALL_GLMULTITEXIMAGE1DEXT,
    CALL_GLMULTITEXIMAGE2DEXT,
    CALL_GLMULTITEXIMAGE3DEXT,
    CALL_GLMULTITEXPARAMETERIIVEXT,
    CALL_GLMULTITEXPARAMETERIUIVEXT,
    CALL_GLMULTITEXPARAMETERFEXT,
    CALL_GLMULTITEXPARAMETERFVEXT,
    CALL_GLMULTITEXPARAMETERIEXT,
    CALL_GLMULTITEXPARAMETERIVEXT,
    CALL_GLMULTITEXRENDERBUFFEREXT,
    CALL_GLMULTITEXSUBIMAGE1DEXT,
    CALL_GLMULTITEXSUBIMAGE2DEXT,
    CALL_GLMULTITEXSUBIMAGE3DEXT,
    CALL_GLMULTICASTBARRIERNV,
    CALL_GLMULTICASTBLITFRAMEBUFFERNV,
    CALL_GLMULTICASTBUFFERSUBDATANV,
    CALL_GLMULTICASTCOPYBUFFERSUBDATANV,
    CALL_GLMULTICASTCOPYIMAGESUBDATANV,
    CALL_GLMULTICASTFRAMEBUFFERSAMPLELOCATIONSFVNV,
    CALL_GLMULTICASTGETQUERYOBJECTI64VNV,
    CALL_GLMULTICASTGETQUERYOBJECTIVNV,
    CALL_GLMULTICASTGETQUERYOBJECTUI64VNV,
    CALL_GLMULTICASTGETQUERYOBJECTUIVNV,
    CALL_GLMULTICASTSCISSORARRAYVNVX,
    CALL_GLMULTICASTVIEWPORTARRAYVNVX,
    CALL_GLMULTICASTVIEWPORTPOSITIONWSCALENVX,
    CALL_GLMULTICASTWAITSYNCNV,
    CALL_GLNAMEDBUFFERATTACHMEMORYNV,
    CALL_GLNAMEDBUFFERDATA,
    CALL_GLNAMEDBUFFERDATAEXT,
    CALL_GLNAMEDBUFFERPAGECOMMITMENTARB,
    CALL_GLNAMEDBUFFERPAGECOMMITMENTEXT,
    CALL_GLNAMEDBUFFERSTORAGE,
    CALL_GLNAMEDBUFFERSTORAGEEXT,
    CALL_GLNAMEDBUFFERSTORAGEEXTERNALEXT,
    CALL_GLNAMEDBUFFERSTORAGEMEMEXT,
    CALL_GLNAMEDBUFFERSUBDATA,
    CALL_GLNAMEDBUFFERSUBDATAEXT,
    CALL_GLNAMEDCOPYBUFFERSUBDATAEXT,
    CALL_GLNAMEDFRAMEBUFFERDRAWBUFFER,
    CALL_GLNAMEDFRAMEBUFFERDRAWBUFFERS,
    CALL_GLNAMEDFRAMEBUFFERPARAMETERI,
    CALL_GLNAMEDFRAMEBUFFERPARAMETERIEXT,
    CALL_GLNAMEDFRAMEBUFFERREADBUFFER,
    CALL_GLNAMEDFRAMEBUFFERRENDERBUFFER,
    CALL_GLNAMEDFRAMEBUFFERRENDERBUFFEREXT,
    CALL_GLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVARB,
    CALL_GLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVNV,
    CALL_GLNAMEDFRAMEBUFFERSAMPLEPOSITIONSFVAMD,
    CALL_GLNAMEDFRAMEBUFFERTEXTURE,
    CALL_GLNAMEDFRAMEBUFFERTEXTURE1DEXT,
    CALL_GLNAMEDFRAMEBUFFERTEXTURE2DEXT,
    CALL_GLNAMEDFRAMEBUFFERTEXTURE3DEXT,
    CALL_GLNAMEDFRAMEBUFFERTEXTUREEXT,
    CALL_GLNAMEDFRAMEBUFFERTEXTUREFACEEXT,
    CALL_GLNAMEDFRAMEBUFFERTEXTURELAYER,
    CALL_GLNAMEDFRAMEBUFFERTEXTURELAYEREXT,
    CALL_GLNAMEDPROGRAMLOCALPARAMETER4DEXT,
    CALL_GLNAMEDPROGRAMLOCALPARAMETER4DVEXT,
    CALL_GLNAMEDPROGRAMLOCALPARAMETER4FEXT,
    CALL_GLNAMEDPROGRAMLOCALPARAMETER4FVEXT,
    CALL_GLNAMEDPROGRAMLOCALPARAMETERI4IEXT,
    CALL_GLNAMEDPROGRAMLOCALPARAMETERI4IVEXT,
    CALL_GLNAMEDPROGRAMLOCALPARAMETERI4UIEXT,
    CALL_GLNAMEDPROGRAMLOCALPARAMETERI4UIVEXT,
    CALL_GLNAMEDPROGRAMLOCALPARAMETERS4FVEXT,
    CALL_GLNAMEDPROGRAMLOCALPARAMETERSI4IVEXT,
    CALL_GLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXT,
    CALL_GLNAMEDPROGRAMSTRINGEXT,
    CALL_GLNAMEDRENDERBUFFERSTORAGE,
    CALL_GLNAMEDRENDERBUFFERSTORAGEEXT,
    CALL_GLNAMEDRENDERBUFFERSTORAGEMULTISAMPLE,
    CALL_GLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEADVANCEDAMD,
    CALL_GLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXT,
    CALL_GLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXT,
    CALL_GLNAMEDSTRINGARB,
    CALL_GLNEWBUFFERREGION,
    CALL_GLNEWOBJECTBUFFERATI,
    CALL_GLNORMAL3FVERTEX3FSUN,
    CALL_GLNORMAL3FVERTEX3FVSUN,
    CALL_GLNORMAL3HNV,
    CALL_GLNORMAL3HVNV,
    CALL_GLNORMAL3XOES,
    CALL_GLNORMAL3XVOES,
    CALL_GLNORMALFORMATNV,
    CALL_GLNORMALP3UI,
    CALL_GLNORMALP3UIV,
    CALL_GLNORMALPOINTEREXT,
    CALL_GLNORMALPOINTERLISTIBM,
    CALL_GLNORMALPOINTERVINTEL,
    CALL_GLNORMALSTREAM3BATI,
    CALL_GLNORMALSTREAM3BVATI,
    CALL_GLNORMALSTREAM3DATI,
    CALL_GLNORMALSTREAM3DVATI,
    CALL_GLNORMALSTREAM3FATI,
    CALL_GLNORMALSTREAM3FVATI,
    CALL_GLNORMALSTREAM3IATI,
    CALL_GLNORMALSTREAM3IVATI,
    CALL_GLNORMALSTREAM3SATI,
    CALL_GLNORMALSTREAM3SVATI,
    CALL_GLOBJECTLABEL,
    CALL_GLOBJECTPTRLABEL,
    CALL_GLOBJECTPURGEABLEAPPLE,
    CALL_GLOBJECTUNPURGEABLEAPPLE,
    CALL_GLORTHOFOES,
    CALL_GLORTHOXOES,
    CALL_GLPNTRIANGLESFATI,
    CALL_GLPNTRIANGLESIATI,
    CALL_GLPASSTEXCOORDATI,
    CALL_GLPASSTHROUGHXOES,
    CALL_GLPATCHPARAMETERFV,
    CALL_GLPATCHPARAMETERI,
    CALL_GLPATHCOLORGENNV,
    CALL_GLPATHCOMMANDSNV,
    CALL_GLPATHCOORDSNV,
    CALL_GLPATHCOVERDEPTHFUNCNV,
    CALL_GLPATHDASHARRAYNV,
    CALL_GLPATHFOGGENNV,
    CALL_GLPATHGLYPHINDEXARRAYNV,
    CALL_GLPATHGLYPHINDEXRANGENV,
    CALL_GLPATHGLYPHRANGENV,
    CALL_GLPATHGLYPHSNV,
    CALL_GLPATHMEMORYGLYPHINDEXARRAYNV,
    CALL_GLPATHPARAMETERFNV,
    CALL_GLPATHPARAMETERFVNV,
    CALL_GLPATHPARAMETERINV,
    CALL_GLPATHPARAMETERIVNV,
    CALL_GLPATHSTENCILDEPTHOFFSETNV,
    CALL_GLPATHSTENCILFUNCNV,
    CALL_GLPATHSTRINGNV,
    CALL_GLPATHSUBCOMMANDSNV,
    CALL_GLPATHSUBCOORDSNV,
    CALL_GLPATHTEXGENNV,
    CALL_GLPAUSETRANSFORMFEEDBACK,
    CALL_GLPAUSETRANSFORMFEEDBACKNV,
    CALL_GLPIXELDATARANGENV,
    CALL_GLPIXELMAPX,
    CALL_GLPIXELSTOREX,
    CALL_GLPIXELTEXGENPARAMETERFSGIS,
    CALL_GLPIXELTEXGENPARAMETERFVSGIS,
    CALL_GLPIXELTEXGENPARAMETERISGIS,
    CALL_GLPIXELTEXGENPARAMETERIVSGIS,
    CALL_GLPIXELTEXGENSGIX,
    CALL_GLPIXELTRANSFERXOES,
    CALL_GLPIXELTRANSFORMPARAMETERFEXT,
    CALL_GLPIXELTRANSFORMPARAMETERFVEXT,
    CALL_GLPIXELTRANSFORMPARAMETERIEXT,
    CALL_GLPIXELTRANSFORMPARAMETERIVEXT,
    CALL_GLPIXELZOOMXOES,
    CALL_GLPOINTALONGPATHNV,
    CALL_GLPOINTPARAMETERF,
    CALL_GLPOINTPARAMETERFARB,
    CALL_GLPOINTPARAMETERFEXT,
    CALL_GLPOINTPARAMETERFSGIS,
    CALL_GLPOINTPARAMETERFV,
    CALL_GLPOINTPARAMETERFVARB,
    CALL_GLPOINTPARAMETERFVEXT,
    CALL_GLPOINTPARAMETERFVSGIS,
    CALL_GLPOINTPARAMETERI,
    CALL_GLPOINTPARAMETERINV,
    CALL_GLPOINTPARAMETERIV,
    CALL_GLPOINTPARAMETERIVNV,
    CALL_GLPOINTPARAMETERXVOES,
    CALL_GLPOINTSIZEXOES,
    CALL_GLPOLLASYNCSGIX,
    CALL_GLPOLLINSTRUMENTSSGIX,
    CALL_GLPOLYGONOFFSETCLAMP,
    CALL_GLPOLYGONOFFSETCLAMPEXT,
    CALL_GLPOLYGONOFFSETEXT,
    CALL_GLPOLYGONOFFSETXOES,
    CALL_GLPOPDEBUGGROUP,
    CALL_GLPOPGROUPMARKEREXT,
    CALL_GLPRESENTFRAMEDUALFILLNV,
    CALL_GLPRESENTFRAMEKEYEDNV,
    CALL_GLPRIMITIVEBOUNDINGBOXARB,
    CALL_GLPRIMITIVERESTARTINDEX,
    CALL_GLPRIMITIVERESTARTINDEXNV,
    CALL_GLPRIMITIVERESTARTNV,
    CALL_GLPRIORITIZETEXTURESEXT,
    CALL_GLPRIORITIZETEXTURESXOES,
    CALL_GLPROGRAMBINARY,
    CALL_GLPROGRAMBUFFERPARAMETERSIIVNV,
    CALL_GLPROGRAMBUFFERPARAMETERSIUIVNV,
    CALL_GLPROGRAMBUFFERPARAMETERSFVNV,
    CALL_GLPROGRAMENVPARAMETER4DARB,
    CALL_GLPROGRAMENVPARAMETER4DVARB,
    CALL_GLPROGRAMENVPARAMETER4FARB,
    CALL_GLPROGRAMENVPARAMETER4FVARB,
    CALL_GLPROGRAMENVPARAMETERI4INV,
    CALL_GLPROGRAMENVPARAMETERI4IVNV,
    CALL_GLPROGRAMENVPARAMETERI4UINV,
    CALL_GLPROGRAMENVPARAMETERI4UIVNV,
    CALL_GLPROGRAMENVPARAMETERS4FVEXT,
    CALL_GLPROGRAMENVPARAMETERSI4IVNV,
    CALL_GLPROGRAMENVPARAMETERSI4UIVNV,
    CALL_GLPROGRAMLOCALPARAMETER4DARB,
    CALL_GLPROGRAMLOCALPARAMETER4DVARB,
    CALL_GLPROGRAMLOCALPARAMETER4FARB,
    CALL_GLPROGRAMLOCALPARAMETER4FVARB,
    CALL_GLPROGRAMLOCALPARAMETERI4INV,
    CALL_GLPROGRAMLOCALPARAMETERI4IVNV,
    CALL_GLPROGRAMLOCALPARAMETERI4UINV,
    CALL_GLPROGRAMLOCALPARAMETERI4UIVNV,
    CALL_GLPROGRAMLOCALPARAMETERS4FVEXT,
    CALL_GLPROGRAMLOCALPARAMETERSI4IVNV,
    CALL_GLPROGRAMLOCALPARAMETERSI4UIVNV,
    CALL_GLPROGRAMNAMEDPARAMETER4DNV,
    CALL_GLPROGRAMNAMEDPARAMETER4DVNV,
    CALL_GLPROGRAMNAMEDPARAMETER4FNV,
    CALL_GLPROGRAMNAMEDPARAMETER4FVNV,
    CALL_GLPROGRAMPARAMETER4DNV,
    CALL_GLPROGRAMPARAMETER4DVNV,
    CALL_GLPROGRAMPARAMETER4FNV,
    CALL_GLPROGRAMPARAMETER4FVNV,
    CALL_GLPROGRAMPARAMETERI,
    CALL_GLPROGRAMPARAMETERIARB,
    CALL_GLPROGRAMPARAMETERIEXT,
    CALL_GLPROGRAMPARAMETERS4DVNV,
    CALL_GLPROGRAMPARAMETERS4FVNV,
    CALL_GLPROGRAMPATHFRAGMENTINPUTGENNV,
    CALL_GLPROGRAMSTRINGARB,
    CALL_GLPROGRAMSUBROUTINEPARAMETERSUIVNV,
    CALL_GLPROGRAMUNIFORM1D,
    CALL_GLPROGRAMUNIFORM1DEXT,
    CALL_GLPROGRAMUNIFORM1DV,
    CALL_GLPROGRAMUNIFORM1DVEXT,
    CALL_GLPROGRAMUNIFORM1F,
    CALL_GLPROGRAMUNIFORM1FEXT,
    CALL_GLPROGRAMUNIFORM1FV,
    CALL_GLPROGRAMUNIFORM1FVEXT,
    CALL_GLPROGRAMUNIFORM1I,
    CALL_GLPROGRAMUNIFORM1I64ARB,
    CALL_GLPROGRAMUNIFORM1I64NV,
    CALL_GLPROGRAMUNIFORM1I64VARB,
    CALL_GLPROGRAMUNIFORM1I64VNV,
    CALL_GLPROGRAMUNIFORM1IEXT,
    CALL_GLPROGRAMUNIFORM1IV,
    CALL_GLPROGRAMUNIFORM1IVEXT,
    CALL_GLPROGRAMUNIFORM1UI,
    CALL_GLPROGRAMUNIFORM1UI64ARB,
    CALL_GLPROGRAMUNIFORM1UI64NV,
    CALL_GLPROGRAMUNIFORM1UI64VARB,
    CALL_GLPROGRAMUNIFORM1UI64VNV,
    CALL_GLPROGRAMUNIFORM1UIEXT,
    CALL_GLPROGRAMUNIFORM1UIV,
    CALL_GLPROGRAMUNIFORM1UIVEXT,
    CALL_GLPROGRAMUNIFORM2D,
    CALL_GLPROGRAMUNIFORM2DEXT,
    CALL_GLPROGRAMUNIFORM2DV,
    CALL_GLPROGRAMUNIFORM2DVEXT,
    CALL_GLPROGRAMUNIFORM2F,
    CALL_GLPROGRAMUNIFORM2FEXT,
    CALL_GLPROGRAMUNIFORM2FV,
    CALL_GLPROGRAMUNIFORM2FVEXT,
    CALL_GLPROGRAMUNIFORM2I,
    CALL_GLPROGRAMUNIFORM2I64ARB,
    CALL_GLPROGRAMUNIFORM2I64NV,
    CALL_GLPROGRAMUNIFORM2I64VARB,
    CALL_GLPROGRAMUNIFORM2I64VNV,
    CALL_GLPROGRAMUNIFORM2IEXT,
    CALL_GLPROGRAMUNIFORM2IV,
    CALL_GLPROGRAMUNIFORM2IVEXT,
    CALL_GLPROGRAMUNIFORM2UI,
    CALL_GLPROGRAMUNIFORM2UI64ARB,
    CALL_GLPROGRAMUNIFORM2UI64NV,
    CALL_GLPROGRAMUNIFORM2UI64VARB,
    CALL_GLPROGRAMUNIFORM2UI64VNV,
    CALL_GLPROGRAMUNIFORM2UIEXT,
    CALL_GLPROGRAMUNIFORM2UIV,
    CALL_GLPROGRAMUNIFORM2UIVEXT,
    CALL_GLPROGRAMUNIFORM3D,
    CALL_GLPROGRAMUNIFORM3DEXT,
    CALL_GLPROGRAMUNIFORM3DV,
    CALL_GLPROGRAMUNIFORM3DVEXT,
    CALL_GLPROGRAMUNIFORM3F,
    CALL_GLPROGRAMUNIFORM3FEXT,
    CALL_GLPROGRAMUNIFORM3FV,
    CALL_GLPROGRAMUNIFORM3FVEXT,
    CALL_GLPROGRAMUNIFORM3I,
    CALL_GLPROGRAMUNIFORM3I64ARB,
    CALL_GLPROGRAMUNIFORM3I64NV,
    CALL_GLPROGRAMUNIFORM3I64VARB,
    CALL_GLPROGRAMUNIFORM3I64VNV,
    CALL_GLPROGRAMUNIFORM3IEXT,
    CALL_GLPROGRAMUNIFORM3IV,
    CALL_GLPROGRAMUNIFORM3IVEXT,
    CALL_GLPROGRAMUNIFORM3UI,
    CALL_GLPROGRAMUNIFORM3UI64ARB,
    CALL_GLPROGRAMUNIFORM3UI64NV,
    CALL_GLPROGRAMUNIFORM3UI64VARB,
    CALL_GLPROGRAMUNIFORM3UI64VNV,
    CALL_GLPROGRAMUNIFORM3UIEXT,
    CALL_GLPROGRAMUNIFORM3UIV,
    CALL_GLPROGRAMUNIFORM3UIVEXT,
    CALL_GLPROGRAMUNIFORM4D,
    CALL_GLPROGRAMUNIFORM4DEXT,
    CALL_GLPROGRAMUNIFORM4DV,
    CALL_GLPROGRAMUNIFORM4DVEXT,
    CALL_GLPROGRAMUNIFORM4F,
    CALL_GLPROGRAMUNIFORM4FEXT,
    CALL_GLPROGRAMUNIFORM4FV,
    CALL_GLPROGRAMUNIFORM4FVEXT,
    CALL_GLPROGRAMUNIFORM4I,
    CALL_GLPROGRAMUNIFORM4I64ARB,
    CALL_GLPROGRAMUNIFORM4I64NV,
    CALL_GLPROGRAMUNIFORM4I64VARB,
    CALL_GLPROGRAMUNIFORM4I64VNV,
    CALL_GLPROGRAMUNIFORM4IEXT,
    CALL_GLPROGRAMUNIFORM4IV,
    CALL_GLPROGRAMUNIFORM4IVEXT,
    CALL_GLPROGRAMUNIFORM4UI,
    CALL_GLPROGRAMUNIFORM4UI64ARB,
    CALL_GLPROGRAMUNIFORM4UI64NV,
    CALL_GLPROGRAMUNIFORM4UI64VARB,
    CALL_GLPROGRAMUNIFORM4UI64VNV,
    CALL_GLPROGRAMUNIFORM4UIEXT,
    CALL_GLPROGRAMUNIFORM4UIV,
    CALL_GLPROGRAMUNIFORM4UIVEXT,
    CALL_GLPROGRAMUNIFORMHANDLEUI64ARB,
    CALL_GLPROGRAMUNIFORMHANDLEUI64NV,
    CALL_GLPROGRAMUNIFORMHANDLEUI64VARB,
    CALL_GLPROGRAMUNIFORMHANDLEUI64VNV,
    CALL_GLPROGRAMUNIFORMMATRIX2DV,
    CALL_GLPROGRAMUNIFORMMATRIX2DVEXT,
    CALL_GLPROGRAMUNIFORMMATRIX2FV,
    CALL_GLPROGRAMUNIFORMMATRIX2FVEXT,
    CALL_GLPROGRAMUNIFORMMATRIX2X3DV,
    CALL_GLPROGRAMUNIFORMMATRIX2X3DVEXT,
    CALL_GLPROGRAMUNIFORMMATRIX2X3FV,
    CALL_GLPROGRAMUNIFORMMATRIX2X3FVEXT,
    CALL_GLPROGRAMUNIFORMMATRIX2X4DV,
    CALL_GLPROGRAMUNIFORMMATRIX2X4DVEXT,
    CALL_GLPROGRAMUNIFORMMATRIX2X4FV,
    CALL_GLPROGRAMUNIFORMMATRIX2X4FVEXT,
    CALL_GLPROGRAMUNIFORMMATRIX3DV,
    CALL_GLPROGRAMUNIFORMMATRIX3DVEXT,
    CALL_GLPROGRAMUNIFORMMATRIX3FV,
    CALL_GLPROGRAMUNIFORMMATRIX3FVEXT,
    CALL_GLPROGRAMUNIFORMMATRIX3X2DV,
    CALL_GLPROGRAMUNIFORMMATRIX3X2DVEXT,
    CALL_GLPROGRAMUNIFORMMATRIX3X2FV,
    CALL_GLPROGRAMUNIFORMMATRIX3X2FVEXT,
    CALL_GLPROGRAMUNIFORMMATRIX3X4DV,
    CALL_GLPROGRAMUNIFORMMATRIX3X4DVEXT,
    CALL_GLPROGRAMUNIFORMMATRIX3X4FV,
    CALL_GLPROGRAMUNIFORMMATRIX3X4FVEXT,
    CALL_GLPROGRAMUNIFORMMATRIX4DV,
    CALL_GLPROGRAMUNIFORMMATRIX4DVEXT,
    CALL_GLPROGRAMUNIFORMMATRIX4FV,
    CALL_GLPROGRAMUNIFORMMATRIX4FVEXT,
    CALL_GLPROGRAMUNIFORMMATRIX4X2DV,
    CALL_GLPROGRAMUNIFORMMATRIX4X2DVEXT,
    CALL_GLPROGRAMUNIFORMMATRIX4X2FV,
    CALL_GLPROGRAMUNIFORMMATRIX4X2FVEXT,
    CALL_GLPROGRAMUNIFORMMATRIX4X3DV,
    CALL_GLPROGRAMUNIFORMMATRIX4X3DVEXT,
    CALL_GLPROGRAMUNIFORMMATRIX4X3FV,
    CALL_GLPROGRAMUNIFORMMATRIX4X3FVEXT,
    CALL_GLPROGRAMUNIFORMUI64NV,
    CALL_GLPROGRAMUNIFORMUI64VNV,
    CALL_GLPROGRAMVERTEXLIMITNV,
    CALL_GLPROVOKINGVERTEX,
    CALL_GLPROVOKINGVERTEXEXT,
    CALL_GLPUSHCLIENTATTRIBDEFAULTEXT,
    CALL_GLPUSHDEBUGGROUP,
    CALL_GLPUSHGROUPMARKEREXT,
    CALL_GLQUERYCOUNTER,
    CALL_GLQUERYMATRIXXOES,
    CALL_GLQUERYOBJECTPARAMETERUIAMD,
    CALL_GLQUERYRESOURCENV,
    CALL_GLQUERYRESOURCETAGNV,
    CALL_GLRASTERPOS2XOES,
    CALL_GLRASTERPOS2XVOES,
    CALL_GLRASTERPOS3XOES,
    CALL_GLRASTERPOS3XVOES,
    CALL_GLRASTERPOS4XOES,
    CALL_GLRASTERPOS4XVOES,
    CALL_GLRASTERSAMPLESEXT,
    CALL_GLREADBUFFERREGION,
    CALL_GLREADINSTRUMENTSSGIX,
    CALL_GLREADNPIXELS,
    CALL_GLREADNPIXELSARB,
    CALL_GLRECTXOES,
    CALL_GLRECTXVOES,
    CALL_GLREFERENCEPLANESGIX,
    CALL_GLRELEASEKEYEDMUTEXWIN32EXT,
    CALL_GLRELEASESHADERCOMPILER,
    CALL_GLRENDERGPUMASKNV,
    CALL_GLRENDERBUFFERSTORAGE,
    CALL_GLRENDERBUFFERSTORAGEEXT,
    CALL_GLRENDERBUFFERSTORAGEMULTISAMPLE,
    CALL_GLRENDERBUFFERSTORAGEMULTISAMPLEADVANCEDAMD,
    CALL_GLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENV,
    CALL_GLRENDERBUFFERSTORAGEMULTISAMPLEEXT,
    CALL_GLREPLACEMENTCODEPOINTERSUN,
    CALL_GLREPLACEMENTCODEUBSUN,
    CALL_GLREPLACEMENTCODEUBVSUN,
    CALL_GLREPLACEMENTCODEUICOLOR3FVERTEX3FSUN,
    CALL_GLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUN,
    CALL_GLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUN,
    CALL_GLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUN,
    CALL_GLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUN,
    CALL_GLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUN,
    CALL_GLREPLACEMENTCODEUINORMAL3FVERTEX3FSUN,
    CALL_GLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUN,
    CALL_GLREPLACEMENTCODEUISUN,
    CALL_GLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUN,
    CALL_GLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUN,
    CALL_GLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUN,
    CALL_GLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUN,
    CALL_GLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUN,
    CALL_GLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUN,
    CALL_GLREPLACEMENTCODEUIVERTEX3FSUN,
    CALL_GLREPLACEMENTCODEUIVERTEX3FVSUN,
    CALL_GLREPLACEMENTCODEUIVSUN,
    CALL_GLREPLACEMENTCODEUSSUN,
    CALL_GLREPLACEMENTCODEUSVSUN,
    CALL_GLREQUESTRESIDENTPROGRAMSNV,
    CALL_GLRESETHISTOGRAM,
    CALL_GLRESETHISTOGRAMEXT,
    CALL_GLRESETMEMORYOBJECTPARAMETERNV,
    CALL_GLRESETMINMAX,
    CALL_GLRESETMINMAXEXT,
    CALL_GLRESIZEBUFFERSMESA,
    CALL_GLRESOLVEDEPTHVALUESNV,
    CALL_GLRESUMETRANSFORMFEEDBACK,
    CALL_GLRESUMETRANSFORMFEEDBACKNV,
    CALL_GLROTATEXOES,
    CALL_GLSAMPLECOVERAGE,
    CALL_GLSAMPLECOVERAGEARB,
    CALL_GLSAMPLEMAPATI,
    CALL_GLSAMPLEMASKEXT,
    CALL_GLSAMPLEMASKINDEXEDNV,
    CALL_GLSAMPLEMASKSGIS,
    CALL_GLSAMPLEMASKI,
    CALL_GLSAMPLEPATTERNEXT,
    CALL_GLSAMPLEPATTERNSGIS,
    CALL_GLSAMPLERPARAMETERIIV,
    CALL_GLSAMPLERPARAMETERIUIV,
    CALL_GLSAMPLERPARAMETERF,
    CALL_GLSAMPLERPARAMETERFV,
    CALL_GLSAMPLERPARAMETERI,
    CALL_GLSAMPLERPARAMETERIV,
    CALL_GLSCALEXOES,
    CALL_GLSCISSORARRAYV,
    CALL_GLSCISSOREXCLUSIVEARRAYVNV,
    CALL_GLSCISSOREXCLUSIVENV,
    CALL_GLSCISSORINDEXED,
    CALL_GLSCISSORINDEXEDV,
    CALL_GLSECONDARYCOLOR3B,
    CALL_GLSECONDARYCOLOR3BEXT,
    CALL_GLSECONDARYCOLOR3BV,
    CALL_GLSECONDARYCOLOR3BVEXT,
    CALL_GLSECONDARYCOLOR3D,
    CALL_GLSECONDARYCOLOR3DEXT,
    CALL_GLSECONDARYCOLOR3DV,
    CALL_GLSECONDARYCOLOR3DVEXT,
    CALL_GLSECONDARYCOLOR3F,
    CALL_GLSECONDARYCOLOR3FEXT,
    CALL_GLSECONDARYCOLOR3FV,
    CALL_GLSECONDARYCOLOR3FVEXT,
    CALL_GLSECONDARYCOLOR3HNV,
    CALL_GLSECONDARYCOLOR3HVNV,
    CALL_GLSECONDARYCOLOR3I,
    CALL_GLSECONDARYCOLOR3IEXT,
    CALL_GLSECONDARYCOLOR3IV,
    CALL_GLSECONDARYCOLOR3IVEXT,
    CALL_GLSECONDARYCOLOR3S,
    CALL_GLSECONDARYCOLOR3SEXT,
    CALL_GLSECONDARYCOLOR3SV,
    CALL_GLSECONDARYCOLOR3SVEXT,
    CALL_GLSECONDARYCOLOR3UB,
    CALL_GLSECONDARYCOLOR3UBEXT,
    CALL_GLSECONDARYCOLOR3UBV,
    CALL_GLSECONDARYCOLOR3UBVEXT,
    CALL_GLSECONDARYCOLOR3UI,
    CALL_GLSECONDARYCOLOR3UIEXT,
    CALL_GLSECONDARYCOLOR3UIV,
    CALL_GLSECONDARYCOLOR3UIVEXT,
    CALL_GLSECONDARYCOLOR3US,
    CALL_GLSECONDARYCOLOR3USEXT,
    CALL_GLSECONDARYCOLOR3USV,
    CALL_GLSECONDARYCOLOR3USVEXT,
    CALL_GLSECONDARYCOLORFORMATNV,
    CALL_GLSECONDARYCOLORP3UI,
    CALL_GLSECONDARYCOLORP3UIV,
    CALL_GLSECONDARYCOLORPOINTER,
    CALL_GLSECONDARYCOLORPOINTEREXT,
    CALL_GLSECONDARYCOLORPOINTERLISTIBM,
    CALL_GLSELECTPERFMONITORCOUNTERSAMD,
    CALL_GLSELECTTEXTURECOORDSETSGIS,
    CALL_GLSELECTTEXTURESGIS,
    CALL_GLSEMAPHOREPARAMETERUI64VEXT,
    CALL_GLSEPARABLEFILTER2D,
    CALL_GLSEPARABLEFILTER2DEXT,
    CALL_GLSETFENCEAPPLE,
    CALL_GLSETFENCENV,
    CALL_GLSETFRAGMENTSHADERCONSTANTATI,
    CALL_GLSETINVARIANTEXT,
    CALL_GLSETLOCALCONSTANTEXT,
    CALL_GLSETMULTISAMPLEFVAMD,
    CALL_GLSHADERBINARY,
    CALL_GLSHADEROP1EXT,
    CALL_GLSHADEROP2EXT,
    CALL_GLSHADEROP3EXT,
    CALL_GLSHADERSOURCE,
    CALL_GLSHADERSOURCEARB,
    CALL_GLSHADERSTORAGEBLOCKBINDING,
    CALL_GLSHADINGRATEIMAGEBARRIERNV,
    CALL_GLSHADINGRATEIMAGEPALETTENV,
    CALL_GLSHADINGRATESAMPLEORDERCUSTOMNV,
    CALL_GLSHADINGRATESAMPLEORDERNV,
    CALL_GLSHARPENTEXFUNCSGIS,
    CALL_GLSIGNALSEMAPHOREEXT,
    CALL_GLSIGNALSEMAPHOREUI64NVX,
    CALL_GLSIGNALVKFENCENV,
    CALL_GLSIGNALVKSEMAPHORENV,
    CALL_GLSPECIALIZESHADER,
    CALL_GLSPECIALIZESHADERARB,
    CALL_GLSPRITEPARAMETERFSGIX,
    CALL_GLSPRITEPARAMETERFVSGIX,
    CALL_GLSPRITEPARAMETERISGIX,
    CALL_GLSPRITEPARAMETERIVSGIX,
    CALL_GLSTARTINSTRUMENTSSGIX,
    CALL_GLSTATECAPTURENV,
    CALL_GLSTENCILCLEARTAGEXT,
    CALL_GLSTENCILFILLPATHINSTANCEDNV,
    CALL_GLSTENCILFILLPATHNV,
    CALL_GLSTENCILFUNCSEPARATE,
    CALL_GLSTENCILFUNCSEPARATEATI,
    CALL_GLSTENCILMASKSEPARATE,
    CALL_GLSTENCILOPSEPARATE,
    CALL_GLSTENCILOPSEPARATEATI,
    CALL_GLSTENCILOPVALUEAMD,
    CALL_GLSTENCILSTROKEPATHINSTANCEDNV,
    CALL_GLSTENCILSTROKEPATHNV,
    CALL_GLSTENCILTHENCOVERFILLPATHINSTANCEDNV,
    CALL_GLSTENCILTHENCOVERFILLPATHNV,
    CALL_GLSTENCILTHENCOVERSTROKEPATHINSTANCEDNV,
    CALL_GLSTENCILTHENCOVERSTROKEPATHNV,
    CALL_GLSTOPINSTRUMENTSSGIX,
    CALL_GLSTRINGMARKERGREMEDY,
    CALL_GLSUBPIXELPRECISIONBIASNV,
    CALL_GLSWIZZLEEXT,
    CALL_GLSYNCTEXTUREINTEL,
    CALL_GLTAGSAMPLEBUFFERSGIX,
    CALL_GLTANGENT3BEXT,
    CALL_GLTANGENT3BVEXT,
    CALL_GLTANGENT3DEXT,
    CALL_GLTANGENT3DVEXT,
    CALL_GLTANGENT3FEXT,
    CALL_GLTANGENT3FVEXT,
    CALL_GLTANGENT3IEXT,
    CALL_GLTANGENT3IVEXT,
    CALL_GLTANGENT3SEXT,
    CALL_GLTANGENT3SVEXT,
    CALL_GLTANGENTPOINTEREXT,
    CALL_GLTBUFFERMASK3DFX,
    CALL_GLTESSELLATIONFACTORAMD,
    CALL_GLTESSELLATIONMODEAMD,
    CALL_GLTESTFENCEAPPLE,
    CALL_GLTESTFENCENV,
    CALL_GLTESTOBJECTAPPLE,
    CALL_GLTEXATTACHMEMORYNV,
    CALL_GLTEXBUFFER,
    CALL_GLTEXBUFFERARB,
    CALL_GLTEXBUFFEREXT,
    CALL_GLTEXBUFFERRANGE,
    CALL_GLTEXBUMPPARAMETERFVATI,
    CALL_GLTEXBUMPPARAMETERIVATI,
    CALL_GLTEXCOORD1BOES,
    CALL_GLTEXCOORD1BVOES,
    CALL_GLTEXCOORD1HNV,
    CALL_GLTEXCOORD1HVNV,
    CALL_GLTEXCOORD1XOES,
    CALL_GLTEXCOORD1XVOES,
    CALL_GLTEXCOORD2BOES,
    CALL_GLTEXCOORD2BVOES,
    CALL_GLTEXCOORD2FCOLOR3FVERTEX3FSUN,
    CALL_GLTEXCOORD2FCOLOR3FVERTEX3FVSUN,
    CALL_GLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUN,
    CALL_GLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUN,
    CALL_GLTEXCOORD2FCOLOR4UBVERTEX3FSUN,
    CALL_GLTEXCOORD2FCOLOR4UBVERTEX3FVSUN,
    CALL_GLTEXCOORD2FNORMAL3FVERTEX3FSUN,
    CALL_GLTEXCOORD2FNORMAL3FVERTEX3FVSUN,
    CALL_GLTEXCOORD2FVERTEX3FSUN,
    CALL_GLTEXCOORD2FVERTEX3FVSUN,
    CALL_GLTEXCOORD2HNV,
    CALL_GLTEXCOORD2HVNV,
    CALL_GLTEXCOORD2XOES,
    CALL_GLTEXCOORD2XVOES,
    CALL_GLTEXCOORD3BOES,
    CALL_GLTEXCOORD3BVOES,
    CALL_GLTEXCOORD3HNV,
    CALL_GLTEXCOORD3HVNV,
    CALL_GLTEXCOORD3XOES,
    CALL_GLTEXCOORD3XVOES,
    CALL_GLTEXCOORD4BOES,
    CALL_GLTEXCOORD4BVOES,
    CALL_GLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUN,
    CALL_GLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUN,
    CALL_GLTEXCOORD4FVERTEX4FSUN,
    CALL_GLTEXCOORD4FVERTEX4FVSUN,
    CALL_GLTEXCOORD4HNV,
    CALL_GLTEXCOORD4HVNV,
    CALL_GLTEXCOORD4XOES,
    CALL_GLTEXCOORD4XVOES,
    CALL_GLTEXCOORDFORMATNV,
    CALL_GLTEXCOORDP1UI,
    CALL_GLTEXCOORDP1UIV,
    CALL_GLTEXCOORDP2UI,
    CALL_GLTEXCOORDP2UIV,
    CALL_GLTEXCOORDP3UI,
    CALL_GLTEXCOORDP3UIV,
    CALL_GLTEXCOORDP4UI,
    CALL_GLTEXCOORDP4UIV,
    CALL_GLTEXCOORDPOINTEREXT,
    CALL_GLTEXCOORDPOINTERLISTIBM,
    CALL_GLTEXCOORDPOINTERVINTEL,
    CALL_GLTEXENVXOES,
    CALL_GLTEXENVXVOES,
    CALL_GLTEXFILTERFUNCSGIS,
    CALL_GLTEXGENXOES,
    CALL_GLTEXGENXVOES,
    CALL_GLTEXIMAGE2DMULTISAMPLE,
    CALL_GLTEXIMAGE2DMULTISAMPLECOVERAGENV,
    CALL_GLTEXIMAGE3D,
    CALL_GLTEXIMAGE3DEXT,
    CALL_GLTEXIMAGE3DMULTISAMPLE,
    CALL_GLTEXIMAGE3DMULTISAMPLECOVERAGENV,
    CALL_GLTEXIMAGE4DSGIS,
    CALL_GLTEXPAGECOMMITMENTARB,
    CALL_GLTEXPARAMETERIIV,
    CALL_GLTEXPARAMETERIIVEXT,
    CALL_GLTEXPARAMETERIUIV,
    CALL_GLTEXPARAMETERIUIVEXT,
    CALL_GLTEXPARAMETERXOES,
    CALL_GLTEXPARAMETERXVOES,
    CALL_GLTEXRENDERBUFFERNV,
    CALL_GLTEXSTORAGE1D,
    CALL_GLTEXSTORAGE2D,
    CALL_GLTEXSTORAGE2DMULTISAMPLE,
    CALL_GLTEXSTORAGE3D,
    CALL_GLTEXSTORAGE3DMULTISAMPLE,
    CALL_GLTEXSTORAGEMEM1DEXT,
    CALL_GLTEXSTORAGEMEM2DEXT,
    CALL_GLTEXSTORAGEMEM2DMULTISAMPLEEXT,
    CALL_GLTEXSTORAGEMEM3DEXT,
    CALL_GLTEXSTORAGEMEM3DMULTISAMPLEEXT,
    CALL_GLTEXSTORAGESPARSEAMD,
    CALL_GLTEXSUBIMAGE1DEXT,
    CALL_GLTEXSUBIMAGE2DEXT,
    CALL_GLTEXSUBIMAGE3D,
    CALL_GLTEXSUBIMAGE3DEXT,
    CALL_GLTEXSUBIMAGE4DSGIS,
    CALL_GLTEXTUREATTACHMEMORYNV,
    CALL_GLTEXTUREBARRIER,
    CALL_GLTEXTUREBARRIERNV,
    CALL_GLTEXTUREBUFFER,
    CALL_GLTEXTUREBUFFEREXT,
    CALL_GLTEXTUREBUFFERRANGE,
    CALL_GLTEXTUREBUFFERRANGEEXT,
    CALL_GLTEXTURECOLORMASKSGIS,
    CALL_GLTEXTUREIMAGE1DEXT,
    CALL_GLTEXTUREIMAGE2DEXT,
    CALL_GLTEXTUREIMAGE2DMULTISAMPLECOVERAGENV,
    CALL_GLTEXTUREIMAGE2DMULTISAMPLENV,
    CALL_GLTEXTUREIMAGE3DEXT,
    CALL_GLTEXTUREIMAGE3DMULTISAMPLECOVERAGENV,
    CALL_GLTEXTUREIMAGE3DMULTISAMPLENV,
    CALL_GLTEXTURELIGHTEXT,
    CALL_GLTEXTUREMATERIALEXT,
    CALL_GLTEXTURENORMALEXT,
    CALL_GLTEXTUREPAGECOMMITMENTEXT,
    CALL_GLTEXTUREPARAMETERIIV,
    CALL_GLTEXTUREPARAMETERIIVEXT,
    CALL_GLTEXTUREPARAMETERIUIV,
    CALL_GLTEXTUREPARAMETERIUIVEXT,
    CALL_GLTEXTUREPARAMETERF,
    CALL_GLTEXTUREPARAMETERFEXT,
    CALL_GLTEXTUREPARAMETERFV,
    CALL_GLTEXTUREPARAMETERFVEXT,
    CALL_GLTEXTUREPARAMETERI,
    CALL_GLTEXTUREPARAMETERIEXT,
    CALL_GLTEXTUREPARAMETERIV,
    CALL_GLTEXTUREPARAMETERIVEXT,
    CALL_GLTEXTURERANGEAPPLE,
    CALL_GLTEXTURERENDERBUFFEREXT,
    CALL_GLTEXTURESTORAGE1D,
    CALL_GLTEXTURESTORAGE1DEXT,
    CALL_GLTEXTURESTORAGE2D,
    CALL_GLTEXTURESTORAGE2DEXT,
    CALL_GLTEXTURESTORAGE2DMULTISAMPLE,
    CALL_GLTEXTURESTORAGE2DMULTISAMPLEEXT,
    CALL_GLTEXTURESTORAGE3D,
    CALL_GLTEXTURESTORAGE3DEXT,
    CALL_GLTEXTURESTORAGE3DMULTISAMPLE,
    CALL_GLTEXTURESTORAGE3DMULTISAMPLEEXT,
    CALL_GLTEXTURESTORAGEMEM1DEXT,
    CALL_GLTEXTURESTORAGEMEM2DEXT,
    CALL_GLTEXTURESTORAGEMEM2DMULTISAMPLEEXT,
    CALL_GLTEXTURESTORAGEMEM3DEXT,
    CALL_GLTEXTURESTORAGEMEM3DMULTISAMPLEEXT,
    CALL_GLTEXTURESTORAGESPARSEAMD,
    CALL_GLTEXTURESUBIMAGE1D,
    CALL_GLTEXTURESUBIMAGE1DEXT,
    CALL_GLTEXTURESUBIMAGE2D,
    CALL_GLTEXTURESUBIMAGE2DEXT,
    CALL_GLTEXTURESUBIMAGE3D,
    CALL_GLTEXTURESUBIMAGE3DEXT,
    CALL_GLTEXTUREVIEW,
    CALL_GLTRACKMATRIXNV,
    CALL_GLTRANSFORMFEEDBACKATTRIBSNV,
    CALL_GLTRANSFORMFEEDBACKBUFFERBASE,
    CALL_GLTRANSFORMFEEDBACKBUFFERRANGE,
    CALL_GLTRANSFORMFEEDBACKSTREAMATTRIBSNV,
    CALL_GLTRANSFORMFEEDBACKVARYINGS,
    CALL_GLTRANSFORMFEEDBACKVARYINGSEXT,
    CALL_GLTRANSFORMFEEDBACKVARYINGSNV,
    CALL_GLTRANSFORMPATHNV,
    CALL_GLTRANSLATEXOES,
    CALL_GLUNIFORM1D,
    CALL_GLUNIFORM1DV,
    CALL_GLUNIFORM1F,
    CALL_GLUNIFORM1FARB,
    CALL_GLUNIFORM1FV,
    CALL_GLUNIFORM1FVARB,
    CALL_GLUNIFORM1I,
    CALL_GLUNIFORM1I64ARB,
    CALL_GLUNIFORM1I64NV,
    CALL_GLUNIFORM1I64VARB,
    CALL_GLUNIFORM1I64VNV,
    CALL_GLUNIFORM1IARB,
    CALL_GLUNIFORM1IV,
    CALL_GLUNIFORM1IVARB,
    CALL_GLUNIFORM1UI,
    CALL_GLUNIFORM1UI64ARB,
    CALL_GLUNIFORM1UI64NV,
    CALL_GLUNIFORM1UI64VARB,
    CALL_GLUNIFORM1UI64VNV,
    CALL_GLUNIFORM1UIEXT,
    CALL_GLUNIFORM1UIV,
    CALL_GLUNIFORM1UIVEXT,
    CALL_GLUNIFORM2D,
    CALL_GLUNIFORM2DV,
    CALL_GLUNIFORM2F,
    CALL_GLUNIFORM2FARB,
    CALL_GLUNIFORM2FV,
    CALL_GLUNIFORM2FVARB,
    CALL_GLUNIFORM2I,
    CALL_GLUNIFORM2I64ARB,
    CALL_GLUNIFORM2I64NV,
    CALL_GLUNIFORM2I64VARB,
    CALL_GLUNIFORM2I64VNV,
    CALL_GLUNIFORM2IARB,
    CALL_GLUNIFORM2IV,
    CALL_GLUNIFORM2IVARB,
    CALL_GLUNIFORM2UI,
    CALL_GLUNIFORM2UI64ARB,
    CALL_GLUNIFORM2UI64NV,
    CALL_GLUNIFORM2UI64VARB,
    CALL_GLUNIFORM2UI64VNV,
    CALL_GLUNIFORM2UIEXT,
    CALL_GLUNIFORM2UIV,
    CALL_GLUNIFORM2UIVEXT,
    CALL_GLUNIFORM3D,
    CALL_GLUNIFORM3DV,
    CALL_GLUNIFORM3F,
    CALL_GLUNIFORM3FARB,
    CALL_GLUNIFORM3FV,
    CALL_GLUNIFORM3FVARB,
    CALL_GLUNIFORM3I,
    CALL_GLUNIFORM3I64ARB,
    CALL_GLUNIFORM3I64NV,
    CALL_GLUNIFORM3I64VARB,
    CALL_GLUNIFORM3I64VNV,
    CALL_GLUNIFORM3IARB,
    CALL_GLUNIFORM3IV,
    CALL_GLUNIFORM3IVARB,
    CALL_GLUNIFORM3UI,
    CALL_GLUNIFORM3UI64ARB,
    CALL_GLUNIFORM3UI64NV,
    CALL_GLUNIFORM3UI64VARB,
    CALL_GLUNIFORM3UI64VNV,
    CALL_GLUNIFORM3UIEXT,
    CALL_GLUNIFORM3UIV,
    CALL_GLUNIFORM3UIVEXT,
    CALL_GLUNIFORM4D,
    CALL_GLUNIFORM4DV,
    CALL_GLUNIFORM4F,
    CALL_GLUNIFORM4FARB,
    CALL_GLUNIFORM4FV,
    CALL_GLUNIFORM4FVARB,
    CALL_GLUNIFORM4I,
    CALL_GLUNIFORM4I64ARB,
    CALL_GLUNIFORM4I64NV,
    CALL_GLUNIFORM4I64VARB,
    CALL_GLUNIFORM4I64VNV,
    CALL_GLUNIFORM4IARB,
    CALL_GLUNIFORM4IV,
    CALL_GLUNIFORM4IVARB,
    CALL_GLUNIFORM4UI,
    CALL_GLUNIFORM4UI64ARB,
    CALL_GLUNIFORM4UI64NV,
    CALL_GLUNIFORM4UI64VARB,
    CALL_GLUNIFORM4UI64VNV,
    CALL_GLUNIFORM4UIEXT,
    CALL_GLUNIFORM4UIV,
    CALL_GLUNIFORM4UIVEXT,
    CALL_GLUNIFORMBLOCKBINDING,
    CALL_GLUNIFORMBUFFEREXT,
    CALL_GLUNIFORMHANDLEUI64ARB,
    CALL_GLUNIFORMHANDLEUI64NV,
    CALL_GLUNIFORMHANDLEUI64VARB,
    CALL_GLUNIFORMHANDLEUI64VNV,
    CALL_GLUNIFORMMATRIX2DV,
    CALL_GLUNIFORMMATRIX2FV,
    CALL_GLUNIFORMMATRIX2FVARB,
    CALL_GLUNIFORMMATRIX2X3DV,
    CALL_GLUNIFORMMATRIX2X3FV,
    CALL_GLUNIFORMMATRIX2X4DV,
    CALL_GLUNIFORMMATRIX2X4FV,
    CALL_GLUNIFORMMATRIX3DV,
    CALL_GLUNIFORMMATRIX3FV,
    CALL_GLUNIFORMMATRIX3FVARB,
    CALL_GLUNIFORMMATRIX3X2DV,
    CALL_GLUNIFORMMATRIX3X2FV,
    CALL_GLUNIFORMMATRIX3X4DV,
    CALL_GLUNIFORMMATRIX3X4FV,
    CALL_GLUNIFORMMATRIX4DV,
    CALL_GLUNIFORMMATRIX4FV,
    CALL_GLUNIFORMMATRIX4FVARB,
    CALL_GLUNIFORMMATRIX4X2DV,
    CALL_GLUNIFORMMATRIX4X2FV,
    CALL_GLUNIFORMMATRIX4X3DV,
    CALL_GLUNIFORMMATRIX4X3FV,
    CALL_GLUNIFORMSUBROUTINESUIV,
    CALL_GLUNIFORMUI64NV,
    CALL_GLUNIFORMUI64VNV,
    CALL_GLUNLOCKARRAYSEXT,
    CALL_GLUNMAPBUFFER,
    CALL_GLUNMAPBUFFERARB,
    CALL_GLUNMAPNAMEDBUFFER,
    CALL_GLUNMAPNAMEDBUFFEREXT,
    CALL_GLUNMAPOBJECTBUFFERATI,
    CALL_GLUNMAPTEXTURE2DINTEL,
    CALL_GLUPDATEOBJECTBUFFERATI,
    CALL_GLUPLOADGPUMASKNVX,
    CALL_GLUSEPROGRAM,
    CALL_GLUSEPROGRAMOBJECTARB,
    CALL_GLUSEPROGRAMSTAGES,
    CALL_GLUSESHADERPROGRAMEXT,
    CALL_GLVDPAUFININV,
    CALL_GLVDPAUGETSURFACEIVNV,
    CALL_GLVDPAUINITNV,
    CALL_GLVDPAUISSURFACENV,
    CALL_GLVDPAUMAPSURFACESNV,
    CALL_GLVDPAUREGISTEROUTPUTSURFACENV,
    CALL_GLVDPAUREGISTERVIDEOSURFACENV,
    CALL_GLVDPAUREGISTERVIDEOSURFACEWITHPICTURESTRUCTURENV,
    CALL_GLVDPAUSURFACEACCESSNV,
    CALL_GLVDPAUUNMAPSURFACESNV,
    CALL_GLVDPAUUNREGISTERSURFACENV,
    CALL_GLVALIDATEPROGRAM,
    CALL_GLVALIDATEPROGRAMARB,
    CALL_GLVALIDATEPROGRAMPIPELINE,
    CALL_GLVARIANTARRAYOBJECTATI,
    CALL_GLVARIANTPOINTEREXT,
    CALL_GLVARIANTBVEXT,
    CALL_GLVARIANTDVEXT,
    CALL_GLVARIANTFVEXT,
    CALL_GLVARIANTIVEXT,
    CALL_GLVARIANTSVEXT,
    CALL_GLVARIANTUBVEXT,
    CALL_GLVARIANTUIVEXT,
    CALL_GLVARIANTUSVEXT,
    CALL_GLVERTEX2BOES,
    CALL_GLVERTEX2BVOES,
    CALL_GLVERTEX2HNV,
    CALL_GLVERTEX2HVNV,
    CALL_GLVERTEX2XOES,
    CALL_GLVERTEX2XVOES,
    CALL_GLVERTEX3BOES,
    CALL_GLVERTEX3BVOES,
    CALL_GLVERTEX3HNV,
    CALL_GLVERTEX3HVNV,
    CALL_GLVERTEX3XOES,
    CALL_GLVERTEX3XVOES,
    CALL_GLVERTEX4BOES,
    CALL_GLVERTEX4BVOES,
    CALL_GLVERTEX4HNV,
    CALL_GLVERTEX4HVNV,
    CALL_GLVERTEX4XOES,
    CALL_GLVERTEX4XVOES,
    CALL_GLVERTEXARRAYATTRIBBINDING,
    CALL_GLVERTEXARRAYATTRIBFORMAT,
    CALL_GLVERTEXARRAYATTRIBIFORMAT,
    CALL_GLVERTEXARRAYATTRIBLFORMAT,
    CALL_GLVERTEXARRAYBINDVERTEXBUFFEREXT,
    CALL_GLVERTEXARRAYBINDINGDIVISOR,
    CALL_GLVERTEXARRAYCOLOROFFSETEXT,
    CALL_GLVERTEXARRAYEDGEFLAGOFFSETEXT,
    CALL_GLVERTEXARRAYELEMENTBUFFER,
    CALL_GLVERTEXARRAYFOGCOORDOFFSETEXT,
    CALL_GLVERTEXARRAYINDEXOFFSETEXT,
    CALL_GLVERTEXARRAYMULTITEXCOORDOFFSETEXT,
    CALL_GLVERTEXARRAYNORMALOFFSETEXT,
    CALL_GLVERTEXARRAYPARAMETERIAPPLE,
    CALL_GLVERTEXARRAYRANGEAPPLE,
    CALL_GLVERTEXARRAYRANGENV,
    CALL_GLVERTEXARRAYSECONDARYCOLOROFFSETEXT,
    CALL_GLVERTEXARRAYTEXCOORDOFFSETEXT,
    CALL_GLVERTEXARRAYVERTEXATTRIBBINDINGEXT,
    CALL_GLVERTEXARRAYVERTEXATTRIBDIVISOREXT,
    CALL_GLVERTEXARRAYVERTEXATTRIBFORMATEXT,
    CALL_GLVERTEXARRAYVERTEXATTRIBIFORMATEXT,
    CALL_GLVERTEXARRAYVERTEXATTRIBIOFFSETEXT,
    CALL_GLVERTEXARRAYVERTEXATTRIBLFORMATEXT,
    CALL_GLVERTEXARRAYVERTEXATTRIBLOFFSETEXT,
    CALL_GLVERTEXARRAYVERTEXATTRIBOFFSETEXT,
    CALL_GLVERTEXARRAYVERTEXBINDINGDIVISOREXT,
    CALL_GLVERTEXARRAYVERTEXBUFFER,
    CALL_GLVERTEXARRAYVERTEXBUFFERS,
    CALL_GLVERTEXARRAYVERTEXOFFSETEXT,
    CALL_GLVERTEXATTRIB1D,
    CALL_GLVERTEXATTRIB1DARB,
    CALL_GLVERTEXATTRIB1DNV,
    CALL_GLVERTEXATTRIB1DV,
    CALL_GLVERTEXATTRIB1DVARB,
    CALL_GLVERTEXATTRIB1DVNV,
    CALL_GLVERTEXATTRIB1F,
    CALL_GLVERTEXATTRIB1FARB,
    CALL_GLVERTEXATTRIB1FNV,
    CALL_GLVERTEXATTRIB1FV,
    CALL_GLVERTEXATTRIB1FVARB,
    CALL_GLVERTEXATTRIB1FVNV,
    CALL_GLVERTEXATTRIB1HNV,
    CALL_GLVERTEXATTRIB1HVNV,
    CALL_GLVERTEXATTRIB1S,
    CALL_GLVERTEXATTRIB1SARB,
    CALL_GLVERTEXATTRIB1SNV,
    CALL_GLVERTEXATTRIB1SV,
    CALL_GLVERTEXATTRIB1SVARB,
    CALL_GLVERTEXATTRIB1SVNV,
    CALL_GLVERTEXATTRIB2D,
    CALL_GLVERTEXATTRIB2DARB,
    CALL_GLVERTEXATTRIB2DNV,
    CALL_GLVERTEXATTRIB2DV,
    CALL_GLVERTEXATTRIB2DVARB,
    CALL_GLVERTEXATTRIB2DVNV,
    CALL_GLVERTEXATTRIB2F,
    CALL_GLVERTEXATTRIB2FARB,
    CALL_GLVERTEXATTRIB2FNV,
    CALL_GLVERTEXATTRIB2FV,
    CALL_GLVERTEXATTRIB2FVARB,
    CALL_GLVERTEXATTRIB2FVNV,
    CALL_GLVERTEXATTRIB2HNV,
    CALL_GLVERTEXATTRIB2HVNV,
    CALL_GLVERTEXATTRIB2S,
    CALL_GLVERTEXATTRIB2SARB,
    CALL_GLVERTEXATTRIB2SNV,
    CALL_GLVERTEXATTRIB2SV,
    CALL_GLVERTEXATTRIB2SVARB,
    CALL_GLVERTEXATTRIB2SVNV,
    CALL_GLVERTEXATTRIB3D,
    CALL_GLVERTEXATTRIB3DARB,
    CALL_GLVERTEXATTRIB3DNV,
    CALL_GLVERTEXATTRIB3DV,
    CALL_GLVERTEXATTRIB3DVARB,
    CALL_GLVERTEXATTRIB3DVNV,
    CALL_GLVERTEXATTRIB3F,
    CALL_GLVERTEXATTRIB3FARB,
    CALL_GLVERTEXATTRIB3FNV,
    CALL_GLVERTEXATTRIB3FV,
    CALL_GLVERTEXATTRIB3FVARB,
    CALL_GLVERTEXATTRIB3FVNV,
    CALL_GLVERTEXATTRIB3HNV,
    CALL_GLVERTEXATTRIB3HVNV,
    CALL_GLVERTEXATTRIB3S,
    CALL_GLVERTEXATTRIB3SARB,
    CALL_GLVERTEXATTRIB3SNV,
    CALL_GLVERTEXATTRIB3SV,
    CALL_GLVERTEXATTRIB3SVARB,
    CALL_GLVERTEXATTRIB3SVNV,
    CALL_GLVERTEXATTRIB4NBV,
    CALL_GLVERTEXATTRIB4NBVARB,
    CALL_GLVERTEXATTRIB4NIV,
    CALL_GLVERTEXATTRIB4NIVARB,
    CALL_GLVERTEXATTRIB4NSV,
    CALL_GLVERTEXATTRIB4NSVARB,
    CALL_GLVERTEXATTRIB4NUB,
    CALL_GLVERTEXATTRIB4NUBARB,
    CALL_GLVERTEXATTRIB4NUBV,
    CALL_GLVERTEXATTRIB4NUBVARB,
    CALL_GLVERTEXATTRIB4NUIV,
    CALL_GLVERTEXATTRIB4NUIVARB,
    CALL_GLVERTEXATTRIB4NUSV,
    CALL_GLVERTEXATTRIB4NUSVARB,
    CALL_GLVERTEXATTRIB4BV,
    CALL_GLVERTEXATTRIB4BVARB,
    CALL_GLVERTEXATTRIB4D,
    CALL_GLVERTEXATTRIB4DARB,
    CALL_GLVERTEXATTRIB4DNV,
    CALL_GLVERTEXATTRIB4DV,
    CALL_GLVERTEXATTRIB4DVARB,
    CALL_GLVERTEXATTRIB4DVNV,
    CALL_GLVERTEXATTRIB4F,
    CALL_GLVERTEXATTRIB4FARB,
    CALL_GLVERTEXATTRIB4FNV,
    CALL_GLVERTEXATTRIB4FV,
    CALL_GLVERTEXATTRIB4FVARB,
    CALL_GLVERTEXATTRIB4FVNV,
    CALL_GLVERTEXATTRIB4HNV,
    CALL_GLVERTEXATTRIB4HVNV,
    CALL_GLVERTEXATTRIB4IV,
    CALL_GLVERTEXATTRIB4IVARB,
    CALL_GLVERTEXATTRIB4S,
    CALL_GLVERTEXATTRIB4SARB,
    CALL_GLVERTEXATTRIB4SNV,
    CALL_GLVERTEXATTRIB4SV,
    CALL_GLVERTEXATTRIB4SVARB,
    CALL_GLVERTEXATTRIB4SVNV,
    CALL_GLVERTEXATTRIB4UBNV,
    CALL_GLVERTEXATTRIB4UBV,
    CALL_GLVERTEXATTRIB4UBVARB,
    CALL_GLVERTEXATTRIB4UBVNV,
    CALL_GLVERTEXATTRIB4UIV,
    CALL_GLVERTEXATTRIB4UIVARB,
    CALL_GLVERTEXATTRIB4USV,
    CALL_GLVERTEXATTRIB4USVARB,
    CALL_GLVERTEXATTRIBARRAYOBJECTATI,
    CALL_GLVERTEXATTRIBBINDING,
    CALL_GLVERTEXATTRIBDIVISOR,
    CALL_GLVERTEXATTRIBDIVISORARB,
    CALL_GLVERTEXATTRIBFORMAT,
    CALL_GLVERTEXATTRIBFORMATNV,
    CALL_GLVERTEXATTRIBI1I,
    CALL_GLVERTEXATTRIBI1IEXT,
    CALL_GLVERTEXATTRIBI1IV,
    CALL_GLVERTEXATTRIBI1IVEXT,
    CALL_GLVERTEXATTRIBI1UI,
    CALL_GLVERTEXATTRIBI1UIEXT,
    CALL_GLVERTEXATTRIBI1UIV,
    CALL_GLVERTEXATTRIBI1UIVEXT,
    CALL_GLVERTEXATTRIBI2I,
    CALL_GLVERTEXATTRIBI2IEXT,
    CALL_GLVERTEXATTRIBI2IV,
    CALL_GLVERTEXATTRIBI2IVEXT,
    CALL_GLVERTEXATTRIBI2UI,
    CALL_GLVERTEXATTRIBI2UIEXT,
    CALL_GLVERTEXATTRIBI2UIV,
    CALL_GLVERTEXATTRIBI2UIVEXT,
    CALL_GLVERTEXATTRIBI3I,
    CALL_GLVERTEXATTRIBI3IEXT,
    CALL_GLVERTEXATTRIBI3IV,
    CALL_GLVERTEXATTRIBI3IVEXT,
    CALL_GLVERTEXATTRIBI3UI,
    CALL_GLVERTEXATTRIBI3UIEXT,
    CALL_GLVERTEXATTRIBI3UIV,
    CALL_GLVERTEXATTRIBI3UIVEXT,
    CALL_GLVERTEXATTRIBI4BV,
    CALL_GLVERTEXATTRIBI4BVEXT,
    CALL_GLVERTEXATTRIBI4I,
    CALL_GLVERTEXATTRIBI4IEXT,
    CALL_GLVERTEXATTRIBI4IV,
    CALL_GLVERTEXATTRIBI4IVEXT,
    CALL_GLVERTEXATTRIBI4SV,
    CALL_GLVERTEXATTRIBI4SVEXT,
    CALL_GLVERTEXATTRIBI4UBV,
    CALL_GLVERTEXATTRIBI4UBVEXT,
    CALL_GLVERTEXATTRIBI4UI,
    CALL_GLVERTEXATTRIBI4UIEXT,
    CALL_GLVERTEXATTRIBI4UIV,
    CALL_GLVERTEXATTRIBI4UIVEXT,
    CALL_GLVERTEXATTRIBI4USV,
    CALL_GLVERTEXATTRIBI4USVEXT,
    CALL_GLVERTEXATTRIBIFORMAT,
    CALL_GLVERTEXATTRIBIFORMATNV,
    CALL_GLVERTEXATTRIBIPOINTER,
    CALL_GLVERTEXATTRIBIPOINTEREXT,
    CALL_GLVERTEXATTRIBL1D,
    CALL_GLVERTEXATTRIBL1DEXT,
    CALL_GLVERTEXATTRIBL1DV,
    CALL_GLVERTEXATTRIBL1DVEXT,
    CALL_GLVERTEXATTRIBL1I64NV,
    CALL_GLVERTEXATTRIBL1I64VNV,
    CALL_GLVERTEXATTRIBL1UI64ARB,
    CALL_GLVERTEXATTRIBL1UI64NV,
    CALL_GLVERTEXATTRIBL1UI64VARB,
    CALL_GLVERTEXATTRIBL1UI64VNV,
    CALL_GLVERTEXATTRIBL2D,
    CALL_GLVERTEXATTRIBL2DEXT,
    CALL_GLVERTEXATTRIBL2DV,
    CALL_GLVERTEXATTRIBL2DVEXT,
    CALL_GLVERTEXATTRIBL2I64NV,
    CALL_GLVERTEXATTRIBL2I64VNV,
    CALL_GLVERTEXATTRIBL2UI64NV,
    CALL_GLVERTEXATTRIBL2UI64VNV,
    CALL_GLVERTEXATTRIBL3D,
    CALL_GLVERTEXATTRIBL3DEXT,
    CALL_GLVERTEXATTRIBL3DV,
    CALL_GLVERTEXATTRIBL3DVEXT,
    CALL_GLVERTEXATTRIBL3I64NV,
    CALL_GLVERTEXATTRIBL3I64VNV,
    CALL_GLVERTEXATTRIBL3UI64NV,
    CALL_GLVERTEXATTRIBL3UI64VNV,
    CALL_GLVERTEXATTRIBL4D,
    CALL_GLVERTEXATTRIBL4DEXT,
    CALL_GLVERTEXATTRIBL4DV,
    CALL_GLVERTEXATTRIBL4DVEXT,
    CALL_GLVERTEXATTRIBL4I64NV,
    CALL_GLVERTEXATTRIBL4I64VNV,
    CALL_GLVERTEXATTRIBL4UI64NV,
    CALL_GLVERTEXATTRIBL4UI64VNV,
    CALL_GLVERTEXATTRIBLFORMAT,
    CALL_GLVERTEXATTRIBLFORMATNV,
    CALL_GLVERTEXATTRIBLPOINTER,
    CALL_GLVERTEXATTRIBLPOINTEREXT,
    CALL_GLVERTEXATTRIBP1UI,
    CALL_GLVERTEXATTRIBP1UIV,
    CALL_GLVERTEXATTRIBP2UI,
    CALL_GLVERTEXATTRIBP2UIV,
    CALL_GLVERTEXATTRIBP3UI,
    CALL_GLVERTEXATTRIBP3UIV,
    CALL_GLVERTEXATTRIBP4UI,
    CALL_GLVERTEXATTRIBP4UIV,
    CALL_GLVERTEXATTRIBPARAMETERIAMD,
    CALL_GLVERTEXATTRIBPOINTER,
    CALL_GLVERTEXATTRIBPOINTERARB,
    CALL_GLVERTEXATTRIBPOINTERNV,
    CALL_GLVERTEXATTRIBS1DVNV,
    CALL_GLVERTEXATTRIBS1FVNV,
    CALL_GLVERTEXATTRIBS1HVNV,
    CALL_GLVERTEXATTRIBS1SVNV,
    CALL_GLVERTEXATTRIBS2DVNV,
    CALL_GLVERTEXATTRIBS2FVNV,
    CALL_GLVERTEXATTRIBS2HVNV,
    CALL_GLVERTEXATTRIBS2SVNV,
    CALL_GLVERTEXATTRIBS3DVNV,
    CALL_GLVERTEXATTRIBS3FVNV,
    CALL_GLVERTEXATTRIBS3HVNV,
    CALL_GLVERTEXATTRIBS3SVNV,
    CALL_GLVERTEXATTRIBS4DVNV,
    CALL_GLVERTEXATTRIBS4FVNV,
    CALL_GLVERTEXATTRIBS4HVNV,
    CALL_GLVERTEXATTRIBS4SVNV,
    CALL_GLVERTEXATTRIBS4UBVNV,
    CALL_GLVERTEXBINDINGDIVISOR,
    CALL_GLVERTEXBLENDARB,
    CALL_GLVERTEXBLENDENVFATI,
    CALL_GLVERTEXBLENDENVIATI,
    CALL_GLVERTEXFORMATNV,
    CALL_GLVERTEXP2UI,
    CALL_GLVERTEXP2UIV,
    CALL_GLVERTEXP3UI,
    CALL_GLVERTEXP3UIV,
    CALL_GLVERTEXP4UI,
    CALL_GLVERTEXP4UIV,
    CALL_GLVERTEXPOINTEREXT,
    CALL_GLVERTEXPOINTERLISTIBM,
    CALL_GLVERTEXPOINTERVINTEL,
    CALL_GLVERTEXSTREAM1DATI,
    CALL_GLVERTEXSTREAM1DVATI,
    CALL_GLVERTEXSTREAM1FATI,
    CALL_GLVERTEXSTREAM1FVATI,
    CALL_GLVERTEXSTREAM1IATI,
    CALL_GLVERTEXSTREAM1IVATI,
    CALL_GLVERTEXSTREAM1SATI,
    CALL_GLVERTEXSTREAM1SVATI,
    CALL_GLVERTEXSTREAM2DATI,
    CALL_GLVERTEXSTREAM2DVATI,
    CALL_GLVERTEXSTREAM2FATI,
    CALL_GLVERTEXSTREAM2FVATI,
    CALL_GLVERTEXSTREAM2IATI,
    CALL_GLVERTEXSTREAM2IVATI,
    CALL_GLVERTEXSTREAM2SATI,
    CALL_GLVERTEXSTREAM2SVATI,
    CALL_GLVERTEXSTREAM3DATI,
    CALL_GLVERTEXSTREAM3DVATI,
    CALL_GLVERTEXSTREAM3FATI,
    CALL_GLVERTEXSTREAM3FVATI,
    CALL_GLVERTEXSTREAM3IATI,
    CALL_GLVERTEXSTREAM3IVATI,
    CALL_GLVERTEXSTREAM3SATI,
    CALL_GLVERTEXSTREAM3SVATI,
    CALL_GLVERTEXSTREAM4DATI,
    CALL_GLVERTEXSTREAM4DVATI,
    CALL_GLVERTEXSTREAM4FATI,
    CALL_GLVERTEXSTREAM4FVATI,
    CALL_GLVERTEXSTREAM4IATI,
    CALL_GLVERTEXSTREAM4IVATI,
    CALL_GLVERTEXSTREAM4SATI,
    CALL_GLVERTEXSTREAM4SVATI,
    CALL_GLVERTEXWEIGHTPOINTEREXT,
    CALL_GLVERTEXWEIGHTFEXT,
    CALL_GLVERTEXWEIGHTFVEXT,
    CALL_GLVERTEXWEIGHTHNV,
    CALL_GLVERTEXWEIGHTHVNV,
    CALL_GLVIDEOCAPTURENV,
    CALL_GLVIDEOCAPTURESTREAMPARAMETERDVNV,
    CALL_GLVIDEOCAPTURESTREAMPARAMETERFVNV,
    CALL_GLVIDEOCAPTURESTREAMPARAMETERIVNV,
    CALL_GLVIEWPORTARRAYV,
    CALL_GLVIEWPORTINDEXEDF,
    CALL_GLVIEWPORTINDEXEDFV,
    CALL_GLVIEWPORTPOSITIONWSCALENV,
    CALL_GLVIEWPORTSWIZZLENV,
    CALL_GLWAITSEMAPHOREEXT,
    CALL_GLWAITSEMAPHOREUI64NVX,
    CALL_GLWAITSYNC,
    CALL_GLWAITVKSEMAPHORENV,
    CALL_GLWEIGHTPATHSNV,
    CALL_GLWEIGHTPOINTERARB,
    CALL_GLWEIGHTBVARB,
    CALL_GLWEIGHTDVARB,
    CALL_GLWEIGHTFVARB,
    CALL_GLWEIGHTIVARB,
    CALL_GLWEIGHTSVARB,
    CALL_GLWEIGHTUBVARB,
    CALL_GLWEIGHTUIVARB,
    CALL_GLWEIGHTUSVARB,
    CALL_GLWINDOWPOS2D,
    CALL_GLWINDOWPOS2DARB,
    CALL_GLWINDOWPOS2DMESA,
    CALL_GLWINDOWPOS2DV,
    CALL_GLWINDOWPOS2DVARB,
    CALL_GLWINDOWPOS2DVMESA,
    CALL_GLWINDOWPOS2F,
    CALL_GLWINDOWPOS2FARB,
    CALL_GLWINDOWPOS2FMESA,
    CALL_GLWINDOWPOS2FV,
    CALL_GLWINDOWPOS2FVARB,
    CALL_GLWINDOWPOS2FVMESA,
    CALL_GLWINDOWPOS2I,
    CALL_GLWINDOWPOS2IARB,
    CALL_GLWINDOWPOS2IMESA,
    CALL_GLWINDOWPOS2IV,
    CALL_GLWINDOWPOS2IVARB,
    CALL_GLWINDOWPOS2IVMESA,
    CALL_GLWINDOWPOS2S,
    CALL_GLWINDOWPOS2SARB,
    CALL_GLWINDOWPOS2SMESA,
    CALL_GLWINDOWPOS2SV,
    CALL_GLWINDOWPOS2SVARB,
    CALL_GLWINDOWPOS2SVMESA,
    CALL_GLWINDOWPOS3D,
    CALL_GLWINDOWPOS3DARB,
    CALL_GLWINDOWPOS3DMESA,
    CALL_GLWINDOWPOS3DV,
    CALL_GLWINDOWPOS3DVARB,
    CALL_GLWINDOWPOS3DVMESA,
    CALL_GLWINDOWPOS3F,
    CALL_GLWINDOWPOS3FARB,
    CALL_GLWINDOWPOS3FMESA,
    CALL_GLWINDOWPOS3FV,
    CALL_GLWINDOWPOS3FVARB,
    CALL_GLWINDOWPOS3FVMESA,
    CALL_GLWINDOWPOS3I,
    CALL_GLWINDOWPOS3IARB,
    CALL_GLWINDOWPOS3IMESA,
    CALL_GLWINDOWPOS3IV,
    CALL_GLWINDOWPOS3IVARB,
    CALL_GLWINDOWPOS3IVMESA,
    CALL_GLWINDOWPOS3S,
    CALL_GLWINDOWPOS3SARB,
    CALL_GLWINDOWPOS3SMESA,
    CALL_GLWINDOWPOS3SV,
    CALL_GLWINDOWPOS3SVARB,
    CALL_GLWINDOWPOS3SVMESA,
    CALL_GLWINDOWPOS4DMESA,
    CALL_GLWINDOWPOS4DVMESA,
    CALL_GLWINDOWPOS4FMESA,
    CALL_GLWINDOWPOS4FVMESA,
    CALL_GLWINDOWPOS4IMESA,
    CALL_GLWINDOWPOS4IVMESA,
    CALL_GLWINDOWPOS4SMESA,
    CALL_GLWINDOWPOS4SVMESA,
    CALL_GLWINDOWRECTANGLESEXT,
    CALL_GLWRITEMASKEXT,
    CALL_WGLALLOCATEMEMORYNV,
    CALL_WGLBINDTEXIMAGEARB,
    CALL_WGLCHOOSEPIXELFORMATARB,
    CALL_WGLCREATECONTEXTATTRIBSARB,
    CALL_WGLCREATEPBUFFERARB,
    CALL_WGLDESTROYPBUFFERARB,
    CALL_WGLFREEMEMORYNV,
    CALL_WGLGETCURRENTREADDCARB,
    CALL_WGLGETEXTENSIONSSTRINGARB,
    CALL_WGLGETEXTENSIONSSTRINGEXT,
    CALL_WGLGETPBUFFERDCARB,
    CALL_WGLGETPIXELFORMATATTRIBFVARB,
    CALL_WGLGETPIXELFORMATATTRIBIVARB,
    CALL_WGLGETSWAPINTERVALEXT,
    CALL_WGLMAKECONTEXTCURRENTARB,
    CALL_WGLQUERYCURRENTRENDERERINTEGERWINE,
    CALL_WGLQUERYCURRENTRENDERERSTRINGWINE,
    CALL_WGLQUERYPBUFFERARB,
    CALL_WGLQUERYRENDERERINTEGERWINE,
    CALL_WGLQUERYRENDERERSTRINGWINE,
    CALL_WGLRELEASEPBUFFERDCARB,
    CALL_WGLRELEASETEXIMAGEARB,
    CALL_WGLSETPBUFFERATTRIBARB,
    CALL_WGLSETPIXELFORMATWINE,
    CALL_WGLSWAPINTERVALEXT,
    CALL_WGLCOPYCONTEXT,
    CALL_WGLCREATECONTEXT,
    CALL_WGLDELETECONTEXT,
    CALL_WGLDESCRIBEPIXELFORMAT,
    CALL_WGLGETPIXELFORMAT,
    CALL_WGLGETPROCADDRESS,
    CALL_WGLMAKECURRENT,
    CALL_WGLSETPIXELFORMAT,
    CALL_WGLSHARELISTS,
    CALL_WGLSWAPBUFFERS,
    CALL_WGLCHOOSEPIXELFORMAT,
    CALL_WGLCREATELAYERCONTEXT,
    CALL_WGLDESCRIBELAYERPLANE,
    CALL_WGLGETCURRENTCONTEXT,
    CALL_WGLGETCURRENTDC,
    CALL_WGLGETDEFAULTPROCADDRESS,
    CALL_WGLGETLAYERPALETTEENTRIES,
    CALL_WGLREALIZELAYERPALETTE,
    CALL_WGLSETLAYERPALETTEENTRIES,
    CALL_WGLSWAPLAYERBUFFERS,
    CALL_WGLUSEFONTBITMAPSA,
    CALL_WGLUSEFONTBITMAPSW,
    CALL_WGLUSEFONTOUTLINESA,
    CALL_WGLUSEFONTOUTLINESW,
};
struct wgl_context;
struct wgl_pbuffer;

#ifndef WINE_GLAPI
#define WINE_GLAPI
#endif /* WINE_GLAPI */

#ifdef QEMU_DLL_GUEST
struct opengl_funcs
{
    struct
    {
        BOOL       (WINAPI *p_wglCopyContext)( struct wgl_context * hglrcSrc, struct wgl_context * hglrcDst, UINT mask );
        struct wgl_context * (WINAPI *p_wglCreateContext)( HDC hDc );
        BOOL       (WINAPI *p_wglDeleteContext)( struct wgl_context * oldContext );
        int        (WINAPI *p_wglDescribePixelFormat)( HDC hdc, int ipfd, UINT cjpfd, PIXELFORMATDESCRIPTOR *ppfd );
        int        (WINAPI *p_wglGetPixelFormat)( HDC hdc );
        PROC       (WINAPI *p_wglGetProcAddress)( LPCSTR lpszProc );
        BOOL       (WINAPI *p_wglMakeCurrent)( HDC hDc, struct wgl_context * newContext );
        BOOL       (WINAPI *p_wglSetPixelFormat)( HDC hdc, int ipfd, const PIXELFORMATDESCRIPTOR *ppfd );
        BOOL       (WINAPI *p_wglShareLists)( struct wgl_context * hrcSrvShare, struct wgl_context * hrcSrvSource );
        BOOL       (WINAPI *p_wglSwapBuffers)( HDC hdc );
    } wgl;

    struct
    {
        void       (WINE_GLAPI *p_glAccum)( GLenum op, GLfloat value );
        void       (WINE_GLAPI *p_glAlphaFunc)( GLenum func, GLfloat ref );
        GLboolean  (WINE_GLAPI *p_glAreTexturesResident)( GLsizei n, const GLuint *textures, GLboolean *residences );
        void       (WINE_GLAPI *p_glArrayElement)( GLint i );
        void       (WINE_GLAPI *p_glBegin)( GLenum mode );
        void       (WINE_GLAPI *p_glBindTexture)( GLenum target, GLuint texture );
        void       (WINE_GLAPI *p_glBitmap)( GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap );
        void       (WINE_GLAPI *p_glBlendFunc)( GLenum sfactor, GLenum dfactor );
        void       (WINE_GLAPI *p_glCallList)( GLuint list );
        void       (WINE_GLAPI *p_glCallLists)( GLsizei n, GLenum type, const void *lists );
        void       (WINE_GLAPI *p_glClear)( GLbitfield mask );
        void       (WINE_GLAPI *p_glClearAccum)( GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha );
        void       (WINE_GLAPI *p_glClearColor)( GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha );
        void       (WINE_GLAPI *p_glClearDepth)( GLdouble depth );
        void       (WINE_GLAPI *p_glClearIndex)( GLfloat c );
        void       (WINE_GLAPI *p_glClearStencil)( GLint s );
        void       (WINE_GLAPI *p_glClipPlane)( GLenum plane, const GLdouble *equation );
        void       (WINE_GLAPI *p_glColor3b)( GLbyte red, GLbyte green, GLbyte blue );
        void       (WINE_GLAPI *p_glColor3bv)( const GLbyte *v );
        void       (WINE_GLAPI *p_glColor3d)( GLdouble red, GLdouble green, GLdouble blue );
        void       (WINE_GLAPI *p_glColor3dv)( const GLdouble *v );
        void       (WINE_GLAPI *p_glColor3f)( GLfloat red, GLfloat green, GLfloat blue );
        void       (WINE_GLAPI *p_glColor3fv)( const GLfloat *v );
        void       (WINE_GLAPI *p_glColor3i)( GLint red, GLint green, GLint blue );
        void       (WINE_GLAPI *p_glColor3iv)( const GLint *v );
        void       (WINE_GLAPI *p_glColor3s)( GLshort red, GLshort green, GLshort blue );
        void       (WINE_GLAPI *p_glColor3sv)( const GLshort *v );
        void       (WINE_GLAPI *p_glColor3ub)( GLubyte red, GLubyte green, GLubyte blue );
        void       (WINE_GLAPI *p_glColor3ubv)( const GLubyte *v );
        void       (WINE_GLAPI *p_glColor3ui)( GLuint red, GLuint green, GLuint blue );
        void       (WINE_GLAPI *p_glColor3uiv)( const GLuint *v );
        void       (WINE_GLAPI *p_glColor3us)( GLushort red, GLushort green, GLushort blue );
        void       (WINE_GLAPI *p_glColor3usv)( const GLushort *v );
        void       (WINE_GLAPI *p_glColor4b)( GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha );
        void       (WINE_GLAPI *p_glColor4bv)( const GLbyte *v );
        void       (WINE_GLAPI *p_glColor4d)( GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha );
        void       (WINE_GLAPI *p_glColor4dv)( const GLdouble *v );
        void       (WINE_GLAPI *p_glColor4f)( GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha );
        void       (WINE_GLAPI *p_glColor4fv)( const GLfloat *v );
        void       (WINE_GLAPI *p_glColor4i)( GLint red, GLint green, GLint blue, GLint alpha );
        void       (WINE_GLAPI *p_glColor4iv)( const GLint *v );
        void       (WINE_GLAPI *p_glColor4s)( GLshort red, GLshort green, GLshort blue, GLshort alpha );
        void       (WINE_GLAPI *p_glColor4sv)( const GLshort *v );
        void       (WINE_GLAPI *p_glColor4ub)( GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha );
        void       (WINE_GLAPI *p_glColor4ubv)( const GLubyte *v );
        void       (WINE_GLAPI *p_glColor4ui)( GLuint red, GLuint green, GLuint blue, GLuint alpha );
        void       (WINE_GLAPI *p_glColor4uiv)( const GLuint *v );
        void       (WINE_GLAPI *p_glColor4us)( GLushort red, GLushort green, GLushort blue, GLushort alpha );
        void       (WINE_GLAPI *p_glColor4usv)( const GLushort *v );
        void       (WINE_GLAPI *p_glColorMask)( GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha );
        void       (WINE_GLAPI *p_glColorMaterial)( GLenum face, GLenum mode );
        void       (WINE_GLAPI *p_glColorPointer)( GLint size, GLenum type, GLsizei stride, const void *pointer );
        void       (WINE_GLAPI *p_glCopyPixels)( GLint x, GLint y, GLsizei width, GLsizei height, GLenum type );
        void       (WINE_GLAPI *p_glCopyTexImage1D)( GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border );
        void       (WINE_GLAPI *p_glCopyTexImage2D)( GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border );
        void       (WINE_GLAPI *p_glCopyTexSubImage1D)( GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width );
        void       (WINE_GLAPI *p_glCopyTexSubImage2D)( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height );
        void       (WINE_GLAPI *p_glCullFace)( GLenum mode );
        void       (WINE_GLAPI *p_glDeleteLists)( GLuint list, GLsizei range );
        void       (WINE_GLAPI *p_glDeleteTextures)( GLsizei n, const GLuint *textures );
        void       (WINE_GLAPI *p_glDepthFunc)( GLenum func );
        void       (WINE_GLAPI *p_glDepthMask)( GLboolean flag );
        void       (WINE_GLAPI *p_glDepthRange)( GLdouble n, GLdouble f );
        void       (WINE_GLAPI *p_glDisable)( GLenum cap );
        void       (WINE_GLAPI *p_glDisableClientState)( GLenum array );
        void       (WINE_GLAPI *p_glDrawArrays)( GLenum mode, GLint first, GLsizei count );
        void       (WINE_GLAPI *p_glDrawBuffer)( GLenum buf );
        void       (WINE_GLAPI *p_glDrawElements)( GLenum mode, GLsizei count, GLenum type, const void *indices );
        void       (WINE_GLAPI *p_glDrawPixels)( GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels );
        void       (WINE_GLAPI *p_glEdgeFlag)( GLboolean flag );
        void       (WINE_GLAPI *p_glEdgeFlagPointer)( GLsizei stride, const void *pointer );
        void       (WINE_GLAPI *p_glEdgeFlagv)( const GLboolean *flag );
        void       (WINE_GLAPI *p_glEnable)( GLenum cap );
        void       (WINE_GLAPI *p_glEnableClientState)( GLenum array );
        void       (WINE_GLAPI *p_glEnd)(void);
        void       (WINE_GLAPI *p_glEndList)(void);
        void       (WINE_GLAPI *p_glEvalCoord1d)( GLdouble u );
        void       (WINE_GLAPI *p_glEvalCoord1dv)( const GLdouble *u );
        void       (WINE_GLAPI *p_glEvalCoord1f)( GLfloat u );
        void       (WINE_GLAPI *p_glEvalCoord1fv)( const GLfloat *u );
        void       (WINE_GLAPI *p_glEvalCoord2d)( GLdouble u, GLdouble v );
        void       (WINE_GLAPI *p_glEvalCoord2dv)( const GLdouble *u );
        void       (WINE_GLAPI *p_glEvalCoord2f)( GLfloat u, GLfloat v );
        void       (WINE_GLAPI *p_glEvalCoord2fv)( const GLfloat *u );
        void       (WINE_GLAPI *p_glEvalMesh1)( GLenum mode, GLint i1, GLint i2 );
        void       (WINE_GLAPI *p_glEvalMesh2)( GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2 );
        void       (WINE_GLAPI *p_glEvalPoint1)( GLint i );
        void       (WINE_GLAPI *p_glEvalPoint2)( GLint i, GLint j );
        void       (WINE_GLAPI *p_glFeedbackBuffer)( GLsizei size, GLenum type, GLfloat *buffer );
        void       (WINE_GLAPI *p_glFinish)(void);
        void       (WINE_GLAPI *p_glFlush)(void);
        void       (WINE_GLAPI *p_glFogf)( GLenum pname, GLfloat param );
        void       (WINE_GLAPI *p_glFogfv)( GLenum pname, const GLfloat *params );
        void       (WINE_GLAPI *p_glFogi)( GLenum pname, GLint param );
        void       (WINE_GLAPI *p_glFogiv)( GLenum pname, const GLint *params );
        void       (WINE_GLAPI *p_glFrontFace)( GLenum mode );
        void       (WINE_GLAPI *p_glFrustum)( GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar );
        GLuint     (WINE_GLAPI *p_glGenLists)( GLsizei range );
        void       (WINE_GLAPI *p_glGenTextures)( GLsizei n, GLuint *textures );
        void       (WINE_GLAPI *p_glGetBooleanv)( GLenum pname, GLboolean *data );
        void       (WINE_GLAPI *p_glGetClipPlane)( GLenum plane, GLdouble *equation );
        void       (WINE_GLAPI *p_glGetDoublev)( GLenum pname, GLdouble *data );
        GLenum     (WINE_GLAPI *p_glGetError)(void);
        void       (WINE_GLAPI *p_glGetFloatv)( GLenum pname, GLfloat *data );
        void       (WINE_GLAPI *p_glGetIntegerv)( GLenum pname, GLint *data );
        void       (WINE_GLAPI *p_glGetLightfv)( GLenum light, GLenum pname, GLfloat *params );
        void       (WINE_GLAPI *p_glGetLightiv)( GLenum light, GLenum pname, GLint *params );
        void       (WINE_GLAPI *p_glGetMapdv)( GLenum target, GLenum query, GLdouble *v );
        void       (WINE_GLAPI *p_glGetMapfv)( GLenum target, GLenum query, GLfloat *v );
        void       (WINE_GLAPI *p_glGetMapiv)( GLenum target, GLenum query, GLint *v );
        void       (WINE_GLAPI *p_glGetMaterialfv)( GLenum face, GLenum pname, GLfloat *params );
        void       (WINE_GLAPI *p_glGetMaterialiv)( GLenum face, GLenum pname, GLint *params );
        void       (WINE_GLAPI *p_glGetPixelMapfv)( GLenum map, GLfloat *values );
        void       (WINE_GLAPI *p_glGetPixelMapuiv)( GLenum map, GLuint *values );
        void       (WINE_GLAPI *p_glGetPixelMapusv)( GLenum map, GLushort *values );
        void       (WINE_GLAPI *p_glGetPointerv)( GLenum pname, void **params );
        void       (WINE_GLAPI *p_glGetPolygonStipple)( GLubyte *mask );
        const GLubyte * (WINE_GLAPI *p_glGetString)( GLenum name );
        void       (WINE_GLAPI *p_glGetTexEnvfv)( GLenum target, GLenum pname, GLfloat *params );
        void       (WINE_GLAPI *p_glGetTexEnviv)( GLenum target, GLenum pname, GLint *params );
        void       (WINE_GLAPI *p_glGetTexGendv)( GLenum coord, GLenum pname, GLdouble *params );
        void       (WINE_GLAPI *p_glGetTexGenfv)( GLenum coord, GLenum pname, GLfloat *params );
        void       (WINE_GLAPI *p_glGetTexGeniv)( GLenum coord, GLenum pname, GLint *params );
        void       (WINE_GLAPI *p_glGetTexImage)( GLenum target, GLint level, GLenum format, GLenum type, void *pixels );
        void       (WINE_GLAPI *p_glGetTexLevelParameterfv)( GLenum target, GLint level, GLenum pname, GLfloat *params );
        void       (WINE_GLAPI *p_glGetTexLevelParameteriv)( GLenum target, GLint level, GLenum pname, GLint *params );
        void       (WINE_GLAPI *p_glGetTexParameterfv)( GLenum target, GLenum pname, GLfloat *params );
        void       (WINE_GLAPI *p_glGetTexParameteriv)( GLenum target, GLenum pname, GLint *params );
        void       (WINE_GLAPI *p_glHint)( GLenum target, GLenum mode );
        void       (WINE_GLAPI *p_glIndexMask)( GLuint mask );
        void       (WINE_GLAPI *p_glIndexPointer)( GLenum type, GLsizei stride, const void *pointer );
        void       (WINE_GLAPI *p_glIndexd)( GLdouble c );
        void       (WINE_GLAPI *p_glIndexdv)( const GLdouble *c );
        void       (WINE_GLAPI *p_glIndexf)( GLfloat c );
        void       (WINE_GLAPI *p_glIndexfv)( const GLfloat *c );
        void       (WINE_GLAPI *p_glIndexi)( GLint c );
        void       (WINE_GLAPI *p_glIndexiv)( const GLint *c );
        void       (WINE_GLAPI *p_glIndexs)( GLshort c );
        void       (WINE_GLAPI *p_glIndexsv)( const GLshort *c );
        void       (WINE_GLAPI *p_glIndexub)( GLubyte c );
        void       (WINE_GLAPI *p_glIndexubv)( const GLubyte *c );
        void       (WINE_GLAPI *p_glInitNames)(void);
        void       (WINE_GLAPI *p_glInterleavedArrays)( GLenum format, GLsizei stride, const void *pointer );
        GLboolean  (WINE_GLAPI *p_glIsEnabled)( GLenum cap );
        GLboolean  (WINE_GLAPI *p_glIsList)( GLuint list );
        GLboolean  (WINE_GLAPI *p_glIsTexture)( GLuint texture );
        void       (WINE_GLAPI *p_glLightModelf)( GLenum pname, GLfloat param );
        void       (WINE_GLAPI *p_glLightModelfv)( GLenum pname, const GLfloat *params );
        void       (WINE_GLAPI *p_glLightModeli)( GLenum pname, GLint param );
        void       (WINE_GLAPI *p_glLightModeliv)( GLenum pname, const GLint *params );
        void       (WINE_GLAPI *p_glLightf)( GLenum light, GLenum pname, GLfloat param );
        void       (WINE_GLAPI *p_glLightfv)( GLenum light, GLenum pname, const GLfloat *params );
        void       (WINE_GLAPI *p_glLighti)( GLenum light, GLenum pname, GLint param );
        void       (WINE_GLAPI *p_glLightiv)( GLenum light, GLenum pname, const GLint *params );
        void       (WINE_GLAPI *p_glLineStipple)( GLint factor, GLushort pattern );
        void       (WINE_GLAPI *p_glLineWidth)( GLfloat width );
        void       (WINE_GLAPI *p_glListBase)( GLuint base );
        void       (WINE_GLAPI *p_glLoadIdentity)(void);
        void       (WINE_GLAPI *p_glLoadMatrixd)( const GLdouble *m );
        void       (WINE_GLAPI *p_glLoadMatrixf)( const GLfloat *m );
        void       (WINE_GLAPI *p_glLoadName)( GLuint name );
        void       (WINE_GLAPI *p_glLogicOp)( GLenum opcode );
        void       (WINE_GLAPI *p_glMap1d)( GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points );
        void       (WINE_GLAPI *p_glMap1f)( GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points );
        void       (WINE_GLAPI *p_glMap2d)( GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points );
        void       (WINE_GLAPI *p_glMap2f)( GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points );
        void       (WINE_GLAPI *p_glMapGrid1d)( GLint un, GLdouble u1, GLdouble u2 );
        void       (WINE_GLAPI *p_glMapGrid1f)( GLint un, GLfloat u1, GLfloat u2 );
        void       (WINE_GLAPI *p_glMapGrid2d)( GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2 );
        void       (WINE_GLAPI *p_glMapGrid2f)( GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2 );
        void       (WINE_GLAPI *p_glMaterialf)( GLenum face, GLenum pname, GLfloat param );
        void       (WINE_GLAPI *p_glMaterialfv)( GLenum face, GLenum pname, const GLfloat *params );
        void       (WINE_GLAPI *p_glMateriali)( GLenum face, GLenum pname, GLint param );
        void       (WINE_GLAPI *p_glMaterialiv)( GLenum face, GLenum pname, const GLint *params );
        void       (WINE_GLAPI *p_glMatrixMode)( GLenum mode );
        void       (WINE_GLAPI *p_glMultMatrixd)( const GLdouble *m );
        void       (WINE_GLAPI *p_glMultMatrixf)( const GLfloat *m );
        void       (WINE_GLAPI *p_glNewList)( GLuint list, GLenum mode );
        void       (WINE_GLAPI *p_glNormal3b)( GLbyte nx, GLbyte ny, GLbyte nz );
        void       (WINE_GLAPI *p_glNormal3bv)( const GLbyte *v );
        void       (WINE_GLAPI *p_glNormal3d)( GLdouble nx, GLdouble ny, GLdouble nz );
        void       (WINE_GLAPI *p_glNormal3dv)( const GLdouble *v );
        void       (WINE_GLAPI *p_glNormal3f)( GLfloat nx, GLfloat ny, GLfloat nz );
        void       (WINE_GLAPI *p_glNormal3fv)( const GLfloat *v );
        void       (WINE_GLAPI *p_glNormal3i)( GLint nx, GLint ny, GLint nz );
        void       (WINE_GLAPI *p_glNormal3iv)( const GLint *v );
        void       (WINE_GLAPI *p_glNormal3s)( GLshort nx, GLshort ny, GLshort nz );
        void       (WINE_GLAPI *p_glNormal3sv)( const GLshort *v );
        void       (WINE_GLAPI *p_glNormalPointer)( GLenum type, GLsizei stride, const void *pointer );
        void       (WINE_GLAPI *p_glOrtho)( GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar );
        void       (WINE_GLAPI *p_glPassThrough)( GLfloat token );
        void       (WINE_GLAPI *p_glPixelMapfv)( GLenum map, GLsizei mapsize, const GLfloat *values );
        void       (WINE_GLAPI *p_glPixelMapuiv)( GLenum map, GLsizei mapsize, const GLuint *values );
        void       (WINE_GLAPI *p_glPixelMapusv)( GLenum map, GLsizei mapsize, const GLushort *values );
        void       (WINE_GLAPI *p_glPixelStoref)( GLenum pname, GLfloat param );
        void       (WINE_GLAPI *p_glPixelStorei)( GLenum pname, GLint param );
        void       (WINE_GLAPI *p_glPixelTransferf)( GLenum pname, GLfloat param );
        void       (WINE_GLAPI *p_glPixelTransferi)( GLenum pname, GLint param );
        void       (WINE_GLAPI *p_glPixelZoom)( GLfloat xfactor, GLfloat yfactor );
        void       (WINE_GLAPI *p_glPointSize)( GLfloat size );
        void       (WINE_GLAPI *p_glPolygonMode)( GLenum face, GLenum mode );
        void       (WINE_GLAPI *p_glPolygonOffset)( GLfloat factor, GLfloat units );
        void       (WINE_GLAPI *p_glPolygonStipple)( const GLubyte *mask );
        void       (WINE_GLAPI *p_glPopAttrib)(void);
        void       (WINE_GLAPI *p_glPopClientAttrib)(void);
        void       (WINE_GLAPI *p_glPopMatrix)(void);
        void       (WINE_GLAPI *p_glPopName)(void);
        void       (WINE_GLAPI *p_glPrioritizeTextures)( GLsizei n, const GLuint *textures, const GLfloat *priorities );
        void       (WINE_GLAPI *p_glPushAttrib)( GLbitfield mask );
        void       (WINE_GLAPI *p_glPushClientAttrib)( GLbitfield mask );
        void       (WINE_GLAPI *p_glPushMatrix)(void);
        void       (WINE_GLAPI *p_glPushName)( GLuint name );
        void       (WINE_GLAPI *p_glRasterPos2d)( GLdouble x, GLdouble y );
        void       (WINE_GLAPI *p_glRasterPos2dv)( const GLdouble *v );
        void       (WINE_GLAPI *p_glRasterPos2f)( GLfloat x, GLfloat y );
        void       (WINE_GLAPI *p_glRasterPos2fv)( const GLfloat *v );
        void       (WINE_GLAPI *p_glRasterPos2i)( GLint x, GLint y );
        void       (WINE_GLAPI *p_glRasterPos2iv)( const GLint *v );
        void       (WINE_GLAPI *p_glRasterPos2s)( GLshort x, GLshort y );
        void       (WINE_GLAPI *p_glRasterPos2sv)( const GLshort *v );
        void       (WINE_GLAPI *p_glRasterPos3d)( GLdouble x, GLdouble y, GLdouble z );
        void       (WINE_GLAPI *p_glRasterPos3dv)( const GLdouble *v );
        void       (WINE_GLAPI *p_glRasterPos3f)( GLfloat x, GLfloat y, GLfloat z );
        void       (WINE_GLAPI *p_glRasterPos3fv)( const GLfloat *v );
        void       (WINE_GLAPI *p_glRasterPos3i)( GLint x, GLint y, GLint z );
        void       (WINE_GLAPI *p_glRasterPos3iv)( const GLint *v );
        void       (WINE_GLAPI *p_glRasterPos3s)( GLshort x, GLshort y, GLshort z );
        void       (WINE_GLAPI *p_glRasterPos3sv)( const GLshort *v );
        void       (WINE_GLAPI *p_glRasterPos4d)( GLdouble x, GLdouble y, GLdouble z, GLdouble w );
        void       (WINE_GLAPI *p_glRasterPos4dv)( const GLdouble *v );
        void       (WINE_GLAPI *p_glRasterPos4f)( GLfloat x, GLfloat y, GLfloat z, GLfloat w );
        void       (WINE_GLAPI *p_glRasterPos4fv)( const GLfloat *v );
        void       (WINE_GLAPI *p_glRasterPos4i)( GLint x, GLint y, GLint z, GLint w );
        void       (WINE_GLAPI *p_glRasterPos4iv)( const GLint *v );
        void       (WINE_GLAPI *p_glRasterPos4s)( GLshort x, GLshort y, GLshort z, GLshort w );
        void       (WINE_GLAPI *p_glRasterPos4sv)( const GLshort *v );
        void       (WINE_GLAPI *p_glReadBuffer)( GLenum src );
        void       (WINE_GLAPI *p_glReadPixels)( GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels );
        void       (WINE_GLAPI *p_glRectd)( GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2 );
        void       (WINE_GLAPI *p_glRectdv)( const GLdouble *v1, const GLdouble *v2 );
        void       (WINE_GLAPI *p_glRectf)( GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2 );
        void       (WINE_GLAPI *p_glRectfv)( const GLfloat *v1, const GLfloat *v2 );
        void       (WINE_GLAPI *p_glRecti)( GLint x1, GLint y1, GLint x2, GLint y2 );
        void       (WINE_GLAPI *p_glRectiv)( const GLint *v1, const GLint *v2 );
        void       (WINE_GLAPI *p_glRects)( GLshort x1, GLshort y1, GLshort x2, GLshort y2 );
        void       (WINE_GLAPI *p_glRectsv)( const GLshort *v1, const GLshort *v2 );
        GLint      (WINE_GLAPI *p_glRenderMode)( GLenum mode );
        void       (WINE_GLAPI *p_glRotated)( GLdouble angle, GLdouble x, GLdouble y, GLdouble z );
        void       (WINE_GLAPI *p_glRotatef)( GLfloat angle, GLfloat x, GLfloat y, GLfloat z );
        void       (WINE_GLAPI *p_glScaled)( GLdouble x, GLdouble y, GLdouble z );
        void       (WINE_GLAPI *p_glScalef)( GLfloat x, GLfloat y, GLfloat z );
        void       (WINE_GLAPI *p_glScissor)( GLint x, GLint y, GLsizei width, GLsizei height );
        void       (WINE_GLAPI *p_glSelectBuffer)( GLsizei size, GLuint *buffer );
        void       (WINE_GLAPI *p_glShadeModel)( GLenum mode );
        void       (WINE_GLAPI *p_glStencilFunc)( GLenum func, GLint ref, GLuint mask );
        void       (WINE_GLAPI *p_glStencilMask)( GLuint mask );
        void       (WINE_GLAPI *p_glStencilOp)( GLenum fail, GLenum zfail, GLenum zpass );
        void       (WINE_GLAPI *p_glTexCoord1d)( GLdouble s );
        void       (WINE_GLAPI *p_glTexCoord1dv)( const GLdouble *v );
        void       (WINE_GLAPI *p_glTexCoord1f)( GLfloat s );
        void       (WINE_GLAPI *p_glTexCoord1fv)( const GLfloat *v );
        void       (WINE_GLAPI *p_glTexCoord1i)( GLint s );
        void       (WINE_GLAPI *p_glTexCoord1iv)( const GLint *v );
        void       (WINE_GLAPI *p_glTexCoord1s)( GLshort s );
        void       (WINE_GLAPI *p_glTexCoord1sv)( const GLshort *v );
        void       (WINE_GLAPI *p_glTexCoord2d)( GLdouble s, GLdouble t );
        void       (WINE_GLAPI *p_glTexCoord2dv)( const GLdouble *v );
        void       (WINE_GLAPI *p_glTexCoord2f)( GLfloat s, GLfloat t );
        void       (WINE_GLAPI *p_glTexCoord2fv)( const GLfloat *v );
        void       (WINE_GLAPI *p_glTexCoord2i)( GLint s, GLint t );
        void       (WINE_GLAPI *p_glTexCoord2iv)( const GLint *v );
        void       (WINE_GLAPI *p_glTexCoord2s)( GLshort s, GLshort t );
        void       (WINE_GLAPI *p_glTexCoord2sv)( const GLshort *v );
        void       (WINE_GLAPI *p_glTexCoord3d)( GLdouble s, GLdouble t, GLdouble r );
        void       (WINE_GLAPI *p_glTexCoord3dv)( const GLdouble *v );
        void       (WINE_GLAPI *p_glTexCoord3f)( GLfloat s, GLfloat t, GLfloat r );
        void       (WINE_GLAPI *p_glTexCoord3fv)( const GLfloat *v );
        void       (WINE_GLAPI *p_glTexCoord3i)( GLint s, GLint t, GLint r );
        void       (WINE_GLAPI *p_glTexCoord3iv)( const GLint *v );
        void       (WINE_GLAPI *p_glTexCoord3s)( GLshort s, GLshort t, GLshort r );
        void       (WINE_GLAPI *p_glTexCoord3sv)( const GLshort *v );
        void       (WINE_GLAPI *p_glTexCoord4d)( GLdouble s, GLdouble t, GLdouble r, GLdouble q );
        void       (WINE_GLAPI *p_glTexCoord4dv)( const GLdouble *v );
        void       (WINE_GLAPI *p_glTexCoord4f)( GLfloat s, GLfloat t, GLfloat r, GLfloat q );
        void       (WINE_GLAPI *p_glTexCoord4fv)( const GLfloat *v );
        void       (WINE_GLAPI *p_glTexCoord4i)( GLint s, GLint t, GLint r, GLint q );
        void       (WINE_GLAPI *p_glTexCoord4iv)( const GLint *v );
        void       (WINE_GLAPI *p_glTexCoord4s)( GLshort s, GLshort t, GLshort r, GLshort q );
        void       (WINE_GLAPI *p_glTexCoord4sv)( const GLshort *v );
        void       (WINE_GLAPI *p_glTexCoordPointer)( GLint size, GLenum type, GLsizei stride, const void *pointer );
        void       (WINE_GLAPI *p_glTexEnvf)( GLenum target, GLenum pname, GLfloat param );
        void       (WINE_GLAPI *p_glTexEnvfv)( GLenum target, GLenum pname, const GLfloat *params );
        void       (WINE_GLAPI *p_glTexEnvi)( GLenum target, GLenum pname, GLint param );
        void       (WINE_GLAPI *p_glTexEnviv)( GLenum target, GLenum pname, const GLint *params );
        void       (WINE_GLAPI *p_glTexGend)( GLenum coord, GLenum pname, GLdouble param );
        void       (WINE_GLAPI *p_glTexGendv)( GLenum coord, GLenum pname, const GLdouble *params );
        void       (WINE_GLAPI *p_glTexGenf)( GLenum coord, GLenum pname, GLfloat param );
        void       (WINE_GLAPI *p_glTexGenfv)( GLenum coord, GLenum pname, const GLfloat *params );
        void       (WINE_GLAPI *p_glTexGeni)( GLenum coord, GLenum pname, GLint param );
        void       (WINE_GLAPI *p_glTexGeniv)( GLenum coord, GLenum pname, const GLint *params );
        void       (WINE_GLAPI *p_glTexImage1D)( GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels );
        void       (WINE_GLAPI *p_glTexImage2D)( GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels );
        void       (WINE_GLAPI *p_glTexParameterf)( GLenum target, GLenum pname, GLfloat param );
        void       (WINE_GLAPI *p_glTexParameterfv)( GLenum target, GLenum pname, const GLfloat *params );
        void       (WINE_GLAPI *p_glTexParameteri)( GLenum target, GLenum pname, GLint param );
        void       (WINE_GLAPI *p_glTexParameteriv)( GLenum target, GLenum pname, const GLint *params );
        void       (WINE_GLAPI *p_glTexSubImage1D)( GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels );
        void       (WINE_GLAPI *p_glTexSubImage2D)( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels );
        void       (WINE_GLAPI *p_glTranslated)( GLdouble x, GLdouble y, GLdouble z );
        void       (WINE_GLAPI *p_glTranslatef)( GLfloat x, GLfloat y, GLfloat z );
        void       (WINE_GLAPI *p_glVertex2d)( GLdouble x, GLdouble y );
        void       (WINE_GLAPI *p_glVertex2dv)( const GLdouble *v );
        void       (WINE_GLAPI *p_glVertex2f)( GLfloat x, GLfloat y );
        void       (WINE_GLAPI *p_glVertex2fv)( const GLfloat *v );
        void       (WINE_GLAPI *p_glVertex2i)( GLint x, GLint y );
        void       (WINE_GLAPI *p_glVertex2iv)( const GLint *v );
        void       (WINE_GLAPI *p_glVertex2s)( GLshort x, GLshort y );
        void       (WINE_GLAPI *p_glVertex2sv)( const GLshort *v );
        void       (WINE_GLAPI *p_glVertex3d)( GLdouble x, GLdouble y, GLdouble z );
        void       (WINE_GLAPI *p_glVertex3dv)( const GLdouble *v );
        void       (WINE_GLAPI *p_glVertex3f)( GLfloat x, GLfloat y, GLfloat z );
        void       (WINE_GLAPI *p_glVertex3fv)( const GLfloat *v );
        void       (WINE_GLAPI *p_glVertex3i)( GLint x, GLint y, GLint z );
        void       (WINE_GLAPI *p_glVertex3iv)( const GLint *v );
        void       (WINE_GLAPI *p_glVertex3s)( GLshort x, GLshort y, GLshort z );
        void       (WINE_GLAPI *p_glVertex3sv)( const GLshort *v );
        void       (WINE_GLAPI *p_glVertex4d)( GLdouble x, GLdouble y, GLdouble z, GLdouble w );
        void       (WINE_GLAPI *p_glVertex4dv)( const GLdouble *v );
        void       (WINE_GLAPI *p_glVertex4f)( GLfloat x, GLfloat y, GLfloat z, GLfloat w );
        void       (WINE_GLAPI *p_glVertex4fv)( const GLfloat *v );
        void       (WINE_GLAPI *p_glVertex4i)( GLint x, GLint y, GLint z, GLint w );
        void       (WINE_GLAPI *p_glVertex4iv)( const GLint *v );
        void       (WINE_GLAPI *p_glVertex4s)( GLshort x, GLshort y, GLshort z, GLshort w );
        void       (WINE_GLAPI *p_glVertex4sv)( const GLshort *v );
        void       (WINE_GLAPI *p_glVertexPointer)( GLint size, GLenum type, GLsizei stride, const void *pointer );
        void       (WINE_GLAPI *p_glViewport)( GLint x, GLint y, GLsizei width, GLsizei height );
    } gl;

    struct
    {
        void       (WINE_GLAPI *p_glAccumxOES)( GLenum op, GLfixed value );
        GLboolean  (WINE_GLAPI *p_glAcquireKeyedMutexWin32EXT)( GLuint memory, GLuint64 key, GLuint timeout );
        void       (WINE_GLAPI *p_glActiveProgramEXT)( GLuint program );
        void       (WINE_GLAPI *p_glActiveShaderProgram)( GLuint pipeline, GLuint program );
        void       (WINE_GLAPI *p_glActiveStencilFaceEXT)( GLenum face );
        void       (WINE_GLAPI *p_glActiveTexture)( GLenum texture );
        void       (WINE_GLAPI *p_glActiveTextureARB)( GLenum texture );
        void       (WINE_GLAPI *p_glActiveVaryingNV)( GLuint program, const GLchar *name );
        void       (WINE_GLAPI *p_glAlphaFragmentOp1ATI)( GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod );
        void       (WINE_GLAPI *p_glAlphaFragmentOp2ATI)( GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod );
        void       (WINE_GLAPI *p_glAlphaFragmentOp3ATI)( GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod );
        void       (WINE_GLAPI *p_glAlphaFuncxOES)( GLenum func, GLfixed ref );
        void       (WINE_GLAPI *p_glAlphaToCoverageDitherControlNV)( GLenum mode );
        void       (WINE_GLAPI *p_glApplyFramebufferAttachmentCMAAINTEL)(void);
        void       (WINE_GLAPI *p_glApplyTextureEXT)( GLenum mode );
        GLboolean  (WINE_GLAPI *p_glAreProgramsResidentNV)( GLsizei n, const GLuint *programs, GLboolean *residences );
        GLboolean  (WINE_GLAPI *p_glAreTexturesResidentEXT)( GLsizei n, const GLuint *textures, GLboolean *residences );
        void       (WINE_GLAPI *p_glArrayElementEXT)( GLint i );
        void       (WINE_GLAPI *p_glArrayObjectATI)( GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset );
        GLuint     (WINE_GLAPI *p_glAsyncCopyBufferSubDataNVX)( GLsizei waitSemaphoreCount, const GLuint *waitSemaphoreArray, const GLuint64 *fenceValueArray, GLuint readGpu, GLbitfield writeGpuMask, GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size, GLsizei signalSemaphoreCount, const GLuint *signalSemaphoreArray, const GLuint64 *signalValueArray );
        GLuint     (WINE_GLAPI *p_glAsyncCopyImageSubDataNVX)( GLsizei waitSemaphoreCount, const GLuint *waitSemaphoreArray, const GLuint64 *waitValueArray, GLuint srcGpu, GLbitfield dstGpuMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth, GLsizei signalSemaphoreCount, const GLuint *signalSemaphoreArray, const GLuint64 *signalValueArray );
        void       (WINE_GLAPI *p_glAsyncMarkerSGIX)( GLuint marker );
        void       (WINE_GLAPI *p_glAttachObjectARB)( GLhandleARB containerObj, GLhandleARB obj );
        void       (WINE_GLAPI *p_glAttachShader)( GLuint program, GLuint shader );
        void       (WINE_GLAPI *p_glBeginConditionalRender)( GLuint id, GLenum mode );
        void       (WINE_GLAPI *p_glBeginConditionalRenderNV)( GLuint id, GLenum mode );
        void       (WINE_GLAPI *p_glBeginConditionalRenderNVX)( GLuint id );
        void       (WINE_GLAPI *p_glBeginFragmentShaderATI)(void);
        void       (WINE_GLAPI *p_glBeginOcclusionQueryNV)( GLuint id );
        void       (WINE_GLAPI *p_glBeginPerfMonitorAMD)( GLuint monitor );
        void       (WINE_GLAPI *p_glBeginPerfQueryINTEL)( GLuint queryHandle );
        void       (WINE_GLAPI *p_glBeginQuery)( GLenum target, GLuint id );
        void       (WINE_GLAPI *p_glBeginQueryARB)( GLenum target, GLuint id );
        void       (WINE_GLAPI *p_glBeginQueryIndexed)( GLenum target, GLuint index, GLuint id );
        void       (WINE_GLAPI *p_glBeginTransformFeedback)( GLenum primitiveMode );
        void       (WINE_GLAPI *p_glBeginTransformFeedbackEXT)( GLenum primitiveMode );
        void       (WINE_GLAPI *p_glBeginTransformFeedbackNV)( GLenum primitiveMode );
        void       (WINE_GLAPI *p_glBeginVertexShaderEXT)(void);
        void       (WINE_GLAPI *p_glBeginVideoCaptureNV)( GLuint video_capture_slot );
        void       (WINE_GLAPI *p_glBindAttribLocation)( GLuint program, GLuint index, const GLchar *name );
        void       (WINE_GLAPI *p_glBindAttribLocationARB)( GLhandleARB programObj, GLuint index, const GLcharARB *name );
        void       (WINE_GLAPI *p_glBindBuffer)( GLenum target, GLuint buffer );
        void       (WINE_GLAPI *p_glBindBufferARB)( GLenum target, GLuint buffer );
        void       (WINE_GLAPI *p_glBindBufferBase)( GLenum target, GLuint index, GLuint buffer );
        void       (WINE_GLAPI *p_glBindBufferBaseEXT)( GLenum target, GLuint index, GLuint buffer );
        void       (WINE_GLAPI *p_glBindBufferBaseNV)( GLenum target, GLuint index, GLuint buffer );
        void       (WINE_GLAPI *p_glBindBufferOffsetEXT)( GLenum target, GLuint index, GLuint buffer, GLintptr offset );
        void       (WINE_GLAPI *p_glBindBufferOffsetNV)( GLenum target, GLuint index, GLuint buffer, GLintptr offset );
        void       (WINE_GLAPI *p_glBindBufferRange)( GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size );
        void       (WINE_GLAPI *p_glBindBufferRangeEXT)( GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size );
        void       (WINE_GLAPI *p_glBindBufferRangeNV)( GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size );
        void       (WINE_GLAPI *p_glBindBuffersBase)( GLenum target, GLuint first, GLsizei count, const GLuint *buffers );
        void       (WINE_GLAPI *p_glBindBuffersRange)( GLenum target, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizeiptr *sizes );
        void       (WINE_GLAPI *p_glBindFragDataLocation)( GLuint program, GLuint color, const GLchar *name );
        void       (WINE_GLAPI *p_glBindFragDataLocationEXT)( GLuint program, GLuint color, const GLchar *name );
        void       (WINE_GLAPI *p_glBindFragDataLocationIndexed)( GLuint program, GLuint colorNumber, GLuint index, const GLchar *name );
        void       (WINE_GLAPI *p_glBindFragmentShaderATI)( GLuint id );
        void       (WINE_GLAPI *p_glBindFramebuffer)( GLenum target, GLuint framebuffer );
        void       (WINE_GLAPI *p_glBindFramebufferEXT)( GLenum target, GLuint framebuffer );
        void       (WINE_GLAPI *p_glBindImageTexture)( GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format );
        void       (WINE_GLAPI *p_glBindImageTextureEXT)( GLuint index, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLint format );
        void       (WINE_GLAPI *p_glBindImageTextures)( GLuint first, GLsizei count, const GLuint *textures );
        GLuint     (WINE_GLAPI *p_glBindLightParameterEXT)( GLenum light, GLenum value );
        GLuint     (WINE_GLAPI *p_glBindMaterialParameterEXT)( GLenum face, GLenum value );
        void       (WINE_GLAPI *p_glBindMultiTextureEXT)( GLenum texunit, GLenum target, GLuint texture );
        GLuint     (WINE_GLAPI *p_glBindParameterEXT)( GLenum value );
        void       (WINE_GLAPI *p_glBindProgramARB)( GLenum target, GLuint program );
        void       (WINE_GLAPI *p_glBindProgramNV)( GLenum target, GLuint id );
        void       (WINE_GLAPI *p_glBindProgramPipeline)( GLuint pipeline );
        void       (WINE_GLAPI *p_glBindRenderbuffer)( GLenum target, GLuint renderbuffer );
        void       (WINE_GLAPI *p_glBindRenderbufferEXT)( GLenum target, GLuint renderbuffer );
        void       (WINE_GLAPI *p_glBindSampler)( GLuint unit, GLuint sampler );
        void       (WINE_GLAPI *p_glBindSamplers)( GLuint first, GLsizei count, const GLuint *samplers );
        void       (WINE_GLAPI *p_glBindShadingRateImageNV)( GLuint texture );
        GLuint     (WINE_GLAPI *p_glBindTexGenParameterEXT)( GLenum unit, GLenum coord, GLenum value );
        void       (WINE_GLAPI *p_glBindTextureEXT)( GLenum target, GLuint texture );
        void       (WINE_GLAPI *p_glBindTextureUnit)( GLuint unit, GLuint texture );
        GLuint     (WINE_GLAPI *p_glBindTextureUnitParameterEXT)( GLenum unit, GLenum value );
        void       (WINE_GLAPI *p_glBindTextures)( GLuint first, GLsizei count, const GLuint *textures );
        void       (WINE_GLAPI *p_glBindTransformFeedback)( GLenum target, GLuint id );
        void       (WINE_GLAPI *p_glBindTransformFeedbackNV)( GLenum target, GLuint id );
        void       (WINE_GLAPI *p_glBindVertexArray)( GLuint array );
        void       (WINE_GLAPI *p_glBindVertexArrayAPPLE)( GLuint array );
        void       (WINE_GLAPI *p_glBindVertexBuffer)( GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride );
        void       (WINE_GLAPI *p_glBindVertexBuffers)( GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides );
        void       (WINE_GLAPI *p_glBindVertexShaderEXT)( GLuint id );
        void       (WINE_GLAPI *p_glBindVideoCaptureStreamBufferNV)( GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLintptrARB offset );
        void       (WINE_GLAPI *p_glBindVideoCaptureStreamTextureNV)( GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLenum target, GLuint texture );
        void       (WINE_GLAPI *p_glBinormal3bEXT)( GLbyte bx, GLbyte by, GLbyte bz );
        void       (WINE_GLAPI *p_glBinormal3bvEXT)( const GLbyte *v );
        void       (WINE_GLAPI *p_glBinormal3dEXT)( GLdouble bx, GLdouble by, GLdouble bz );
        void       (WINE_GLAPI *p_glBinormal3dvEXT)( const GLdouble *v );
        void       (WINE_GLAPI *p_glBinormal3fEXT)( GLfloat bx, GLfloat by, GLfloat bz );
        void       (WINE_GLAPI *p_glBinormal3fvEXT)( const GLfloat *v );
        void       (WINE_GLAPI *p_glBinormal3iEXT)( GLint bx, GLint by, GLint bz );
        void       (WINE_GLAPI *p_glBinormal3ivEXT)( const GLint *v );
        void       (WINE_GLAPI *p_glBinormal3sEXT)( GLshort bx, GLshort by, GLshort bz );
        void       (WINE_GLAPI *p_glBinormal3svEXT)( const GLshort *v );
        void       (WINE_GLAPI *p_glBinormalPointerEXT)( GLenum type, GLsizei stride, const void *pointer );
        void       (WINE_GLAPI *p_glBitmapxOES)( GLsizei width, GLsizei height, GLfixed xorig, GLfixed yorig, GLfixed xmove, GLfixed ymove, const GLubyte *bitmap );
        void       (WINE_GLAPI *p_glBlendBarrierKHR)(void);
        void       (WINE_GLAPI *p_glBlendBarrierNV)(void);
        void       (WINE_GLAPI *p_glBlendColor)( GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha );
        void       (WINE_GLAPI *p_glBlendColorEXT)( GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha );
        void       (WINE_GLAPI *p_glBlendColorxOES)( GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha );
        void       (WINE_GLAPI *p_glBlendEquation)( GLenum mode );
        void       (WINE_GLAPI *p_glBlendEquationEXT)( GLenum mode );
        void       (WINE_GLAPI *p_glBlendEquationIndexedAMD)( GLuint buf, GLenum mode );
        void       (WINE_GLAPI *p_glBlendEquationSeparate)( GLenum modeRGB, GLenum modeAlpha );
        void       (WINE_GLAPI *p_glBlendEquationSeparateEXT)( GLenum modeRGB, GLenum modeAlpha );
        void       (WINE_GLAPI *p_glBlendEquationSeparateIndexedAMD)( GLuint buf, GLenum modeRGB, GLenum modeAlpha );
        void       (WINE_GLAPI *p_glBlendEquationSeparatei)( GLuint buf, GLenum modeRGB, GLenum modeAlpha );
        void       (WINE_GLAPI *p_glBlendEquationSeparateiARB)( GLuint buf, GLenum modeRGB, GLenum modeAlpha );
        void       (WINE_GLAPI *p_glBlendEquationi)( GLuint buf, GLenum mode );
        void       (WINE_GLAPI *p_glBlendEquationiARB)( GLuint buf, GLenum mode );
        void       (WINE_GLAPI *p_glBlendFuncIndexedAMD)( GLuint buf, GLenum src, GLenum dst );
        void       (WINE_GLAPI *p_glBlendFuncSeparate)( GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha );
        void       (WINE_GLAPI *p_glBlendFuncSeparateEXT)( GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha );
        void       (WINE_GLAPI *p_glBlendFuncSeparateINGR)( GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha );
        void       (WINE_GLAPI *p_glBlendFuncSeparateIndexedAMD)( GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha );
        void       (WINE_GLAPI *p_glBlendFuncSeparatei)( GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha );
        void       (WINE_GLAPI *p_glBlendFuncSeparateiARB)( GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha );
        void       (WINE_GLAPI *p_glBlendFunci)( GLuint buf, GLenum src, GLenum dst );
        void       (WINE_GLAPI *p_glBlendFunciARB)( GLuint buf, GLenum src, GLenum dst );
        void       (WINE_GLAPI *p_glBlendParameteriNV)( GLenum pname, GLint value );
        void       (WINE_GLAPI *p_glBlitFramebuffer)( GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter );
        void       (WINE_GLAPI *p_glBlitFramebufferEXT)( GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter );
        void       (WINE_GLAPI *p_glBlitNamedFramebuffer)( GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter );
        void       (WINE_GLAPI *p_glBufferAddressRangeNV)( GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length );
        void       (WINE_GLAPI *p_glBufferAttachMemoryNV)( GLenum target, GLuint memory, GLuint64 offset );
        void       (WINE_GLAPI *p_glBufferData)( GLenum target, GLsizeiptr size, const void *data, GLenum usage );
        void       (WINE_GLAPI *p_glBufferDataARB)( GLenum target, GLsizeiptrARB size, const void *data, GLenum usage );
        void       (WINE_GLAPI *p_glBufferPageCommitmentARB)( GLenum target, GLintptr offset, GLsizeiptr size, GLboolean commit );
        void       (WINE_GLAPI *p_glBufferParameteriAPPLE)( GLenum target, GLenum pname, GLint param );
        GLuint     (WINE_GLAPI *p_glBufferRegionEnabled)(void);
        void       (WINE_GLAPI *p_glBufferStorage)( GLenum target, GLsizeiptr size, const void *data, GLbitfield flags );
        void       (WINE_GLAPI *p_glBufferStorageExternalEXT)( GLenum target, GLintptr offset, GLsizeiptr size, GLeglClientBufferEXT clientBuffer, GLbitfield flags );
        void       (WINE_GLAPI *p_glBufferStorageMemEXT)( GLenum target, GLsizeiptr size, GLuint memory, GLuint64 offset );
        void       (WINE_GLAPI *p_glBufferSubData)( GLenum target, GLintptr offset, GLsizeiptr size, const void *data );
        void       (WINE_GLAPI *p_glBufferSubDataARB)( GLenum target, GLintptrARB offset, GLsizeiptrARB size, const void *data );
        void       (WINE_GLAPI *p_glCallCommandListNV)( GLuint list );
        GLenum     (WINE_GLAPI *p_glCheckFramebufferStatus)( GLenum target );
        GLenum     (WINE_GLAPI *p_glCheckFramebufferStatusEXT)( GLenum target );
        GLenum     (WINE_GLAPI *p_glCheckNamedFramebufferStatus)( GLuint framebuffer, GLenum target );
        GLenum     (WINE_GLAPI *p_glCheckNamedFramebufferStatusEXT)( GLuint framebuffer, GLenum target );
        void       (WINE_GLAPI *p_glClampColor)( GLenum target, GLenum clamp );
        void       (WINE_GLAPI *p_glClampColorARB)( GLenum target, GLenum clamp );
        void       (WINE_GLAPI *p_glClearAccumxOES)( GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha );
        void       (WINE_GLAPI *p_glClearBufferData)( GLenum target, GLenum internalformat, GLenum format, GLenum type, const void *data );
        void       (WINE_GLAPI *p_glClearBufferSubData)( GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data );
        void       (WINE_GLAPI *p_glClearBufferfi)( GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil );
        void       (WINE_GLAPI *p_glClearBufferfv)( GLenum buffer, GLint drawbuffer, const GLfloat *value );
        void       (WINE_GLAPI *p_glClearBufferiv)( GLenum buffer, GLint drawbuffer, const GLint *value );
        void       (WINE_GLAPI *p_glClearBufferuiv)( GLenum buffer, GLint drawbuffer, const GLuint *value );
        void       (WINE_GLAPI *p_glClearColorIiEXT)( GLint red, GLint green, GLint blue, GLint alpha );
        void       (WINE_GLAPI *p_glClearColorIuiEXT)( GLuint red, GLuint green, GLuint blue, GLuint alpha );
        void       (WINE_GLAPI *p_glClearColorxOES)( GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha );
        void       (WINE_GLAPI *p_glClearDepthdNV)( GLdouble depth );
        void       (WINE_GLAPI *p_glClearDepthf)( GLfloat d );
        void       (WINE_GLAPI *p_glClearDepthfOES)( GLclampf depth );
        void       (WINE_GLAPI *p_glClearDepthxOES)( GLfixed depth );
        void       (WINE_GLAPI *p_glClearNamedBufferData)( GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data );
        void       (WINE_GLAPI *p_glClearNamedBufferDataEXT)( GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data );
        void       (WINE_GLAPI *p_glClearNamedBufferSubData)( GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data );
        void       (WINE_GLAPI *p_glClearNamedBufferSubDataEXT)( GLuint buffer, GLenum internalformat, GLsizeiptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data );
        void       (WINE_GLAPI *p_glClearNamedFramebufferfi)( GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil );
        void       (WINE_GLAPI *p_glClearNamedFramebufferfv)( GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat *value );
        void       (WINE_GLAPI *p_glClearNamedFramebufferiv)( GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint *value );
        void       (WINE_GLAPI *p_glClearNamedFramebufferuiv)( GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint *value );
        void       (WINE_GLAPI *p_glClearTexImage)( GLuint texture, GLint level, GLenum format, GLenum type, const void *data );
        void       (WINE_GLAPI *p_glClearTexSubImage)( GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *data );
        void       (WINE_GLAPI *p_glClientActiveTexture)( GLenum texture );
        void       (WINE_GLAPI *p_glClientActiveTextureARB)( GLenum texture );
        void       (WINE_GLAPI *p_glClientActiveVertexStreamATI)( GLenum stream );
        void       (WINE_GLAPI *p_glClientAttribDefaultEXT)( GLbitfield mask );
        void       (WINE_GLAPI *p_glClientWaitSemaphoreui64NVX)( GLsizei fenceObjectCount, const GLuint *semaphoreArray, const GLuint64 *fenceValueArray );
        GLenum     (WINE_GLAPI *p_glClientWaitSync)( GLsync sync, GLbitfield flags, GLuint64 timeout );
        void       (WINE_GLAPI *p_glClipControl)( GLenum origin, GLenum depth );
        void       (WINE_GLAPI *p_glClipPlanefOES)( GLenum plane, const GLfloat *equation );
        void       (WINE_GLAPI *p_glClipPlanexOES)( GLenum plane, const GLfixed *equation );
        void       (WINE_GLAPI *p_glColor3fVertex3fSUN)( GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z );
        void       (WINE_GLAPI *p_glColor3fVertex3fvSUN)( const GLfloat *c, const GLfloat *v );
        void       (WINE_GLAPI *p_glColor3hNV)( GLhalfNV red, GLhalfNV green, GLhalfNV blue );
        void       (WINE_GLAPI *p_glColor3hvNV)( const GLhalfNV *v );
        void       (WINE_GLAPI *p_glColor3xOES)( GLfixed red, GLfixed green, GLfixed blue );
        void       (WINE_GLAPI *p_glColor3xvOES)( const GLfixed *components );
        void       (WINE_GLAPI *p_glColor4fNormal3fVertex3fSUN)( GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z );
        void       (WINE_GLAPI *p_glColor4fNormal3fVertex3fvSUN)( const GLfloat *c, const GLfloat *n, const GLfloat *v );
        void       (WINE_GLAPI *p_glColor4hNV)( GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha );
        void       (WINE_GLAPI *p_glColor4hvNV)( const GLhalfNV *v );
        void       (WINE_GLAPI *p_glColor4ubVertex2fSUN)( GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y );
        void       (WINE_GLAPI *p_glColor4ubVertex2fvSUN)( const GLubyte *c, const GLfloat *v );
        void       (WINE_GLAPI *p_glColor4ubVertex3fSUN)( GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z );
        void       (WINE_GLAPI *p_glColor4ubVertex3fvSUN)( const GLubyte *c, const GLfloat *v );
        void       (WINE_GLAPI *p_glColor4xOES)( GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha );
        void       (WINE_GLAPI *p_glColor4xvOES)( const GLfixed *components );
        void       (WINE_GLAPI *p_glColorFormatNV)( GLint size, GLenum type, GLsizei stride );
        void       (WINE_GLAPI *p_glColorFragmentOp1ATI)( GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod );
        void       (WINE_GLAPI *p_glColorFragmentOp2ATI)( GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod );
        void       (WINE_GLAPI *p_glColorFragmentOp3ATI)( GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod );
        void       (WINE_GLAPI *p_glColorMaskIndexedEXT)( GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a );
        void       (WINE_GLAPI *p_glColorMaski)( GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a );
        void       (WINE_GLAPI *p_glColorP3ui)( GLenum type, GLuint color );
        void       (WINE_GLAPI *p_glColorP3uiv)( GLenum type, const GLuint *color );
        void       (WINE_GLAPI *p_glColorP4ui)( GLenum type, GLuint color );
        void       (WINE_GLAPI *p_glColorP4uiv)( GLenum type, const GLuint *color );
        void       (WINE_GLAPI *p_glColorPointerEXT)( GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer );
        void       (WINE_GLAPI *p_glColorPointerListIBM)( GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride );
        void       (WINE_GLAPI *p_glColorPointervINTEL)( GLint size, GLenum type, const void **pointer );
        void       (WINE_GLAPI *p_glColorSubTable)( GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void *data );
        void       (WINE_GLAPI *p_glColorSubTableEXT)( GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void *data );
        void       (WINE_GLAPI *p_glColorTable)( GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *table );
        void       (WINE_GLAPI *p_glColorTableEXT)( GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const void *table );
        void       (WINE_GLAPI *p_glColorTableParameterfv)( GLenum target, GLenum pname, const GLfloat *params );
        void       (WINE_GLAPI *p_glColorTableParameterfvSGI)( GLenum target, GLenum pname, const GLfloat *params );
        void       (WINE_GLAPI *p_glColorTableParameteriv)( GLenum target, GLenum pname, const GLint *params );
        void       (WINE_GLAPI *p_glColorTableParameterivSGI)( GLenum target, GLenum pname, const GLint *params );
        void       (WINE_GLAPI *p_glColorTableSGI)( GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *table );
        void       (WINE_GLAPI *p_glCombinerInputNV)( GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage );
        void       (WINE_GLAPI *p_glCombinerOutputNV)( GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum );
        void       (WINE_GLAPI *p_glCombinerParameterfNV)( GLenum pname, GLfloat param );
        void       (WINE_GLAPI *p_glCombinerParameterfvNV)( GLenum pname, const GLfloat *params );
        void       (WINE_GLAPI *p_glCombinerParameteriNV)( GLenum pname, GLint param );
        void       (WINE_GLAPI *p_glCombinerParameterivNV)( GLenum pname, const GLint *params );
        void       (WINE_GLAPI *p_glCombinerStageParameterfvNV)( GLenum stage, GLenum pname, const GLfloat *params );
        void       (WINE_GLAPI *p_glCommandListSegmentsNV)( GLuint list, GLuint segments );
        void       (WINE_GLAPI *p_glCompileCommandListNV)( GLuint list );
        void       (WINE_GLAPI *p_glCompileShader)( GLuint shader );
        void       (WINE_GLAPI *p_glCompileShaderARB)( GLhandleARB shaderObj );
        void       (WINE_GLAPI *p_glCompileShaderIncludeARB)( GLuint shader, GLsizei count, const GLchar *const*path, const GLint *length );
        void       (WINE_GLAPI *p_glCompressedMultiTexImage1DEXT)( GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *bits );
        void       (WINE_GLAPI *p_glCompressedMultiTexImage2DEXT)( GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *bits );
        void       (WINE_GLAPI *p_glCompressedMultiTexImage3DEXT)( GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *bits );
        void       (WINE_GLAPI *p_glCompressedMultiTexSubImage1DEXT)( GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *bits );
        void       (WINE_GLAPI *p_glCompressedMultiTexSubImage2DEXT)( GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *bits );
        void       (WINE_GLAPI *p_glCompressedMultiTexSubImage3DEXT)( GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *bits );
        void       (WINE_GLAPI *p_glCompressedTexImage1D)( GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data );
        void       (WINE_GLAPI *p_glCompressedTexImage1DARB)( GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data );
        void       (WINE_GLAPI *p_glCompressedTexImage2D)( GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data );
        void       (WINE_GLAPI *p_glCompressedTexImage2DARB)( GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data );
        void       (WINE_GLAPI *p_glCompressedTexImage3D)( GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data );
        void       (WINE_GLAPI *p_glCompressedTexImage3DARB)( GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data );
        void       (WINE_GLAPI *p_glCompressedTexSubImage1D)( GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data );
        void       (WINE_GLAPI *p_glCompressedTexSubImage1DARB)( GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data );
        void       (WINE_GLAPI *p_glCompressedTexSubImage2D)( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data );
        void       (WINE_GLAPI *p_glCompressedTexSubImage2DARB)( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data );
        void       (WINE_GLAPI *p_glCompressedTexSubImage3D)( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data );
        void       (WINE_GLAPI *p_glCompressedTexSubImage3DARB)( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data );
        void       (WINE_GLAPI *p_glCompressedTextureImage1DEXT)( GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *bits );
        void       (WINE_GLAPI *p_glCompressedTextureImage2DEXT)( GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *bits );
        void       (WINE_GLAPI *p_glCompressedTextureImage3DEXT)( GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *bits );
        void       (WINE_GLAPI *p_glCompressedTextureSubImage1D)( GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data );
        void       (WINE_GLAPI *p_glCompressedTextureSubImage1DEXT)( GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *bits );
        void       (WINE_GLAPI *p_glCompressedTextureSubImage2D)( GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data );
        void       (WINE_GLAPI *p_glCompressedTextureSubImage2DEXT)( GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *bits );
        void       (WINE_GLAPI *p_glCompressedTextureSubImage3D)( GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data );
        void       (WINE_GLAPI *p_glCompressedTextureSubImage3DEXT)( GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *bits );
        void       (WINE_GLAPI *p_glConservativeRasterParameterfNV)( GLenum pname, GLfloat value );
        void       (WINE_GLAPI *p_glConservativeRasterParameteriNV)( GLenum pname, GLint param );
        void       (WINE_GLAPI *p_glConvolutionFilter1D)( GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *image );
        void       (WINE_GLAPI *p_glConvolutionFilter1DEXT)( GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *image );
        void       (WINE_GLAPI *p_glConvolutionFilter2D)( GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *image );
        void       (WINE_GLAPI *p_glConvolutionFilter2DEXT)( GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *image );
        void       (WINE_GLAPI *p_glConvolutionParameterf)( GLenum target, GLenum pname, GLfloat params );
        void       (WINE_GLAPI *p_glConvolutionParameterfEXT)( GLenum target, GLenum pname, GLfloat params );
        void       (WINE_GLAPI *p_glConvolutionParameterfv)( GLenum target, GLenum pname, const GLfloat *params );
        void       (WINE_GLAPI *p_glConvolutionParameterfvEXT)( GLenum target, GLenum pname, const GLfloat *params );
        void       (WINE_GLAPI *p_glConvolutionParameteri)( GLenum target, GLenum pname, GLint params );
        void       (WINE_GLAPI *p_glConvolutionParameteriEXT)( GLenum target, GLenum pname, GLint params );
        void       (WINE_GLAPI *p_glConvolutionParameteriv)( GLenum target, GLenum pname, const GLint *params );
        void       (WINE_GLAPI *p_glConvolutionParameterivEXT)( GLenum target, GLenum pname, const GLint *params );
        void       (WINE_GLAPI *p_glConvolutionParameterxOES)( GLenum target, GLenum pname, GLfixed param );
        void       (WINE_GLAPI *p_glConvolutionParameterxvOES)( GLenum target, GLenum pname, const GLfixed *params );
        void       (WINE_GLAPI *p_glCopyBufferSubData)( GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size );
        void       (WINE_GLAPI *p_glCopyColorSubTable)( GLenum target, GLsizei start, GLint x, GLint y, GLsizei width );
        void       (WINE_GLAPI *p_glCopyColorSubTableEXT)( GLenum target, GLsizei start, GLint x, GLint y, GLsizei width );
        void       (WINE_GLAPI *p_glCopyColorTable)( GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width );
        void       (WINE_GLAPI *p_glCopyColorTableSGI)( GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width );
        void       (WINE_GLAPI *p_glCopyConvolutionFilter1D)( GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width );
        void       (WINE_GLAPI *p_glCopyConvolutionFilter1DEXT)( GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width );
        void       (WINE_GLAPI *p_glCopyConvolutionFilter2D)( GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height );
        void       (WINE_GLAPI *p_glCopyConvolutionFilter2DEXT)( GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height );
        void       (WINE_GLAPI *p_glCopyImageSubData)( GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth );
        void       (WINE_GLAPI *p_glCopyImageSubDataNV)( GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth );
        void       (WINE_GLAPI *p_glCopyMultiTexImage1DEXT)( GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border );
        void       (WINE_GLAPI *p_glCopyMultiTexImage2DEXT)( GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border );
        void       (WINE_GLAPI *p_glCopyMultiTexSubImage1DEXT)( GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width );
        void       (WINE_GLAPI *p_glCopyMultiTexSubImage2DEXT)( GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height );
        void       (WINE_GLAPI *p_glCopyMultiTexSubImage3DEXT)( GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height );
        void       (WINE_GLAPI *p_glCopyNamedBufferSubData)( GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size );
        void       (WINE_GLAPI *p_glCopyPathNV)( GLuint resultPath, GLuint srcPath );
        void       (WINE_GLAPI *p_glCopyTexImage1DEXT)( GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border );
        void       (WINE_GLAPI *p_glCopyTexImage2DEXT)( GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border );
        void       (WINE_GLAPI *p_glCopyTexSubImage1DEXT)( GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width );
        void       (WINE_GLAPI *p_glCopyTexSubImage2DEXT)( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height );
        void       (WINE_GLAPI *p_glCopyTexSubImage3D)( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height );
        void       (WINE_GLAPI *p_glCopyTexSubImage3DEXT)( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height );
        void       (WINE_GLAPI *p_glCopyTextureImage1DEXT)( GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border );
        void       (WINE_GLAPI *p_glCopyTextureImage2DEXT)( GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border );
        void       (WINE_GLAPI *p_glCopyTextureSubImage1D)( GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width );
        void       (WINE_GLAPI *p_glCopyTextureSubImage1DEXT)( GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width );
        void       (WINE_GLAPI *p_glCopyTextureSubImage2D)( GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height );
        void       (WINE_GLAPI *p_glCopyTextureSubImage2DEXT)( GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height );
        void       (WINE_GLAPI *p_glCopyTextureSubImage3D)( GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height );
        void       (WINE_GLAPI *p_glCopyTextureSubImage3DEXT)( GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height );
        void       (WINE_GLAPI *p_glCoverFillPathInstancedNV)( GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues );
        void       (WINE_GLAPI *p_glCoverFillPathNV)( GLuint path, GLenum coverMode );
        void       (WINE_GLAPI *p_glCoverStrokePathInstancedNV)( GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues );
        void       (WINE_GLAPI *p_glCoverStrokePathNV)( GLuint path, GLenum coverMode );
        void       (WINE_GLAPI *p_glCoverageModulationNV)( GLenum components );
        void       (WINE_GLAPI *p_glCoverageModulationTableNV)( GLsizei n, const GLfloat *v );
        void       (WINE_GLAPI *p_glCreateBuffers)( GLsizei n, GLuint *buffers );
        void       (WINE_GLAPI *p_glCreateCommandListsNV)( GLsizei n, GLuint *lists );
        void       (WINE_GLAPI *p_glCreateFramebuffers)( GLsizei n, GLuint *framebuffers );
        void       (WINE_GLAPI *p_glCreateMemoryObjectsEXT)( GLsizei n, GLuint *memoryObjects );
        void       (WINE_GLAPI *p_glCreatePerfQueryINTEL)( GLuint queryId, GLuint *queryHandle );
        GLuint     (WINE_GLAPI *p_glCreateProgram)(void);
        GLhandleARB (WINE_GLAPI *p_glCreateProgramObjectARB)(void);
        void       (WINE_GLAPI *p_glCreateProgramPipelines)( GLsizei n, GLuint *pipelines );
        GLuint     (WINE_GLAPI *p_glCreateProgressFenceNVX)(void);
        void       (WINE_GLAPI *p_glCreateQueries)( GLenum target, GLsizei n, GLuint *ids );
        void       (WINE_GLAPI *p_glCreateRenderbuffers)( GLsizei n, GLuint *renderbuffers );
        void       (WINE_GLAPI *p_glCreateSamplers)( GLsizei n, GLuint *samplers );
        GLuint     (WINE_GLAPI *p_glCreateShader)( GLenum type );
        GLhandleARB (WINE_GLAPI *p_glCreateShaderObjectARB)( GLenum shaderType );
        GLuint     (WINE_GLAPI *p_glCreateShaderProgramEXT)( GLenum type, const GLchar *string );
        GLuint     (WINE_GLAPI *p_glCreateShaderProgramv)( GLenum type, GLsizei count, const GLchar *const*strings );
        void       (WINE_GLAPI *p_glCreateStatesNV)( GLsizei n, GLuint *states );
        GLsync     (WINE_GLAPI *p_glCreateSyncFromCLeventARB)( struct _cl_context *context, struct _cl_event *event, GLbitfield flags );
        void       (WINE_GLAPI *p_glCreateTextures)( GLenum target, GLsizei n, GLuint *textures );
        void       (WINE_GLAPI *p_glCreateTransformFeedbacks)( GLsizei n, GLuint *ids );
        void       (WINE_GLAPI *p_glCreateVertexArrays)( GLsizei n, GLuint *arrays );
        void       (WINE_GLAPI *p_glCullParameterdvEXT)( GLenum pname, GLdouble *params );
        void       (WINE_GLAPI *p_glCullParameterfvEXT)( GLenum pname, GLfloat *params );
        void       (WINE_GLAPI *p_glCurrentPaletteMatrixARB)( GLint index );
        void       (WINE_GLAPI *p_glDebugMessageCallback)( GLDEBUGPROC callback, const void *userParam );
        void       (WINE_GLAPI *p_glDebugMessageCallbackAMD)( GLDEBUGPROCAMD callback, void *userParam );
        void       (WINE_GLAPI *p_glDebugMessageCallbackARB)( GLDEBUGPROCARB callback, const void *userParam );
        void       (WINE_GLAPI *p_glDebugMessageControl)( GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled );
        void       (WINE_GLAPI *p_glDebugMessageControlARB)( GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled );
        void       (WINE_GLAPI *p_glDebugMessageEnableAMD)( GLenum category, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled );
        void       (WINE_GLAPI *p_glDebugMessageInsert)( GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf );
        void       (WINE_GLAPI *p_glDebugMessageInsertAMD)( GLenum category, GLenum severity, GLuint id, GLsizei length, const GLchar *buf );
        void       (WINE_GLAPI *p_glDebugMessageInsertARB)( GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf );
        void       (WINE_GLAPI *p_glDeformSGIX)( GLbitfield mask );
        void       (WINE_GLAPI *p_glDeformationMap3dSGIX)( GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, const GLdouble *points );
        void       (WINE_GLAPI *p_glDeformationMap3fSGIX)( GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, const GLfloat *points );
        void       (WINE_GLAPI *p_glDeleteAsyncMarkersSGIX)( GLuint marker, GLsizei range );
        void       (WINE_GLAPI *p_glDeleteBufferRegion)( GLenum region );
        void       (WINE_GLAPI *p_glDeleteBuffers)( GLsizei n, const GLuint *buffers );
        void       (WINE_GLAPI *p_glDeleteBuffersARB)( GLsizei n, const GLuint *buffers );
        void       (WINE_GLAPI *p_glDeleteCommandListsNV)( GLsizei n, const GLuint *lists );
        void       (WINE_GLAPI *p_glDeleteFencesAPPLE)( GLsizei n, const GLuint *fences );
        void       (WINE_GLAPI *p_glDeleteFencesNV)( GLsizei n, const GLuint *fences );
        void       (WINE_GLAPI *p_glDeleteFragmentShaderATI)( GLuint id );
        void       (WINE_GLAPI *p_glDeleteFramebuffers)( GLsizei n, const GLuint *framebuffers );
        void       (WINE_GLAPI *p_glDeleteFramebuffersEXT)( GLsizei n, const GLuint *framebuffers );
        void       (WINE_GLAPI *p_glDeleteMemoryObjectsEXT)( GLsizei n, const GLuint *memoryObjects );
        void       (WINE_GLAPI *p_glDeleteNamedStringARB)( GLint namelen, const GLchar *name );
        void       (WINE_GLAPI *p_glDeleteNamesAMD)( GLenum identifier, GLuint num, const GLuint *names );
        void       (WINE_GLAPI *p_glDeleteObjectARB)( GLhandleARB obj );
        void       (WINE_GLAPI *p_glDeleteObjectBufferATI)( GLuint buffer );
        void       (WINE_GLAPI *p_glDeleteOcclusionQueriesNV)( GLsizei n, const GLuint *ids );
        void       (WINE_GLAPI *p_glDeletePathsNV)( GLuint path, GLsizei range );
        void       (WINE_GLAPI *p_glDeletePerfMonitorsAMD)( GLsizei n, GLuint *monitors );
        void       (WINE_GLAPI *p_glDeletePerfQueryINTEL)( GLuint queryHandle );
        void       (WINE_GLAPI *p_glDeleteProgram)( GLuint program );
        void       (WINE_GLAPI *p_glDeleteProgramPipelines)( GLsizei n, const GLuint *pipelines );
        void       (WINE_GLAPI *p_glDeleteProgramsARB)( GLsizei n, const GLuint *programs );
        void       (WINE_GLAPI *p_glDeleteProgramsNV)( GLsizei n, const GLuint *programs );
        void       (WINE_GLAPI *p_glDeleteQueries)( GLsizei n, const GLuint *ids );
        void       (WINE_GLAPI *p_glDeleteQueriesARB)( GLsizei n, const GLuint *ids );
        void       (WINE_GLAPI *p_glDeleteQueryResourceTagNV)( GLsizei n, const GLint *tagIds );
        void       (WINE_GLAPI *p_glDeleteRenderbuffers)( GLsizei n, const GLuint *renderbuffers );
        void       (WINE_GLAPI *p_glDeleteRenderbuffersEXT)( GLsizei n, const GLuint *renderbuffers );
        void       (WINE_GLAPI *p_glDeleteSamplers)( GLsizei count, const GLuint *samplers );
        void       (WINE_GLAPI *p_glDeleteSemaphoresEXT)( GLsizei n, const GLuint *semaphores );
        void       (WINE_GLAPI *p_glDeleteShader)( GLuint shader );
        void       (WINE_GLAPI *p_glDeleteStatesNV)( GLsizei n, const GLuint *states );
        void       (WINE_GLAPI *p_glDeleteSync)( GLsync sync );
        void       (WINE_GLAPI *p_glDeleteTexturesEXT)( GLsizei n, const GLuint *textures );
        void       (WINE_GLAPI *p_glDeleteTransformFeedbacks)( GLsizei n, const GLuint *ids );
        void       (WINE_GLAPI *p_glDeleteTransformFeedbacksNV)( GLsizei n, const GLuint *ids );
        void       (WINE_GLAPI *p_glDeleteVertexArrays)( GLsizei n, const GLuint *arrays );
        void       (WINE_GLAPI *p_glDeleteVertexArraysAPPLE)( GLsizei n, const GLuint *arrays );
        void       (WINE_GLAPI *p_glDeleteVertexShaderEXT)( GLuint id );
        void       (WINE_GLAPI *p_glDepthBoundsEXT)( GLclampd zmin, GLclampd zmax );
        void       (WINE_GLAPI *p_glDepthBoundsdNV)( GLdouble zmin, GLdouble zmax );
        void       (WINE_GLAPI *p_glDepthRangeArraydvNV)( GLuint first, GLsizei count, const GLdouble *v );
        void       (WINE_GLAPI *p_glDepthRangeArrayv)( GLuint first, GLsizei count, const GLdouble *v );
        void       (WINE_GLAPI *p_glDepthRangeIndexed)( GLuint index, GLdouble n, GLdouble f );
        void       (WINE_GLAPI *p_glDepthRangeIndexeddNV)( GLuint index, GLdouble n, GLdouble f );
        void       (WINE_GLAPI *p_glDepthRangedNV)( GLdouble zNear, GLdouble zFar );
        void       (WINE_GLAPI *p_glDepthRangef)( GLfloat n, GLfloat f );
        void       (WINE_GLAPI *p_glDepthRangefOES)( GLclampf n, GLclampf f );
        void       (WINE_GLAPI *p_glDepthRangexOES)( GLfixed n, GLfixed f );
        void       (WINE_GLAPI *p_glDetachObjectARB)( GLhandleARB containerObj, GLhandleARB attachedObj );
        void       (WINE_GLAPI *p_glDetachShader)( GLuint program, GLuint shader );
        void       (WINE_GLAPI *p_glDetailTexFuncSGIS)( GLenum target, GLsizei n, const GLfloat *points );
        void       (WINE_GLAPI *p_glDisableClientStateIndexedEXT)( GLenum array, GLuint index );
        void       (WINE_GLAPI *p_glDisableClientStateiEXT)( GLenum array, GLuint index );
        void       (WINE_GLAPI *p_glDisableIndexedEXT)( GLenum target, GLuint index );
        void       (WINE_GLAPI *p_glDisableVariantClientStateEXT)( GLuint id );
        void       (WINE_GLAPI *p_glDisableVertexArrayAttrib)( GLuint vaobj, GLuint index );
        void       (WINE_GLAPI *p_glDisableVertexArrayAttribEXT)( GLuint vaobj, GLuint index );
        void       (WINE_GLAPI *p_glDisableVertexArrayEXT)( GLuint vaobj, GLenum array );
        void       (WINE_GLAPI *p_glDisableVertexAttribAPPLE)( GLuint index, GLenum pname );
        void       (WINE_GLAPI *p_glDisableVertexAttribArray)( GLuint index );
        void       (WINE_GLAPI *p_glDisableVertexAttribArrayARB)( GLuint index );
        void       (WINE_GLAPI *p_glDisablei)( GLenum target, GLuint index );
        void       (WINE_GLAPI *p_glDispatchCompute)( GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z );
        void       (WINE_GLAPI *p_glDispatchComputeGroupSizeARB)( GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z );
        void       (WINE_GLAPI *p_glDispatchComputeIndirect)( GLintptr indirect );
        void       (WINE_GLAPI *p_glDrawArraysEXT)( GLenum mode, GLint first, GLsizei count );
        void       (WINE_GLAPI *p_glDrawArraysIndirect)( GLenum mode, const void *indirect );
        void       (WINE_GLAPI *p_glDrawArraysInstanced)( GLenum mode, GLint first, GLsizei count, GLsizei instancecount );
        void       (WINE_GLAPI *p_glDrawArraysInstancedARB)( GLenum mode, GLint first, GLsizei count, GLsizei primcount );
        void       (WINE_GLAPI *p_glDrawArraysInstancedBaseInstance)( GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance );
        void       (WINE_GLAPI *p_glDrawArraysInstancedEXT)( GLenum mode, GLint start, GLsizei count, GLsizei primcount );
        void       (WINE_GLAPI *p_glDrawBufferRegion)( GLenum region, GLint x, GLint y, GLsizei width, GLsizei height, GLint xDest, GLint yDest );
        void       (WINE_GLAPI *p_glDrawBuffers)( GLsizei n, const GLenum *bufs );
        void       (WINE_GLAPI *p_glDrawBuffersARB)( GLsizei n, const GLenum *bufs );
        void       (WINE_GLAPI *p_glDrawBuffersATI)( GLsizei n, const GLenum *bufs );
        void       (WINE_GLAPI *p_glDrawCommandsAddressNV)( GLenum primitiveMode, const GLuint64 *indirects, const GLsizei *sizes, GLuint count );
        void       (WINE_GLAPI *p_glDrawCommandsNV)( GLenum primitiveMode, GLuint buffer, const GLintptr *indirects, const GLsizei *sizes, GLuint count );
        void       (WINE_GLAPI *p_glDrawCommandsStatesAddressNV)( const GLuint64 *indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count );
        void       (WINE_GLAPI *p_glDrawCommandsStatesNV)( GLuint buffer, const GLintptr *indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count );
        void       (WINE_GLAPI *p_glDrawElementArrayAPPLE)( GLenum mode, GLint first, GLsizei count );
        void       (WINE_GLAPI *p_glDrawElementArrayATI)( GLenum mode, GLsizei count );
        void       (WINE_GLAPI *p_glDrawElementsBaseVertex)( GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex );
        void       (WINE_GLAPI *p_glDrawElementsIndirect)( GLenum mode, GLenum type, const void *indirect );
        void       (WINE_GLAPI *p_glDrawElementsInstanced)( GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount );
        void       (WINE_GLAPI *p_glDrawElementsInstancedARB)( GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount );
        void       (WINE_GLAPI *p_glDrawElementsInstancedBaseInstance)( GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance );
        void       (WINE_GLAPI *p_glDrawElementsInstancedBaseVertex)( GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex );
        void       (WINE_GLAPI *p_glDrawElementsInstancedBaseVertexBaseInstance)( GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance );
        void       (WINE_GLAPI *p_glDrawElementsInstancedEXT)( GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount );
        void       (WINE_GLAPI *p_glDrawMeshArraysSUN)( GLenum mode, GLint first, GLsizei count, GLsizei width );
        void       (WINE_GLAPI *p_glDrawMeshTasksIndirectNV)( GLintptr indirect );
        void       (WINE_GLAPI *p_glDrawMeshTasksNV)( GLuint first, GLuint count );
        void       (WINE_GLAPI *p_glDrawRangeElementArrayAPPLE)( GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count );
        void       (WINE_GLAPI *p_glDrawRangeElementArrayATI)( GLenum mode, GLuint start, GLuint end, GLsizei count );
        void       (WINE_GLAPI *p_glDrawRangeElements)( GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices );
        void       (WINE_GLAPI *p_glDrawRangeElementsBaseVertex)( GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex );
        void       (WINE_GLAPI *p_glDrawRangeElementsEXT)( GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices );
        void       (WINE_GLAPI *p_glDrawTextureNV)( GLuint texture, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1 );
        void       (WINE_GLAPI *p_glDrawTransformFeedback)( GLenum mode, GLuint id );
        void       (WINE_GLAPI *p_glDrawTransformFeedbackInstanced)( GLenum mode, GLuint id, GLsizei instancecount );
        void       (WINE_GLAPI *p_glDrawTransformFeedbackNV)( GLenum mode, GLuint id );
        void       (WINE_GLAPI *p_glDrawTransformFeedbackStream)( GLenum mode, GLuint id, GLuint stream );
        void       (WINE_GLAPI *p_glDrawTransformFeedbackStreamInstanced)( GLenum mode, GLuint id, GLuint stream, GLsizei instancecount );
        void       (WINE_GLAPI *p_glDrawVkImageNV)( GLuint64 vkImage, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1 );
        void       (WINE_GLAPI *p_glEGLImageTargetTexStorageEXT)( GLenum target, GLeglImageOES image, const GLint* attrib_list );
        void       (WINE_GLAPI *p_glEGLImageTargetTextureStorageEXT)( GLuint texture, GLeglImageOES image, const GLint* attrib_list );
        void       (WINE_GLAPI *p_glEdgeFlagFormatNV)( GLsizei stride );
        void       (WINE_GLAPI *p_glEdgeFlagPointerEXT)( GLsizei stride, GLsizei count, const GLboolean *pointer );
        void       (WINE_GLAPI *p_glEdgeFlagPointerListIBM)( GLint stride, const GLboolean **pointer, GLint ptrstride );
        void       (WINE_GLAPI *p_glElementPointerAPPLE)( GLenum type, const void *pointer );
        void       (WINE_GLAPI *p_glElementPointerATI)( GLenum type, const void *pointer );
        void       (WINE_GLAPI *p_glEnableClientStateIndexedEXT)( GLenum array, GLuint index );
        void       (WINE_GLAPI *p_glEnableClientStateiEXT)( GLenum array, GLuint index );
        void       (WINE_GLAPI *p_glEnableIndexedEXT)( GLenum target, GLuint index );
        void       (WINE_GLAPI *p_glEnableVariantClientStateEXT)( GLuint id );
        void       (WINE_GLAPI *p_glEnableVertexArrayAttrib)( GLuint vaobj, GLuint index );
        void       (WINE_GLAPI *p_glEnableVertexArrayAttribEXT)( GLuint vaobj, GLuint index );
        void       (WINE_GLAPI *p_glEnableVertexArrayEXT)( GLuint vaobj, GLenum array );
        void       (WINE_GLAPI *p_glEnableVertexAttribAPPLE)( GLuint index, GLenum pname );
        void       (WINE_GLAPI *p_glEnableVertexAttribArray)( GLuint index );
        void       (WINE_GLAPI *p_glEnableVertexAttribArrayARB)( GLuint index );
        void       (WINE_GLAPI *p_glEnablei)( GLenum target, GLuint index );
        void       (WINE_GLAPI *p_glEndConditionalRender)(void);
        void       (WINE_GLAPI *p_glEndConditionalRenderNV)(void);
        void       (WINE_GLAPI *p_glEndConditionalRenderNVX)(void);
        void       (WINE_GLAPI *p_glEndFragmentShaderATI)(void);
        void       (WINE_GLAPI *p_glEndOcclusionQueryNV)(void);
        void       (WINE_GLAPI *p_glEndPerfMonitorAMD)( GLuint monitor );
        void       (WINE_GLAPI *p_glEndPerfQueryINTEL)( GLuint queryHandle );
        void       (WINE_GLAPI *p_glEndQuery)( GLenum target );
        void       (WINE_GLAPI *p_glEndQueryARB)( GLenum target );
        void       (WINE_GLAPI *p_glEndQueryIndexed)( GLenum target, GLuint index );
        void       (WINE_GLAPI *p_glEndTransformFeedback)(void);
        void       (WINE_GLAPI *p_glEndTransformFeedbackEXT)(void);
        void       (WINE_GLAPI *p_glEndTransformFeedbackNV)(void);
        void       (WINE_GLAPI *p_glEndVertexShaderEXT)(void);
        void       (WINE_GLAPI *p_glEndVideoCaptureNV)( GLuint video_capture_slot );
        void       (WINE_GLAPI *p_glEvalCoord1xOES)( GLfixed u );
        void       (WINE_GLAPI *p_glEvalCoord1xvOES)( const GLfixed *coords );
        void       (WINE_GLAPI *p_glEvalCoord2xOES)( GLfixed u, GLfixed v );
        void       (WINE_GLAPI *p_glEvalCoord2xvOES)( const GLfixed *coords );
        void       (WINE_GLAPI *p_glEvalMapsNV)( GLenum target, GLenum mode );
        void       (WINE_GLAPI *p_glEvaluateDepthValuesARB)(void);
        void       (WINE_GLAPI *p_glExecuteProgramNV)( GLenum target, GLuint id, const GLfloat *params );
        void       (WINE_GLAPI *p_glExtractComponentEXT)( GLuint res, GLuint src, GLuint num );
        void       (WINE_GLAPI *p_glFeedbackBufferxOES)( GLsizei n, GLenum type, const GLfixed *buffer );
        GLsync     (WINE_GLAPI *p_glFenceSync)( GLenum condition, GLbitfield flags );
        void       (WINE_GLAPI *p_glFinalCombinerInputNV)( GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage );
        GLint      (WINE_GLAPI *p_glFinishAsyncSGIX)( GLuint *markerp );
        void       (WINE_GLAPI *p_glFinishFenceAPPLE)( GLuint fence );
        void       (WINE_GLAPI *p_glFinishFenceNV)( GLuint fence );
        void       (WINE_GLAPI *p_glFinishObjectAPPLE)( GLenum object, GLint name );
        void       (WINE_GLAPI *p_glFinishTextureSUNX)(void);
        void       (WINE_GLAPI *p_glFlushMappedBufferRange)( GLenum target, GLintptr offset, GLsizeiptr length );
        void       (WINE_GLAPI *p_glFlushMappedBufferRangeAPPLE)( GLenum target, GLintptr offset, GLsizeiptr size );
        void       (WINE_GLAPI *p_glFlushMappedNamedBufferRange)( GLuint buffer, GLintptr offset, GLsizeiptr length );
        void       (WINE_GLAPI *p_glFlushMappedNamedBufferRangeEXT)( GLuint buffer, GLintptr offset, GLsizeiptr length );
        void       (WINE_GLAPI *p_glFlushPixelDataRangeNV)( GLenum target );
        void       (WINE_GLAPI *p_glFlushRasterSGIX)(void);
        void       (WINE_GLAPI *p_glFlushStaticDataIBM)( GLenum target );
        void       (WINE_GLAPI *p_glFlushVertexArrayRangeAPPLE)( GLsizei length, void *pointer );
        void       (WINE_GLAPI *p_glFlushVertexArrayRangeNV)(void);
        void       (WINE_GLAPI *p_glFogCoordFormatNV)( GLenum type, GLsizei stride );
        void       (WINE_GLAPI *p_glFogCoordPointer)( GLenum type, GLsizei stride, const void *pointer );
        void       (WINE_GLAPI *p_glFogCoordPointerEXT)( GLenum type, GLsizei stride, const void *pointer );
        void       (WINE_GLAPI *p_glFogCoordPointerListIBM)( GLenum type, GLint stride, const void **pointer, GLint ptrstride );
        void       (WINE_GLAPI *p_glFogCoordd)( GLdouble coord );
        void       (WINE_GLAPI *p_glFogCoorddEXT)( GLdouble coord );
        void       (WINE_GLAPI *p_glFogCoorddv)( const GLdouble *coord );
        void       (WINE_GLAPI *p_glFogCoorddvEXT)( const GLdouble *coord );
        void       (WINE_GLAPI *p_glFogCoordf)( GLfloat coord );
        void       (WINE_GLAPI *p_glFogCoordfEXT)( GLfloat coord );
        void       (WINE_GLAPI *p_glFogCoordfv)( const GLfloat *coord );
        void       (WINE_GLAPI *p_glFogCoordfvEXT)( const GLfloat *coord );
        void       (WINE_GLAPI *p_glFogCoordhNV)( GLhalfNV fog );
        void       (WINE_GLAPI *p_glFogCoordhvNV)( const GLhalfNV *fog );
        void       (WINE_GLAPI *p_glFogFuncSGIS)( GLsizei n, const GLfloat *points );
        void       (WINE_GLAPI *p_glFogxOES)( GLenum pname, GLfixed param );
        void       (WINE_GLAPI *p_glFogxvOES)( GLenum pname, const GLfixed *param );
        void       (WINE_GLAPI *p_glFragmentColorMaterialSGIX)( GLenum face, GLenum mode );
        void       (WINE_GLAPI *p_glFragmentCoverageColorNV)( GLuint color );
        void       (WINE_GLAPI *p_glFragmentLightModelfSGIX)( GLenum pname, GLfloat param );
        void       (WINE_GLAPI *p_glFragmentLightModelfvSGIX)( GLenum pname, const GLfloat *params );
        void       (WINE_GLAPI *p_glFragmentLightModeliSGIX)( GLenum pname, GLint param );
        void       (WINE_GLAPI *p_glFragmentLightModelivSGIX)( GLenum pname, const GLint *params );
        void       (WINE_GLAPI *p_glFragmentLightfSGIX)( GLenum light, GLenum pname, GLfloat param );
        void       (WINE_GLAPI *p_glFragmentLightfvSGIX)( GLenum light, GLenum pname, const GLfloat *params );
        void       (WINE_GLAPI *p_glFragmentLightiSGIX)( GLenum light, GLenum pname, GLint param );
        void       (WINE_GLAPI *p_glFragmentLightivSGIX)( GLenum light, GLenum pname, const GLint *params );
        void       (WINE_GLAPI *p_glFragmentMaterialfSGIX)( GLenum face, GLenum pname, GLfloat param );
        void       (WINE_GLAPI *p_glFragmentMaterialfvSGIX)( GLenum face, GLenum pname, const GLfloat *params );
        void       (WINE_GLAPI *p_glFragmentMaterialiSGIX)( GLenum face, GLenum pname, GLint param );
        void       (WINE_GLAPI *p_glFragmentMaterialivSGIX)( GLenum face, GLenum pname, const GLint *params );
        void       (WINE_GLAPI *p_glFrameTerminatorGREMEDY)(void);
        void       (WINE_GLAPI *p_glFrameZoomSGIX)( GLint factor );
        void       (WINE_GLAPI *p_glFramebufferDrawBufferEXT)( GLuint framebuffer, GLenum mode );
        void       (WINE_GLAPI *p_glFramebufferDrawBuffersEXT)( GLuint framebuffer, GLsizei n, const GLenum *bufs );
        void       (WINE_GLAPI *p_glFramebufferFetchBarrierEXT)(void);
        void       (WINE_GLAPI *p_glFramebufferParameteri)( GLenum target, GLenum pname, GLint param );
        void       (WINE_GLAPI *p_glFramebufferParameteriMESA)( GLenum target, GLenum pname, GLint param );
        void       (WINE_GLAPI *p_glFramebufferReadBufferEXT)( GLuint framebuffer, GLenum mode );
        void       (WINE_GLAPI *p_glFramebufferRenderbuffer)( GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer );
        void       (WINE_GLAPI *p_glFramebufferRenderbufferEXT)( GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer );
        void       (WINE_GLAPI *p_glFramebufferSampleLocationsfvARB)( GLenum target, GLuint start, GLsizei count, const GLfloat *v );
        void       (WINE_GLAPI *p_glFramebufferSampleLocationsfvNV)( GLenum target, GLuint start, GLsizei count, const GLfloat *v );
        void       (WINE_GLAPI *p_glFramebufferSamplePositionsfvAMD)( GLenum target, GLuint numsamples, GLuint pixelindex, const GLfloat *values );
        void       (WINE_GLAPI *p_glFramebufferTexture)( GLenum target, GLenum attachment, GLuint texture, GLint level );
        void       (WINE_GLAPI *p_glFramebufferTexture1D)( GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level );
        void       (WINE_GLAPI *p_glFramebufferTexture1DEXT)( GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level );
        void       (WINE_GLAPI *p_glFramebufferTexture2D)( GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level );
        void       (WINE_GLAPI *p_glFramebufferTexture2DEXT)( GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level );
        void       (WINE_GLAPI *p_glFramebufferTexture3D)( GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset );
        void       (WINE_GLAPI *p_glFramebufferTexture3DEXT)( GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset );
        void       (WINE_GLAPI *p_glFramebufferTextureARB)( GLenum target, GLenum attachment, GLuint texture, GLint level );
        void       (WINE_GLAPI *p_glFramebufferTextureEXT)( GLenum target, GLenum attachment, GLuint texture, GLint level );
        void       (WINE_GLAPI *p_glFramebufferTextureFaceARB)( GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face );
        void       (WINE_GLAPI *p_glFramebufferTextureFaceEXT)( GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face );
        void       (WINE_GLAPI *p_glFramebufferTextureLayer)( GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer );
        void       (WINE_GLAPI *p_glFramebufferTextureLayerARB)( GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer );
        void       (WINE_GLAPI *p_glFramebufferTextureLayerEXT)( GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer );
        void       (WINE_GLAPI *p_glFramebufferTextureMultiviewOVR)( GLenum target, GLenum attachment, GLuint texture, GLint level, GLint baseViewIndex, GLsizei numViews );
        void       (WINE_GLAPI *p_glFreeObjectBufferATI)( GLuint buffer );
        void       (WINE_GLAPI *p_glFrustumfOES)( GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f );
        void       (WINE_GLAPI *p_glFrustumxOES)( GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f );
        GLuint     (WINE_GLAPI *p_glGenAsyncMarkersSGIX)( GLsizei range );
        void       (WINE_GLAPI *p_glGenBuffers)( GLsizei n, GLuint *buffers );
        void       (WINE_GLAPI *p_glGenBuffersARB)( GLsizei n, GLuint *buffers );
        void       (WINE_GLAPI *p_glGenFencesAPPLE)( GLsizei n, GLuint *fences );
        void       (WINE_GLAPI *p_glGenFencesNV)( GLsizei n, GLuint *fences );
        GLuint     (WINE_GLAPI *p_glGenFragmentShadersATI)( GLuint range );
        void       (WINE_GLAPI *p_glGenFramebuffers)( GLsizei n, GLuint *framebuffers );
        void       (WINE_GLAPI *p_glGenFramebuffersEXT)( GLsizei n, GLuint *framebuffers );
        void       (WINE_GLAPI *p_glGenNamesAMD)( GLenum identifier, GLuint num, GLuint *names );
        void       (WINE_GLAPI *p_glGenOcclusionQueriesNV)( GLsizei n, GLuint *ids );
        GLuint     (WINE_GLAPI *p_glGenPathsNV)( GLsizei range );
        void       (WINE_GLAPI *p_glGenPerfMonitorsAMD)( GLsizei n, GLuint *monitors );
        void       (WINE_GLAPI *p_glGenProgramPipelines)( GLsizei n, GLuint *pipelines );
        void       (WINE_GLAPI *p_glGenProgramsARB)( GLsizei n, GLuint *programs );
        void       (WINE_GLAPI *p_glGenProgramsNV)( GLsizei n, GLuint *programs );
        void       (WINE_GLAPI *p_glGenQueries)( GLsizei n, GLuint *ids );
        void       (WINE_GLAPI *p_glGenQueriesARB)( GLsizei n, GLuint *ids );
        void       (WINE_GLAPI *p_glGenQueryResourceTagNV)( GLsizei n, GLint *tagIds );
        void       (WINE_GLAPI *p_glGenRenderbuffers)( GLsizei n, GLuint *renderbuffers );
        void       (WINE_GLAPI *p_glGenRenderbuffersEXT)( GLsizei n, GLuint *renderbuffers );
        void       (WINE_GLAPI *p_glGenSamplers)( GLsizei count, GLuint *samplers );
        void       (WINE_GLAPI *p_glGenSemaphoresEXT)( GLsizei n, GLuint *semaphores );
        GLuint     (WINE_GLAPI *p_glGenSymbolsEXT)( GLenum datatype, GLenum storagetype, GLenum range, GLuint components );
        void       (WINE_GLAPI *p_glGenTexturesEXT)( GLsizei n, GLuint *textures );
        void       (WINE_GLAPI *p_glGenTransformFeedbacks)( GLsizei n, GLuint *ids );
        void       (WINE_GLAPI *p_glGenTransformFeedbacksNV)( GLsizei n, GLuint *ids );
        void       (WINE_GLAPI *p_glGenVertexArrays)( GLsizei n, GLuint *arrays );
        void       (WINE_GLAPI *p_glGenVertexArraysAPPLE)( GLsizei n, GLuint *arrays );
        GLuint     (WINE_GLAPI *p_glGenVertexShadersEXT)( GLuint range );
        void       (WINE_GLAPI *p_glGenerateMipmap)( GLenum target );
        void       (WINE_GLAPI *p_glGenerateMipmapEXT)( GLenum target );
        void       (WINE_GLAPI *p_glGenerateMultiTexMipmapEXT)( GLenum texunit, GLenum target );
        void       (WINE_GLAPI *p_glGenerateTextureMipmap)( GLuint texture );
        void       (WINE_GLAPI *p_glGenerateTextureMipmapEXT)( GLuint texture, GLenum target );
        void       (WINE_GLAPI *p_glGetActiveAtomicCounterBufferiv)( GLuint program, GLuint bufferIndex, GLenum pname, GLint *params );
        void       (WINE_GLAPI *p_glGetActiveAttrib)( GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name );
        void       (WINE_GLAPI *p_glGetActiveAttribARB)( GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name );
        void       (WINE_GLAPI *p_glGetActiveSubroutineName)( GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name );
        void       (WINE_GLAPI *p_glGetActiveSubroutineUniformName)( GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name );
        void       (WINE_GLAPI *p_glGetActiveSubroutineUniformiv)( GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values );
        void       (WINE_GLAPI *p_glGetActiveUniform)( GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name );
        void       (WINE_GLAPI *p_glGetActiveUniformARB)( GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name );
        void       (WINE_GLAPI *p_glGetActiveUniformBlockName)( GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName );
        void       (WINE_GLAPI *p_glGetActiveUniformBlockiv)( GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params );
        void       (WINE_GLAPI *p_glGetActiveUniformName)( GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName );
        void       (WINE_GLAPI *p_glGetActiveUniformsiv)( GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params );
        void       (WINE_GLAPI *p_glGetActiveVaryingNV)( GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name );
        void       (WINE_GLAPI *p_glGetArrayObjectfvATI)( GLenum array, GLenum pname, GLfloat *params );
        void       (WINE_GLAPI *p_glGetArrayObjectivATI)( GLenum array, GLenum pname, GLint *params );
        void       (WINE_GLAPI *p_glGetAttachedObjectsARB)( GLhandleARB containerObj, GLsizei maxCount, GLsizei *count, GLhandleARB *obj );
        void       (WINE_GLAPI *p_glGetAttachedShaders)( GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders );
        GLint      (WINE_GLAPI *p_glGetAttribLocation)( GLuint program, const GLchar *name );
        GLint      (WINE_GLAPI *p_glGetAttribLocationARB)( GLhandleARB programObj, const GLcharARB *name );
        void       (WINE_GLAPI *p_glGetBooleanIndexedvEXT)( GLenum target, GLuint index, GLboolean *data );
        void       (WINE_GLAPI *p_glGetBooleani_v)( GLenum target, GLuint index, GLboolean *data );
        void       (WINE_GLAPI *p_glGetBufferParameteri64v)( GLenum target, GLenum pname, GLint64 *params );
        void       (WINE_GLAPI *p_glGetBufferParameteriv)( GLenum target, GLenum pname, GLint *params );
        void       (WINE_GLAPI *p_glGetBufferParameterivARB)( GLenum target, GLenum pname, GLint *params );
        void       (WINE_GLAPI *p_glGetBufferParameterui64vNV)( GLenum target, GLenum pname, GLuint64EXT *params );
        void       (WINE_GLAPI *p_glGetBufferPointerv)( GLenum target, GLenum pname, void **params );
        void       (WINE_GLAPI *p_glGetBufferPointervARB)( GLenum target, GLenum pname, void **params );
        void       (WINE_GLAPI *p_glGetBufferSubData)( GLenum target, GLintptr offset, GLsizeiptr size, void *data );
        void       (WINE_GLAPI *p_glGetBufferSubDataARB)( GLenum target, GLintptrARB offset, GLsizeiptrARB size, void *data );
        void       (WINE_GLAPI *p_glGetClipPlanefOES)( GLenum plane, GLfloat *equation );
        void       (WINE_GLAPI *p_glGetClipPlanexOES)( GLenum plane, GLfixed *equation );
        void       (WINE_GLAPI *p_glGetColorTable)( GLenum target, GLenum format, GLenum type, void *table );
        void       (WINE_GLAPI *p_glGetColorTableEXT)( GLenum target, GLenum format, GLenum type, void *data );
        void       (WINE_GLAPI *p_glGetColorTableParameterfv)( GLenum target, GLenum pname, GLfloat *params );
        void       (WINE_GLAPI *p_glGetColorTableParameterfvEXT)( GLenum target, GLenum pname, GLfloat *params );
        void       (WINE_GLAPI *p_glGetColorTableParameterfvSGI)( GLenum target, GLenum pname, GLfloat *params );
        void       (WINE_GLAPI *p_glGetColorTableParameteriv)( GLenum target, GLenum pname, GLint *params );
        void       (WINE_GLAPI *p_glGetColorTableParameterivEXT)( GLenum target, GLenum pname, GLint *params );
        void       (WINE_GLAPI *p_glGetColorTableParameterivSGI)( GLenum target, GLenum pname, GLint *params );
        void       (WINE_GLAPI *p_glGetColorTableSGI)( GLenum target, GLenum format, GLenum type, void *table );
        void       (WINE_GLAPI *p_glGetCombinerInputParameterfvNV)( GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat *params );
        void       (WINE_GLAPI *p_glGetCombinerInputParameterivNV)( GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint *params );
        void       (WINE_GLAPI *p_glGetCombinerOutputParameterfvNV)( GLenum stage, GLenum portion, GLenum pname, GLfloat *params );
        void       (WINE_GLAPI *p_glGetCombinerOutputParameterivNV)( GLenum stage, GLenum portion, GLenum pname, GLint *params );
        void       (WINE_GLAPI *p_glGetCombinerStageParameterfvNV)( GLenum stage, GLenum pname, GLfloat *params );
        GLuint     (WINE_GLAPI *p_glGetCommandHeaderNV)( GLenum tokenID, GLuint size );
        void       (WINE_GLAPI *p_glGetCompressedMultiTexImageEXT)( GLenum texunit, GLenum target, GLint lod, void *img );
        void       (WINE_GLAPI *p_glGetCompressedTexImage)( GLenum target, GLint level, void *img );
        void       (WINE_GLAPI *p_glGetCompressedTexImageARB)( GLenum target, GLint level, void *img );
        void       (WINE_GLAPI *p_glGetCompressedTextureImage)( GLuint texture, GLint level, GLsizei bufSize, void *pixels );
        void       (WINE_GLAPI *p_glGetCompressedTextureImageEXT)( GLuint texture, GLenum target, GLint lod, void *img );
        void       (WINE_GLAPI *p_glGetCompressedTextureSubImage)( GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void *pixels );
        void       (WINE_GLAPI *p_glGetConvolutionFilter)( GLenum target, GLenum format, GLenum type, void *image );
        void       (WINE_GLAPI *p_glGetConvolutionFilterEXT)( GLenum target, GLenum format, GLenum type, void *image );
        void       (WINE_GLAPI *p_glGetConvolutionParameterfv)( GLenum target, GLenum pname, GLfloat *params );
        void       (WINE_GLAPI *p_glGetConvolutionParameterfvEXT)( GLenum target, GLenum pname, GLfloat *params );
        void       (WINE_GLAPI *p_glGetConvolutionParameteriv)( GLenum target, GLenum pname, GLint *params );
        void       (WINE_GLAPI *p_glGetConvolutionParameterivEXT)( GLenum target, GLenum pname, GLint *params );
        void       (WINE_GLAPI *p_glGetConvolutionParameterxvOES)( GLenum target, GLenum pname, GLfixed *params );
        void       (WINE_GLAPI *p_glGetCoverageModulationTableNV)( GLsizei bufSize, GLfloat *v );
        GLuint     (WINE_GLAPI *p_glGetDebugMessageLog)( GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog );
        GLuint     (WINE_GLAPI *p_glGetDebugMessageLogAMD)( GLuint count, GLsizei bufSize, GLenum *categories, GLuint *severities, GLuint *ids, GLsizei *lengths, GLchar *message );
        GLuint     (WINE_GLAPI *p_glGetDebugMessageLogARB)( GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog );
        void       (WINE_GLAPI *p_glGetDetailTexFuncSGIS)( GLenum target, GLfloat *points );
        void       (WINE_GLAPI *p_glGetDoubleIndexedvEXT)( GLenum target, GLuint index, GLdouble *data );
        void       (WINE_GLAPI *p_glGetDoublei_v)( GLenum target, GLuint index, GLdouble *data );
        void       (WINE_GLAPI *p_glGetDoublei_vEXT)( GLenum pname, GLuint index, GLdouble *params );
        void       (WINE_GLAPI *p_glGetFenceivNV)( GLuint fence, GLenum pname, GLint *params );
        void       (WINE_GLAPI *p_glGetFinalCombinerInputParameterfvNV)( GLenum variable, GLenum pname, GLfloat *params );
        void       (WINE_GLAPI *p_glGetFinalCombinerInputParameterivNV)( GLenum variable, GLenum pname, GLint *params );
        void       (WINE_GLAPI *p_glGetFirstPerfQueryIdINTEL)( GLuint *queryId );
        void       (WINE_GLAPI *p_glGetFixedvOES)( GLenum pname, GLfixed *params );
        void       (WINE_GLAPI *p_glGetFloatIndexedvEXT)( GLenum target, GLuint index, GLfloat *data );
        void       (WINE_GLAPI *p_glGetFloati_v)( GLenum target, GLuint index, GLfloat *data );
        void       (WINE_GLAPI *p_glGetFloati_vEXT)( GLenum pname, GLuint index, GLfloat *params );
        void       (WINE_GLAPI *p_glGetFogFuncSGIS)( GLfloat *points );
        GLint      (WINE_GLAPI *p_glGetFragDataIndex)( GLuint program, const GLchar *name );
        GLint      (WINE_GLAPI *p_glGetFragDataLocation)( GLuint program, const GLchar *name );
        GLint      (WINE_GLAPI *p_glGetFragDataLocationEXT)( GLuint program, const GLchar *name );
        void       (WINE_GLAPI *p_glGetFragmentLightfvSGIX)( GLenum light, GLenum pname, GLfloat *params );
        void       (WINE_GLAPI *p_glGetFragmentLightivSGIX)( GLenum light, GLenum pname, GLint *params );
        void       (WINE_GLAPI *p_glGetFragmentMaterialfvSGIX)( GLenum face, GLenum pname, GLfloat *params );
        void       (WINE_GLAPI *p_glGetFragmentMaterialivSGIX)( GLenum face, GLenum pname, GLint *params );
        void       (WINE_GLAPI *p_glGetFramebufferAttachmentParameteriv)( GLenum target, GLenum attachment, GLenum pname, GLint *params );
        void       (WINE_GLAPI *p_glGetFramebufferAttachmentParameterivEXT)( GLenum target, GLenum attachment, GLenum pname, GLint *params );
        void       (WINE_GLAPI *p_glGetFramebufferParameterfvAMD)( GLenum target, GLenum pname, GLuint numsamples, GLuint pixelindex, GLsizei size, GLfloat *values );
        void       (WINE_GLAPI *p_glGetFramebufferParameteriv)( GLenum target, GLenum pname, GLint *params );
        void       (WINE_GLAPI *p_glGetFramebufferParameterivEXT)( GLuint framebuffer, GLenum pname, GLint *params );
        void       (WINE_GLAPI *p_glGetFramebufferParameterivMESA)( GLenum target, GLenum pname, GLint *params );
        GLenum     (WINE_GLAPI *p_glGetGraphicsResetStatus)(void);
        GLenum     (WINE_GLAPI *p_glGetGraphicsResetStatusARB)(void);
        GLhandleARB (WINE_GLAPI *p_glGetHandleARB)( GLenum pname );
        void       (WINE_GLAPI *p_glGetHistogram)( GLenum target, GLboolean reset, GLenum format, GLenum type, void *values );
        void       (WINE_GLAPI *p_glGetHistogramEXT)( GLenum target, GLboolean reset, GLenum format, GLenum type, void *values );
        void       (WINE_GLAPI *p_glGetHistogramParameterfv)( GLenum target, GLenum pname, GLfloat *params );
        void       (WINE_GLAPI *p_glGetHistogramParameterfvEXT)( GLenum target, GLenum pname, GLfloat *params );
        void       (WINE_GLAPI *p_glGetHistogramParameteriv)( GLenum target, GLenum pname, GLint *params );
        void       (WINE_GLAPI *p_glGetHistogramParameterivEXT)( GLenum target, GLenum pname, GLint *params );
        void       (WINE_GLAPI *p_glGetHistogramParameterxvOES)( GLenum target, GLenum pname, GLfixed *params );
        GLuint64   (WINE_GLAPI *p_glGetImageHandleARB)( GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format );
        GLuint64   (WINE_GLAPI *p_glGetImageHandleNV)( GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format );
        void       (WINE_GLAPI *p_glGetImageTransformParameterfvHP)( GLenum target, GLenum pname, GLfloat *params );
        void       (WINE_GLAPI *p_glGetImageTransformParameterivHP)( GLenum target, GLenum pname, GLint *params );
        void       (WINE_GLAPI *p_glGetInfoLogARB)( GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *infoLog );
        GLint      (WINE_GLAPI *p_glGetInstrumentsSGIX)(void);
        void       (WINE_GLAPI *p_glGetInteger64i_v)( GLenum target, GLuint index, GLint64 *data );
        void       (WINE_GLAPI *p_glGetInteger64v)( GLenum pname, GLint64 *data );
        void       (WINE_GLAPI *p_glGetIntegerIndexedvEXT)( GLenum target, GLuint index, GLint *data );
        void       (WINE_GLAPI *p_glGetIntegeri_v)( GLenum target, GLuint index, GLint *data );
        void       (WINE_GLAPI *p_glGetIntegerui64i_vNV)( GLenum value, GLuint index, GLuint64EXT *result );
        void       (WINE_GLAPI *p_glGetIntegerui64vNV)( GLenum value, GLuint64EXT *result );
        void       (WINE_GLAPI *p_glGetInternalformatSampleivNV)( GLenum target, GLenum internalformat, GLsizei samples, GLenum pname, GLsizei count, GLint *params );
        void       (WINE_GLAPI *p_glGetInternalformati64v)( GLenum target, GLenum internalformat, GLenum pname, GLsizei count, GLint64 *params );
        void       (WINE_GLAPI *p_glGetInternalformativ)( GLenum target, GLenum internalformat, GLenum pname, GLsizei count, GLint *params );
        void       (WINE_GLAPI *p_glGetInvariantBooleanvEXT)( GLuint id, GLenum value, GLboolean *data );
        void       (WINE_GLAPI *p_glGetInvariantFloatvEXT)( GLuint id, GLenum value, GLfloat *data );
        void       (WINE_GLAPI *p_glGetInvariantIntegervEXT)( GLuint id, GLenum value, GLint *data );
        void       (WINE_GLAPI *p_glGetLightxOES)( GLenum light, GLenum pname, GLfixed *params );
        void       (WINE_GLAPI *p_glGetListParameterfvSGIX)( GLuint list, GLenum pname, GLfloat *params );
        void       (WINE_GLAPI *p_glGetListParameterivSGIX)( GLuint list, GLenum pname, GLint *params );
        void       (WINE_GLAPI *p_glGetLocalConstantBooleanvEXT)( GLuint id, GLenum value, GLboolean *data );
        void       (WINE_GLAPI *p_glGetLocalConstantFloatvEXT)( GLuint id, GLenum value, GLfloat *data );
        void       (WINE_GLAPI *p_glGetLocalConstantIntegervEXT)( GLuint id, GLenum value, GLint *data );
        void       (WINE_GLAPI *p_glGetMapAttribParameterfvNV)( GLenum target, GLuint index, GLenum pname, GLfloat *params );
        void       (WINE_GLAPI *p_glGetMapAttribParameterivNV)( GLenum target, GLuint index, GLenum pname, GLint *params );
        void       (WINE_GLAPI *p_glGetMapControlPointsNV)( GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, void *points );
        void       (WINE_GLAPI *p_glGetMapParameterfvNV)( GLenum target, GLenum pname, GLfloat *params );
        void       (WINE_GLAPI *p_glGetMapParameterivNV)( GLenum target, GLenum pname, GLint *params );
        void       (WINE_GLAPI *p_glGetMapxvOES)( GLenum target, GLenum query, GLfixed *v );
        void       (WINE_GLAPI *p_glGetMaterialxOES)( GLenum face, GLenum pname, GLfixed param );
        void       (WINE_GLAPI *p_glGetMemoryObjectDetachedResourcesuivNV)( GLuint memory, GLenum pname, GLint first, GLsizei count, GLuint *params );
        void       (WINE_GLAPI *p_glGetMemoryObjectParameterivEXT)( GLuint memoryObject, GLenum pname, GLint *params );
        void       (WINE_GLAPI *p_glGetMinmax)( GLenum target, GLboolean reset, GLenum format, GLenum type, void *values );
        void       (WINE_GLAPI *p_glGetMinmaxEXT)( GLenum target, GLboolean reset, GLenum format, GLenum type, void *values );
        void       (WINE_GLAPI *p_glGetMinmaxParameterfv)( GLenum target, GLenum pname, GLfloat *params );
        void       (WINE_GLAPI *p_glGetMinmaxParameterfvEXT)( GLenum target, GLenum pname, GLfloat *params );
        void       (WINE_GLAPI *p_glGetMinmaxParameteriv)( GLenum target, GLenum pname, GLint *params );
        void       (WINE_GLAPI *p_glGetMinmaxParameterivEXT)( GLenum target, GLenum pname, GLint *params );
        void       (WINE_GLAPI *p_glGetMultiTexEnvfvEXT)( GLenum texunit, GLenum target, GLenum pname, GLfloat *params );
        void       (WINE_GLAPI *p_glGetMultiTexEnvivEXT)( GLenum texunit, GLenum target, GLenum pname, GLint *params );
        void       (WINE_GLAPI *p_glGetMultiTexGendvEXT)( GLenum texunit, GLenum coord, GLenum pname, GLdouble *params );
        void       (WINE_GLAPI *p_glGetMultiTexGenfvEXT)( GLenum texunit, GLenum coord, GLenum pname, GLfloat *params );
        void       (WINE_GLAPI *p_glGetMultiTexGenivEXT)( GLenum texunit, GLenum coord, GLenum pname, GLint *params );
        void       (WINE_GLAPI *p_glGetMultiTexImageEXT)( GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, void *pixels );
        void       (WINE_GLAPI *p_glGetMultiTexLevelParameterfvEXT)( GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat *params );
        void       (WINE_GLAPI *p_glGetMultiTexLevelParameterivEXT)( GLenum texunit, GLenum target, GLint level, GLenum pname, GLint *params );
        void       (WINE_GLAPI *p_glGetMultiTexParameterIivEXT)( GLenum texunit, GLenum target, GLenum pname, GLint *params );
        void       (WINE_GLAPI *p_glGetMultiTexParameterIuivEXT)( GLenum texunit, GLenum target, GLenum pname, GLuint *params );
        void       (WINE_GLAPI *p_glGetMultiTexParameterfvEXT)( GLenum texunit, GLenum target, GLenum pname, GLfloat *params );
        void       (WINE_GLAPI *p_glGetMultiTexParameterivEXT)( GLenum texunit, GLenum target, GLenum pname, GLint *params );
        void       (WINE_GLAPI *p_glGetMultisamplefv)( GLenum pname, GLuint index, GLfloat *val );
        void       (WINE_GLAPI *p_glGetMultisamplefvNV)( GLenum pname, GLuint index, GLfloat *val );
        void       (WINE_GLAPI *p_glGetNamedBufferParameteri64v)( GLuint buffer, GLenum pname, GLint64 *params );
        void       (WINE_GLAPI *p_glGetNamedBufferParameteriv)( GLuint buffer, GLenum pname, GLint *params );
        void       (WINE_GLAPI *p_glGetNamedBufferParameterivEXT)( GLuint buffer, GLenum pname, GLint *params );
        void       (WINE_GLAPI *p_glGetNamedBufferParameterui64vNV)( GLuint buffer, GLenum pname, GLuint64EXT *params );
        void       (WINE_GLAPI *p_glGetNamedBufferPointerv)( GLuint buffer, GLenum pname, void **params );
        void       (WINE_GLAPI *p_glGetNamedBufferPointervEXT)( GLuint buffer, GLenum pname, void **params );
        void       (WINE_GLAPI *p_glGetNamedBufferSubData)( GLuint buffer, GLintptr offset, GLsizeiptr size, void *data );
        void       (WINE_GLAPI *p_glGetNamedBufferSubDataEXT)( GLuint buffer, GLintptr offset, GLsizeiptr size, void *data );
        void       (WINE_GLAPI *p_glGetNamedFramebufferAttachmentParameteriv)( GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params );
        void       (WINE_GLAPI *p_glGetNamedFramebufferAttachmentParameterivEXT)( GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params );
        void       (WINE_GLAPI *p_glGetNamedFramebufferParameterfvAMD)( GLuint framebuffer, GLenum pname, GLuint numsamples, GLuint pixelindex, GLsizei size, GLfloat *values );
        void       (WINE_GLAPI *p_glGetNamedFramebufferParameteriv)( GLuint framebuffer, GLenum pname, GLint *param );
        void       (WINE_GLAPI *p_glGetNamedFramebufferParameterivEXT)( GLuint framebuffer, GLenum pname, GLint *params );
        void       (WINE_GLAPI *p_glGetNamedProgramLocalParameterIivEXT)( GLuint program, GLenum target, GLuint index, GLint *params );
        void       (WINE_GLAPI *p_glGetNamedProgramLocalParameterIuivEXT)( GLuint program, GLenum target, GLuint index, GLuint *params );
        void       (WINE_GLAPI *p_glGetNamedProgramLocalParameterdvEXT)( GLuint program, GLenum target, GLuint index, GLdouble *params );
        void       (WINE_GLAPI *p_glGetNamedProgramLocalParameterfvEXT)( GLuint program, GLenum target, GLuint index, GLfloat *params );
        void       (WINE_GLAPI *p_glGetNamedProgramStringEXT)( GLuint program, GLenum target, GLenum pname, void *string );
        void       (WINE_GLAPI *p_glGetNamedProgramivEXT)( GLuint program, GLenum target, GLenum pname, GLint *params );
        void       (WINE_GLAPI *p_glGetNamedRenderbufferParameteriv)( GLuint renderbuffer, GLenum pname, GLint *params );
        void       (WINE_GLAPI *p_glGetNamedRenderbufferParameterivEXT)( GLuint renderbuffer, GLenum pname, GLint *params );
        void       (WINE_GLAPI *p_glGetNamedStringARB)( GLint namelen, const GLchar *name, GLsizei bufSize, GLint *stringlen, GLchar *string );
        void       (WINE_GLAPI *p_glGetNamedStringivARB)( GLint namelen, const GLchar *name, GLenum pname, GLint *params );
        void       (WINE_GLAPI *p_glGetNextPerfQueryIdINTEL)( GLuint queryId, GLuint *nextQueryId );
        void       (WINE_GLAPI *p_glGetObjectBufferfvATI)( GLuint buffer, GLenum pname, GLfloat *params );
        void       (WINE_GLAPI *p_glGetObjectBufferivATI)( GLuint buffer, GLenum pname, GLint *params );
        void       (WINE_GLAPI *p_glGetObjectLabel)( GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label );
        void       (WINE_GLAPI *p_glGetObjectLabelEXT)( GLenum type, GLuint object, GLsizei bufSize, GLsizei *length, GLchar *label );
        void       (WINE_GLAPI *p_glGetObjectParameterfvARB)( GLhandleARB obj, GLenum pname, GLfloat *params );
        void       (WINE_GLAPI *p_glGetObjectParameterivAPPLE)( GLenum objectType, GLuint name, GLenum pname, GLint *params );
        void       (WINE_GLAPI *p_glGetObjectParameterivARB)( GLhandleARB obj, GLenum pname, GLint *params );
        void       (WINE_GLAPI *p_glGetObjectPtrLabel)( const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label );
        void       (WINE_GLAPI *p_glGetOcclusionQueryivNV)( GLuint id, GLenum pname, GLint *params );
        void       (WINE_GLAPI *p_glGetOcclusionQueryuivNV)( GLuint id, GLenum pname, GLuint *params );
        void       (WINE_GLAPI *p_glGetPathColorGenfvNV)( GLenum color, GLenum pname, GLfloat *value );
        void       (WINE_GLAPI *p_glGetPathColorGenivNV)( GLenum color, GLenum pname, GLint *value );
        void       (WINE_GLAPI *p_glGetPathCommandsNV)( GLuint path, GLubyte *commands );
        void       (WINE_GLAPI *p_glGetPathCoordsNV)( GLuint path, GLfloat *coords );
        void       (WINE_GLAPI *p_glGetPathDashArrayNV)( GLuint path, GLfloat *dashArray );
        GLfloat    (WINE_GLAPI *p_glGetPathLengthNV)( GLuint path, GLsizei startSegment, GLsizei numSegments );
        void       (WINE_GLAPI *p_glGetPathMetricRangeNV)( GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat *metrics );
        void       (WINE_GLAPI *p_glGetPathMetricsNV)( GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics );
        void       (WINE_GLAPI *p_glGetPathParameterfvNV)( GLuint path, GLenum pname, GLfloat *value );
        void       (WINE_GLAPI *p_glGetPathParameterivNV)( GLuint path, GLenum pname, GLint *value );
        void       (WINE_GLAPI *p_glGetPathSpacingNV)( GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing );
        void       (WINE_GLAPI *p_glGetPathTexGenfvNV)( GLenum texCoordSet, GLenum pname, GLfloat *value );
        void       (WINE_GLAPI *p_glGetPathTexGenivNV)( GLenum texCoordSet, GLenum pname, GLint *value );
        void       (WINE_GLAPI *p_glGetPerfCounterInfoINTEL)( GLuint queryId, GLuint counterId, GLuint counterNameLength, GLchar *counterName, GLuint counterDescLength, GLchar *counterDesc, GLuint *counterOffset, GLuint *counterDataSize, GLuint *counterTypeEnum, GLuint *counterDataTypeEnum, GLuint64 *rawCounterMaxValue );
        void       (WINE_GLAPI *p_glGetPerfMonitorCounterDataAMD)( GLuint monitor, GLenum pname, GLsizei dataSize, GLuint *data, GLint *bytesWritten );
        void       (WINE_GLAPI *p_glGetPerfMonitorCounterInfoAMD)( GLuint group, GLuint counter, GLenum pname, void *data );
        void       (WINE_GLAPI *p_glGetPerfMonitorCounterStringAMD)( GLuint group, GLuint counter, GLsizei bufSize, GLsizei *length, GLchar *counterString );
        void       (WINE_GLAPI *p_glGetPerfMonitorCountersAMD)( GLuint group, GLint *numCounters, GLint *maxActiveCounters, GLsizei counterSize, GLuint *counters );
        void       (WINE_GLAPI *p_glGetPerfMonitorGroupStringAMD)( GLuint group, GLsizei bufSize, GLsizei *length, GLchar *groupString );
        void       (WINE_GLAPI *p_glGetPerfMonitorGroupsAMD)( GLint *numGroups, GLsizei groupsSize, GLuint *groups );
        void       (WINE_GLAPI *p_glGetPerfQueryDataINTEL)( GLuint queryHandle, GLuint flags, GLsizei dataSize, void *data, GLuint *bytesWritten );
        void       (WINE_GLAPI *p_glGetPerfQueryIdByNameINTEL)( GLchar *queryName, GLuint *queryId );
        void       (WINE_GLAPI *p_glGetPerfQueryInfoINTEL)( GLuint queryId, GLuint queryNameLength, GLchar *queryName, GLuint *dataSize, GLuint *noCounters, GLuint *noInstances, GLuint *capsMask );
        void       (WINE_GLAPI *p_glGetPixelMapxv)( GLenum map, GLint size, GLfixed *values );
        void       (WINE_GLAPI *p_glGetPixelTexGenParameterfvSGIS)( GLenum pname, GLfloat *params );
        void       (WINE_GLAPI *p_glGetPixelTexGenParameterivSGIS)( GLenum pname, GLint *params );
        void       (WINE_GLAPI *p_glGetPixelTransformParameterfvEXT)( GLenum target, GLenum pname, GLfloat *params );
        void       (WINE_GLAPI *p_glGetPixelTransformParameterivEXT)( GLenum target, GLenum pname, GLint *params );
        void       (WINE_GLAPI *p_glGetPointerIndexedvEXT)( GLenum target, GLuint index, void **data );
        void       (WINE_GLAPI *p_glGetPointeri_vEXT)( GLenum pname, GLuint index, void **params );
        void       (WINE_GLAPI *p_glGetPointervEXT)( GLenum pname, void **params );
        void       (WINE_GLAPI *p_glGetProgramBinary)( GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary );
        void       (WINE_GLAPI *p_glGetProgramEnvParameterIivNV)( GLenum target, GLuint index, GLint *params );
        void       (WINE_GLAPI *p_glGetProgramEnvParameterIuivNV)( GLenum target, GLuint index, GLuint *params );
        void       (WINE_GLAPI *p_glGetProgramEnvParameterdvARB)( GLenum target, GLuint index, GLdouble *params );
        void       (WINE_GLAPI *p_glGetProgramEnvParameterfvARB)( GLenum target, GLuint index, GLfloat *params );
        void       (WINE_GLAPI *p_glGetProgramInfoLog)( GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog );
        void       (WINE_GLAPI *p_glGetProgramInterfaceiv)( GLuint program, GLenum programInterface, GLenum pname, GLint *params );
        void       (WINE_GLAPI *p_glGetProgramLocalParameterIivNV)( GLenum target, GLuint index, GLint *params );
        void       (WINE_GLAPI *p_glGetProgramLocalParameterIuivNV)( GLenum target, GLuint index, GLuint *params );
        void       (WINE_GLAPI *p_glGetProgramLocalParameterdvARB)( GLenum target, GLuint index, GLdouble *params );
        void       (WINE_GLAPI *p_glGetProgramLocalParameterfvARB)( GLenum target, GLuint index, GLfloat *params );
        void       (WINE_GLAPI *p_glGetProgramNamedParameterdvNV)( GLuint id, GLsizei len, const GLubyte *name, GLdouble *params );
        void       (WINE_GLAPI *p_glGetProgramNamedParameterfvNV)( GLuint id, GLsizei len, const GLubyte *name, GLfloat *params );
        void       (WINE_GLAPI *p_glGetProgramParameterdvNV)( GLenum target, GLuint index, GLenum pname, GLdouble *params );
        void       (WINE_GLAPI *p_glGetProgramParameterfvNV)( GLenum target, GLuint index, GLenum pname, GLfloat *params );
        void       (WINE_GLAPI *p_glGetProgramPipelineInfoLog)( GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog );
        void       (WINE_GLAPI *p_glGetProgramPipelineiv)( GLuint pipeline, GLenum pname, GLint *params );
        GLuint     (WINE_GLAPI *p_glGetProgramResourceIndex)( GLuint program, GLenum programInterface, const GLchar *name );
        GLint      (WINE_GLAPI *p_glGetProgramResourceLocation)( GLuint program, GLenum programInterface, const GLchar *name );
        GLint      (WINE_GLAPI *p_glGetProgramResourceLocationIndex)( GLuint program, GLenum programInterface, const GLchar *name );
        void       (WINE_GLAPI *p_glGetProgramResourceName)( GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name );
        void       (WINE_GLAPI *p_glGetProgramResourcefvNV)( GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei count, GLsizei *length, GLfloat *params );
        void       (WINE_GLAPI *p_glGetProgramResourceiv)( GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei count, GLsizei *length, GLint *params );
        void       (WINE_GLAPI *p_glGetProgramStageiv)( GLuint program, GLenum shadertype, GLenum pname, GLint *values );
        void       (WINE_GLAPI *p_glGetProgramStringARB)( GLenum target, GLenum pname, void *string );
        void       (WINE_GLAPI *p_glGetProgramStringNV)( GLuint id, GLenum pname, GLubyte *program );
        void       (WINE_GLAPI *p_glGetProgramSubroutineParameteruivNV)( GLenum target, GLuint index, GLuint *param );
        void       (WINE_GLAPI *p_glGetProgramiv)( GLuint program, GLenum pname, GLint *params );
        void       (WINE_GLAPI *p_glGetProgramivARB)( GLenum target, GLenum pname, GLint *params );
        void       (WINE_GLAPI *p_glGetProgramivNV)( GLuint id, GLenum pname, GLint *params );
        void       (WINE_GLAPI *p_glGetQueryBufferObjecti64v)( GLuint id, GLuint buffer, GLenum pname, GLintptr offset );
        void       (WINE_GLAPI *p_glGetQueryBufferObjectiv)( GLuint id, GLuint buffer, GLenum pname, GLintptr offset );
        void       (WINE_GLAPI *p_glGetQueryBufferObjectui64v)( GLuint id, GLuint buffer, GLenum pname, GLintptr offset );
        void       (WINE_GLAPI *p_glGetQueryBufferObjectuiv)( GLuint id, GLuint buffer, GLenum pname, GLintptr offset );
        void       (WINE_GLAPI *p_glGetQueryIndexediv)( GLenum target, GLuint index, GLenum pname, GLint *params );
        void       (WINE_GLAPI *p_glGetQueryObjecti64v)( GLuint id, GLenum pname, GLint64 *params );
        void       (WINE_GLAPI *p_glGetQueryObjecti64vEXT)( GLuint id, GLenum pname, GLint64 *params );
        void       (WINE_GLAPI *p_glGetQueryObjectiv)( GLuint id, GLenum pname, GLint *params );
        void       (WINE_GLAPI *p_glGetQueryObjectivARB)( GLuint id, GLenum pname, GLint *params );
        void       (WINE_GLAPI *p_glGetQueryObjectui64v)( GLuint id, GLenum pname, GLuint64 *params );
        void       (WINE_GLAPI *p_glGetQueryObjectui64vEXT)( GLuint id, GLenum pname, GLuint64 *params );
        void       (WINE_GLAPI *p_glGetQueryObjectuiv)( GLuint id, GLenum pname, GLuint *params );
        void       (WINE_GLAPI *p_glGetQueryObjectuivARB)( GLuint id, GLenum pname, GLuint *params );
        void       (WINE_GLAPI *p_glGetQueryiv)( GLenum target, GLenum pname, GLint *params );
        void       (WINE_GLAPI *p_glGetQueryivARB)( GLenum target, GLenum pname, GLint *params );
        void       (WINE_GLAPI *p_glGetRenderbufferParameteriv)( GLenum target, GLenum pname, GLint *params );
        void       (WINE_GLAPI *p_glGetRenderbufferParameterivEXT)( GLenum target, GLenum pname, GLint *params );
        void       (WINE_GLAPI *p_glGetSamplerParameterIiv)( GLuint sampler, GLenum pname, GLint *params );
        void       (WINE_GLAPI *p_glGetSamplerParameterIuiv)( GLuint sampler, GLenum pname, GLuint *params );
        void       (WINE_GLAPI *p_glGetSamplerParameterfv)( GLuint sampler, GLenum pname, GLfloat *params );
        void       (WINE_GLAPI *p_glGetSamplerParameteriv)( GLuint sampler, GLenum pname, GLint *params );
        void       (WINE_GLAPI *p_glGetSemaphoreParameterui64vEXT)( GLuint semaphore, GLenum pname, GLuint64 *params );
        void       (WINE_GLAPI *p_glGetSeparableFilter)( GLenum target, GLenum format, GLenum type, void *row, void *column, void *span );
        void       (WINE_GLAPI *p_glGetSeparableFilterEXT)( GLenum target, GLenum format, GLenum type, void *row, void *column, void *span );
        void       (WINE_GLAPI *p_glGetShaderInfoLog)( GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog );
        void       (WINE_GLAPI *p_glGetShaderPrecisionFormat)( GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision );
        void       (WINE_GLAPI *p_glGetShaderSource)( GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source );
        void       (WINE_GLAPI *p_glGetShaderSourceARB)( GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *source );
        void       (WINE_GLAPI *p_glGetShaderiv)( GLuint shader, GLenum pname, GLint *params );
        void       (WINE_GLAPI *p_glGetShadingRateImagePaletteNV)( GLuint viewport, GLuint entry, GLenum *rate );
        void       (WINE_GLAPI *p_glGetShadingRateSampleLocationivNV)( GLenum rate, GLuint samples, GLuint index, GLint *location );
        void       (WINE_GLAPI *p_glGetSharpenTexFuncSGIS)( GLenum target, GLfloat *points );
        GLushort   (WINE_GLAPI *p_glGetStageIndexNV)( GLenum shadertype );
        const GLubyte * (WINE_GLAPI *p_glGetStringi)( GLenum name, GLuint index );
        GLuint     (WINE_GLAPI *p_glGetSubroutineIndex)( GLuint program, GLenum shadertype, const GLchar *name );
        GLint      (WINE_GLAPI *p_glGetSubroutineUniformLocation)( GLuint program, GLenum shadertype, const GLchar *name );
        void       (WINE_GLAPI *p_glGetSynciv)( GLsync sync, GLenum pname, GLsizei count, GLsizei *length, GLint *values );
        void       (WINE_GLAPI *p_glGetTexBumpParameterfvATI)( GLenum pname, GLfloat *param );
        void       (WINE_GLAPI *p_glGetTexBumpParameterivATI)( GLenum pname, GLint *param );
        void       (WINE_GLAPI *p_glGetTexEnvxvOES)( GLenum target, GLenum pname, GLfixed *params );
        void       (WINE_GLAPI *p_glGetTexFilterFuncSGIS)( GLenum target, GLenum filter, GLfloat *weights );
        void       (WINE_GLAPI *p_glGetTexGenxvOES)( GLenum coord, GLenum pname, GLfixed *params );
        void       (WINE_GLAPI *p_glGetTexLevelParameterxvOES)( GLenum target, GLint level, GLenum pname, GLfixed *params );
        void       (WINE_GLAPI *p_glGetTexParameterIiv)( GLenum target, GLenum pname, GLint *params );
        void       (WINE_GLAPI *p_glGetTexParameterIivEXT)( GLenum target, GLenum pname, GLint *params );
        void       (WINE_GLAPI *p_glGetTexParameterIuiv)( GLenum target, GLenum pname, GLuint *params );
        void       (WINE_GLAPI *p_glGetTexParameterIuivEXT)( GLenum target, GLenum pname, GLuint *params );
        void       (WINE_GLAPI *p_glGetTexParameterPointervAPPLE)( GLenum target, GLenum pname, void **params );
        void       (WINE_GLAPI *p_glGetTexParameterxvOES)( GLenum target, GLenum pname, GLfixed *params );
        GLuint64   (WINE_GLAPI *p_glGetTextureHandleARB)( GLuint texture );
        GLuint64   (WINE_GLAPI *p_glGetTextureHandleNV)( GLuint texture );
        void       (WINE_GLAPI *p_glGetTextureImage)( GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels );
        void       (WINE_GLAPI *p_glGetTextureImageEXT)( GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, void *pixels );
        void       (WINE_GLAPI *p_glGetTextureLevelParameterfv)( GLuint texture, GLint level, GLenum pname, GLfloat *params );
        void       (WINE_GLAPI *p_glGetTextureLevelParameterfvEXT)( GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat *params );
        void       (WINE_GLAPI *p_glGetTextureLevelParameteriv)( GLuint texture, GLint level, GLenum pname, GLint *params );
        void       (WINE_GLAPI *p_glGetTextureLevelParameterivEXT)( GLuint texture, GLenum target, GLint level, GLenum pname, GLint *params );
        void       (WINE_GLAPI *p_glGetTextureParameterIiv)( GLuint texture, GLenum pname, GLint *params );
        void       (WINE_GLAPI *p_glGetTextureParameterIivEXT)( GLuint texture, GLenum target, GLenum pname, GLint *params );
        void       (WINE_GLAPI *p_glGetTextureParameterIuiv)( GLuint texture, GLenum pname, GLuint *params );
        void       (WINE_GLAPI *p_glGetTextureParameterIuivEXT)( GLuint texture, GLenum target, GLenum pname, GLuint *params );
        void       (WINE_GLAPI *p_glGetTextureParameterfv)( GLuint texture, GLenum pname, GLfloat *params );
        void       (WINE_GLAPI *p_glGetTextureParameterfvEXT)( GLuint texture, GLenum target, GLenum pname, GLfloat *params );
        void       (WINE_GLAPI *p_glGetTextureParameteriv)( GLuint texture, GLenum pname, GLint *params );
        void       (WINE_GLAPI *p_glGetTextureParameterivEXT)( GLuint texture, GLenum target, GLenum pname, GLint *params );
        GLuint64   (WINE_GLAPI *p_glGetTextureSamplerHandleARB)( GLuint texture, GLuint sampler );
        GLuint64   (WINE_GLAPI *p_glGetTextureSamplerHandleNV)( GLuint texture, GLuint sampler );
        void       (WINE_GLAPI *p_glGetTextureSubImage)( GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void *pixels );
        void       (WINE_GLAPI *p_glGetTrackMatrixivNV)( GLenum target, GLuint address, GLenum pname, GLint *params );
        void       (WINE_GLAPI *p_glGetTransformFeedbackVarying)( GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name );
        void       (WINE_GLAPI *p_glGetTransformFeedbackVaryingEXT)( GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name );
        void       (WINE_GLAPI *p_glGetTransformFeedbackVaryingNV)( GLuint program, GLuint index, GLint *location );
        void       (WINE_GLAPI *p_glGetTransformFeedbacki64_v)( GLuint xfb, GLenum pname, GLuint index, GLint64 *param );
        void       (WINE_GLAPI *p_glGetTransformFeedbacki_v)( GLuint xfb, GLenum pname, GLuint index, GLint *param );
        void       (WINE_GLAPI *p_glGetTransformFeedbackiv)( GLuint xfb, GLenum pname, GLint *param );
        GLuint     (WINE_GLAPI *p_glGetUniformBlockIndex)( GLuint program, const GLchar *uniformBlockName );
        GLint      (WINE_GLAPI *p_glGetUniformBufferSizeEXT)( GLuint program, GLint location );
        void       (WINE_GLAPI *p_glGetUniformIndices)( GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices );
        GLint      (WINE_GLAPI *p_glGetUniformLocation)( GLuint program, const GLchar *name );
        GLint      (WINE_GLAPI *p_glGetUniformLocationARB)( GLhandleARB programObj, const GLcharARB *name );
        GLintptr   (WINE_GLAPI *p_glGetUniformOffsetEXT)( GLuint program, GLint location );
        void       (WINE_GLAPI *p_glGetUniformSubroutineuiv)( GLenum shadertype, GLint location, GLuint *params );
        void       (WINE_GLAPI *p_glGetUniformdv)( GLuint program, GLint location, GLdouble *params );
        void       (WINE_GLAPI *p_glGetUniformfv)( GLuint program, GLint location, GLfloat *params );
        void       (WINE_GLAPI *p_glGetUniformfvARB)( GLhandleARB programObj, GLint location, GLfloat *params );
        void       (WINE_GLAPI *p_glGetUniformi64vARB)( GLuint program, GLint location, GLint64 *params );
        void       (WINE_GLAPI *p_glGetUniformi64vNV)( GLuint program, GLint location, GLint64EXT *params );
        void       (WINE_GLAPI *p_glGetUniformiv)( GLuint program, GLint location, GLint *params );
        void       (WINE_GLAPI *p_glGetUniformivARB)( GLhandleARB programObj, GLint location, GLint *params );
        void       (WINE_GLAPI *p_glGetUniformui64vARB)( GLuint program, GLint location, GLuint64 *params );
        void       (WINE_GLAPI *p_glGetUniformui64vNV)( GLuint program, GLint location, GLuint64EXT *params );
        void       (WINE_GLAPI *p_glGetUniformuiv)( GLuint program, GLint location, GLuint *params );
        void       (WINE_GLAPI *p_glGetUniformuivEXT)( GLuint program, GLint location, GLuint *params );
        void       (WINE_GLAPI *p_glGetUnsignedBytei_vEXT)( GLenum target, GLuint index, GLubyte *data );
        void       (WINE_GLAPI *p_glGetUnsignedBytevEXT)( GLenum pname, GLubyte *data );
        void       (WINE_GLAPI *p_glGetVariantArrayObjectfvATI)( GLuint id, GLenum pname, GLfloat *params );
        void       (WINE_GLAPI *p_glGetVariantArrayObjectivATI)( GLuint id, GLenum pname, GLint *params );
        void       (WINE_GLAPI *p_glGetVariantBooleanvEXT)( GLuint id, GLenum value, GLboolean *data );
        void       (WINE_GLAPI *p_glGetVariantFloatvEXT)( GLuint id, GLenum value, GLfloat *data );
        void       (WINE_GLAPI *p_glGetVariantIntegervEXT)( GLuint id, GLenum value, GLint *data );
        void       (WINE_GLAPI *p_glGetVariantPointervEXT)( GLuint id, GLenum value, void **data );
        GLint      (WINE_GLAPI *p_glGetVaryingLocationNV)( GLuint program, const GLchar *name );
        void       (WINE_GLAPI *p_glGetVertexArrayIndexed64iv)( GLuint vaobj, GLuint index, GLenum pname, GLint64 *param );
        void       (WINE_GLAPI *p_glGetVertexArrayIndexediv)( GLuint vaobj, GLuint index, GLenum pname, GLint *param );
        void       (WINE_GLAPI *p_glGetVertexArrayIntegeri_vEXT)( GLuint vaobj, GLuint index, GLenum pname, GLint *param );
        void       (WINE_GLAPI *p_glGetVertexArrayIntegervEXT)( GLuint vaobj, GLenum pname, GLint *param );
        void       (WINE_GLAPI *p_glGetVertexArrayPointeri_vEXT)( GLuint vaobj, GLuint index, GLenum pname, void **param );
        void       (WINE_GLAPI *p_glGetVertexArrayPointervEXT)( GLuint vaobj, GLenum pname, void **param );
        void       (WINE_GLAPI *p_glGetVertexArrayiv)( GLuint vaobj, GLenum pname, GLint *param );
        void       (WINE_GLAPI *p_glGetVertexAttribArrayObjectfvATI)( GLuint index, GLenum pname, GLfloat *params );
        void       (WINE_GLAPI *p_glGetVertexAttribArrayObjectivATI)( GLuint index, GLenum pname, GLint *params );
        void       (WINE_GLAPI *p_glGetVertexAttribIiv)( GLuint index, GLenum pname, GLint *params );
        void       (WINE_GLAPI *p_glGetVertexAttribIivEXT)( GLuint index, GLenum pname, GLint *params );
        void       (WINE_GLAPI *p_glGetVertexAttribIuiv)( GLuint index, GLenum pname, GLuint *params );
        void       (WINE_GLAPI *p_glGetVertexAttribIuivEXT)( GLuint index, GLenum pname, GLuint *params );
        void       (WINE_GLAPI *p_glGetVertexAttribLdv)( GLuint index, GLenum pname, GLdouble *params );
        void       (WINE_GLAPI *p_glGetVertexAttribLdvEXT)( GLuint index, GLenum pname, GLdouble *params );
        void       (WINE_GLAPI *p_glGetVertexAttribLi64vNV)( GLuint index, GLenum pname, GLint64EXT *params );
        void       (WINE_GLAPI *p_glGetVertexAttribLui64vARB)( GLuint index, GLenum pname, GLuint64EXT *params );
        void       (WINE_GLAPI *p_glGetVertexAttribLui64vNV)( GLuint index, GLenum pname, GLuint64EXT *params );
        void       (WINE_GLAPI *p_glGetVertexAttribPointerv)( GLuint index, GLenum pname, void **pointer );
        void       (WINE_GLAPI *p_glGetVertexAttribPointervARB)( GLuint index, GLenum pname, void **pointer );
        void       (WINE_GLAPI *p_glGetVertexAttribPointervNV)( GLuint index, GLenum pname, void **pointer );
        void       (WINE_GLAPI *p_glGetVertexAttribdv)( GLuint index, GLenum pname, GLdouble *params );
        void       (WINE_GLAPI *p_glGetVertexAttribdvARB)( GLuint index, GLenum pname, GLdouble *params );
        void       (WINE_GLAPI *p_glGetVertexAttribdvNV)( GLuint index, GLenum pname, GLdouble *params );
        void       (WINE_GLAPI *p_glGetVertexAttribfv)( GLuint index, GLenum pname, GLfloat *params );
        void       (WINE_GLAPI *p_glGetVertexAttribfvARB)( GLuint index, GLenum pname, GLfloat *params );
        void       (WINE_GLAPI *p_glGetVertexAttribfvNV)( GLuint index, GLenum pname, GLfloat *params );
        void       (WINE_GLAPI *p_glGetVertexAttribiv)( GLuint index, GLenum pname, GLint *params );
        void       (WINE_GLAPI *p_glGetVertexAttribivARB)( GLuint index, GLenum pname, GLint *params );
        void       (WINE_GLAPI *p_glGetVertexAttribivNV)( GLuint index, GLenum pname, GLint *params );
        void       (WINE_GLAPI *p_glGetVideoCaptureStreamdvNV)( GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble *params );
        void       (WINE_GLAPI *p_glGetVideoCaptureStreamfvNV)( GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat *params );
        void       (WINE_GLAPI *p_glGetVideoCaptureStreamivNV)( GLuint video_capture_slot, GLuint stream, GLenum pname, GLint *params );
        void       (WINE_GLAPI *p_glGetVideoCaptureivNV)( GLuint video_capture_slot, GLenum pname, GLint *params );
        void       (WINE_GLAPI *p_glGetVideoi64vNV)( GLuint video_slot, GLenum pname, GLint64EXT *params );
        void       (WINE_GLAPI *p_glGetVideoivNV)( GLuint video_slot, GLenum pname, GLint *params );
        void       (WINE_GLAPI *p_glGetVideoui64vNV)( GLuint video_slot, GLenum pname, GLuint64EXT *params );
        void       (WINE_GLAPI *p_glGetVideouivNV)( GLuint video_slot, GLenum pname, GLuint *params );
        GLVULKANPROCNV (WINE_GLAPI *p_glGetVkProcAddrNV)( const GLchar *name );
        void       (WINE_GLAPI *p_glGetnColorTable)( GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *table );
        void       (WINE_GLAPI *p_glGetnColorTableARB)( GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *table );
        void       (WINE_GLAPI *p_glGetnCompressedTexImage)( GLenum target, GLint lod, GLsizei bufSize, void *pixels );
        void       (WINE_GLAPI *p_glGetnCompressedTexImageARB)( GLenum target, GLint lod, GLsizei bufSize, void *img );
        void       (WINE_GLAPI *p_glGetnConvolutionFilter)( GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *image );
        void       (WINE_GLAPI *p_glGetnConvolutionFilterARB)( GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *image );
        void       (WINE_GLAPI *p_glGetnHistogram)( GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values );
        void       (WINE_GLAPI *p_glGetnHistogramARB)( GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values );
        void       (WINE_GLAPI *p_glGetnMapdv)( GLenum target, GLenum query, GLsizei bufSize, GLdouble *v );
        void       (WINE_GLAPI *p_glGetnMapdvARB)( GLenum target, GLenum query, GLsizei bufSize, GLdouble *v );
        void       (WINE_GLAPI *p_glGetnMapfv)( GLenum target, GLenum query, GLsizei bufSize, GLfloat *v );
        void       (WINE_GLAPI *p_glGetnMapfvARB)( GLenum target, GLenum query, GLsizei bufSize, GLfloat *v );
        void       (WINE_GLAPI *p_glGetnMapiv)( GLenum target, GLenum query, GLsizei bufSize, GLint *v );
        void       (WINE_GLAPI *p_glGetnMapivARB)( GLenum target, GLenum query, GLsizei bufSize, GLint *v );
        void       (WINE_GLAPI *p_glGetnMinmax)( GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values );
        void       (WINE_GLAPI *p_glGetnMinmaxARB)( GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values );
        void       (WINE_GLAPI *p_glGetnPixelMapfv)( GLenum map, GLsizei bufSize, GLfloat *values );
        void       (WINE_GLAPI *p_glGetnPixelMapfvARB)( GLenum map, GLsizei bufSize, GLfloat *values );
        void       (WINE_GLAPI *p_glGetnPixelMapuiv)( GLenum map, GLsizei bufSize, GLuint *values );
        void       (WINE_GLAPI *p_glGetnPixelMapuivARB)( GLenum map, GLsizei bufSize, GLuint *values );
        void       (WINE_GLAPI *p_glGetnPixelMapusv)( GLenum map, GLsizei bufSize, GLushort *values );
        void       (WINE_GLAPI *p_glGetnPixelMapusvARB)( GLenum map, GLsizei bufSize, GLushort *values );
        void       (WINE_GLAPI *p_glGetnPolygonStipple)( GLsizei bufSize, GLubyte *pattern );
        void       (WINE_GLAPI *p_glGetnPolygonStippleARB)( GLsizei bufSize, GLubyte *pattern );
        void       (WINE_GLAPI *p_glGetnSeparableFilter)( GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void *row, GLsizei columnBufSize, void *column, void *span );
        void       (WINE_GLAPI *p_glGetnSeparableFilterARB)( GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void *row, GLsizei columnBufSize, void *column, void *span );
        void       (WINE_GLAPI *p_glGetnTexImage)( GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels );
        void       (WINE_GLAPI *p_glGetnTexImageARB)( GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *img );
        void       (WINE_GLAPI *p_glGetnUniformdv)( GLuint program, GLint location, GLsizei bufSize, GLdouble *params );
        void       (WINE_GLAPI *p_glGetnUniformdvARB)( GLuint program, GLint location, GLsizei bufSize, GLdouble *params );
        void       (WINE_GLAPI *p_glGetnUniformfv)( GLuint program, GLint location, GLsizei bufSize, GLfloat *params );
        void       (WINE_GLAPI *p_glGetnUniformfvARB)( GLuint program, GLint location, GLsizei bufSize, GLfloat *params );
        void       (WINE_GLAPI *p_glGetnUniformi64vARB)( GLuint program, GLint location, GLsizei bufSize, GLint64 *params );
        void       (WINE_GLAPI *p_glGetnUniformiv)( GLuint program, GLint location, GLsizei bufSize, GLint *params );
        void       (WINE_GLAPI *p_glGetnUniformivARB)( GLuint program, GLint location, GLsizei bufSize, GLint *params );
        void       (WINE_GLAPI *p_glGetnUniformui64vARB)( GLuint program, GLint location, GLsizei bufSize, GLuint64 *params );
        void       (WINE_GLAPI *p_glGetnUniformuiv)( GLuint program, GLint location, GLsizei bufSize, GLuint *params );
        void       (WINE_GLAPI *p_glGetnUniformuivARB)( GLuint program, GLint location, GLsizei bufSize, GLuint *params );
        void       (WINE_GLAPI *p_glGlobalAlphaFactorbSUN)( GLbyte factor );
        void       (WINE_GLAPI *p_glGlobalAlphaFactordSUN)( GLdouble factor );
        void       (WINE_GLAPI *p_glGlobalAlphaFactorfSUN)( GLfloat factor );
        void       (WINE_GLAPI *p_glGlobalAlphaFactoriSUN)( GLint factor );
        void       (WINE_GLAPI *p_glGlobalAlphaFactorsSUN)( GLshort factor );
        void       (WINE_GLAPI *p_glGlobalAlphaFactorubSUN)( GLubyte factor );
        void       (WINE_GLAPI *p_glGlobalAlphaFactoruiSUN)( GLuint factor );
        void       (WINE_GLAPI *p_glGlobalAlphaFactorusSUN)( GLushort factor );
        void       (WINE_GLAPI *p_glHintPGI)( GLenum target, GLint mode );
        void       (WINE_GLAPI *p_glHistogram)( GLenum target, GLsizei width, GLenum internalformat, GLboolean sink );
        void       (WINE_GLAPI *p_glHistogramEXT)( GLenum target, GLsizei width, GLenum internalformat, GLboolean sink );
        void       (WINE_GLAPI *p_glIglooInterfaceSGIX)( GLenum pname, const void *params );
        void       (WINE_GLAPI *p_glImageTransformParameterfHP)( GLenum target, GLenum pname, GLfloat param );
        void       (WINE_GLAPI *p_glImageTransformParameterfvHP)( GLenum target, GLenum pname, const GLfloat *params );
        void       (WINE_GLAPI *p_glImageTransformParameteriHP)( GLenum target, GLenum pname, GLint param );
        void       (WINE_GLAPI *p_glImageTransformParameterivHP)( GLenum target, GLenum pname, const GLint *params );
        void       (WINE_GLAPI *p_glImportMemoryFdEXT)( GLuint memory, GLuint64 size, GLenum handleType, GLint fd );
        void       (WINE_GLAPI *p_glImportMemoryWin32HandleEXT)( GLuint memory, GLuint64 size, GLenum handleType, void *handle );
        void       (WINE_GLAPI *p_glImportMemoryWin32NameEXT)( GLuint memory, GLuint64 size, GLenum handleType, const void *name );
        void       (WINE_GLAPI *p_glImportSemaphoreFdEXT)( GLuint semaphore, GLenum handleType, GLint fd );
        void       (WINE_GLAPI *p_glImportSemaphoreWin32HandleEXT)( GLuint semaphore, GLenum handleType, void *handle );
        void       (WINE_GLAPI *p_glImportSemaphoreWin32NameEXT)( GLuint semaphore, GLenum handleType, const void *name );
        GLsync     (WINE_GLAPI *p_glImportSyncEXT)( GLenum external_sync_type, GLintptr external_sync, GLbitfield flags );
        void       (WINE_GLAPI *p_glIndexFormatNV)( GLenum type, GLsizei stride );
        void       (WINE_GLAPI *p_glIndexFuncEXT)( GLenum func, GLclampf ref );
        void       (WINE_GLAPI *p_glIndexMaterialEXT)( GLenum face, GLenum mode );
        void       (WINE_GLAPI *p_glIndexPointerEXT)( GLenum type, GLsizei stride, GLsizei count, const void *pointer );
        void       (WINE_GLAPI *p_glIndexPointerListIBM)( GLenum type, GLint stride, const void **pointer, GLint ptrstride );
        void       (WINE_GLAPI *p_glIndexxOES)( GLfixed component );
        void       (WINE_GLAPI *p_glIndexxvOES)( const GLfixed *component );
        void       (WINE_GLAPI *p_glInsertComponentEXT)( GLuint res, GLuint src, GLuint num );
        void       (WINE_GLAPI *p_glInsertEventMarkerEXT)( GLsizei length, const GLchar *marker );
        void       (WINE_GLAPI *p_glInstrumentsBufferSGIX)( GLsizei size, GLint *buffer );
        void       (WINE_GLAPI *p_glInterpolatePathsNV)( GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight );
        void       (WINE_GLAPI *p_glInvalidateBufferData)( GLuint buffer );
        void       (WINE_GLAPI *p_glInvalidateBufferSubData)( GLuint buffer, GLintptr offset, GLsizeiptr length );
        void       (WINE_GLAPI *p_glInvalidateFramebuffer)( GLenum target, GLsizei numAttachments, const GLenum *attachments );
        void       (WINE_GLAPI *p_glInvalidateNamedFramebufferData)( GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments );
        void       (WINE_GLAPI *p_glInvalidateNamedFramebufferSubData)( GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height );
        void       (WINE_GLAPI *p_glInvalidateSubFramebuffer)( GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height );
        void       (WINE_GLAPI *p_glInvalidateTexImage)( GLuint texture, GLint level );
        void       (WINE_GLAPI *p_glInvalidateTexSubImage)( GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth );
        GLboolean  (WINE_GLAPI *p_glIsAsyncMarkerSGIX)( GLuint marker );
        GLboolean  (WINE_GLAPI *p_glIsBuffer)( GLuint buffer );
        GLboolean  (WINE_GLAPI *p_glIsBufferARB)( GLuint buffer );
        GLboolean  (WINE_GLAPI *p_glIsBufferResidentNV)( GLenum target );
        GLboolean  (WINE_GLAPI *p_glIsCommandListNV)( GLuint list );
        GLboolean  (WINE_GLAPI *p_glIsEnabledIndexedEXT)( GLenum target, GLuint index );
        GLboolean  (WINE_GLAPI *p_glIsEnabledi)( GLenum target, GLuint index );
        GLboolean  (WINE_GLAPI *p_glIsFenceAPPLE)( GLuint fence );
        GLboolean  (WINE_GLAPI *p_glIsFenceNV)( GLuint fence );
        GLboolean  (WINE_GLAPI *p_glIsFramebuffer)( GLuint framebuffer );
        GLboolean  (WINE_GLAPI *p_glIsFramebufferEXT)( GLuint framebuffer );
        GLboolean  (WINE_GLAPI *p_glIsImageHandleResidentARB)( GLuint64 handle );
        GLboolean  (WINE_GLAPI *p_glIsImageHandleResidentNV)( GLuint64 handle );
        GLboolean  (WINE_GLAPI *p_glIsMemoryObjectEXT)( GLuint memoryObject );
        GLboolean  (WINE_GLAPI *p_glIsNameAMD)( GLenum identifier, GLuint name );
        GLboolean  (WINE_GLAPI *p_glIsNamedBufferResidentNV)( GLuint buffer );
        GLboolean  (WINE_GLAPI *p_glIsNamedStringARB)( GLint namelen, const GLchar *name );
        GLboolean  (WINE_GLAPI *p_glIsObjectBufferATI)( GLuint buffer );
        GLboolean  (WINE_GLAPI *p_glIsOcclusionQueryNV)( GLuint id );
        GLboolean  (WINE_GLAPI *p_glIsPathNV)( GLuint path );
        GLboolean  (WINE_GLAPI *p_glIsPointInFillPathNV)( GLuint path, GLuint mask, GLfloat x, GLfloat y );
        GLboolean  (WINE_GLAPI *p_glIsPointInStrokePathNV)( GLuint path, GLfloat x, GLfloat y );
        GLboolean  (WINE_GLAPI *p_glIsProgram)( GLuint program );
        GLboolean  (WINE_GLAPI *p_glIsProgramARB)( GLuint program );
        GLboolean  (WINE_GLAPI *p_glIsProgramNV)( GLuint id );
        GLboolean  (WINE_GLAPI *p_glIsProgramPipeline)( GLuint pipeline );
        GLboolean  (WINE_GLAPI *p_glIsQuery)( GLuint id );
        GLboolean  (WINE_GLAPI *p_glIsQueryARB)( GLuint id );
        GLboolean  (WINE_GLAPI *p_glIsRenderbuffer)( GLuint renderbuffer );
        GLboolean  (WINE_GLAPI *p_glIsRenderbufferEXT)( GLuint renderbuffer );
        GLboolean  (WINE_GLAPI *p_glIsSampler)( GLuint sampler );
        GLboolean  (WINE_GLAPI *p_glIsSemaphoreEXT)( GLuint semaphore );
        GLboolean  (WINE_GLAPI *p_glIsShader)( GLuint shader );
        GLboolean  (WINE_GLAPI *p_glIsStateNV)( GLuint state );
        GLboolean  (WINE_GLAPI *p_glIsSync)( GLsync sync );
        GLboolean  (WINE_GLAPI *p_glIsTextureEXT)( GLuint texture );
        GLboolean  (WINE_GLAPI *p_glIsTextureHandleResidentARB)( GLuint64 handle );
        GLboolean  (WINE_GLAPI *p_glIsTextureHandleResidentNV)( GLuint64 handle );
        GLboolean  (WINE_GLAPI *p_glIsTransformFeedback)( GLuint id );
        GLboolean  (WINE_GLAPI *p_glIsTransformFeedbackNV)( GLuint id );
        GLboolean  (WINE_GLAPI *p_glIsVariantEnabledEXT)( GLuint id, GLenum cap );
        GLboolean  (WINE_GLAPI *p_glIsVertexArray)( GLuint array );
        GLboolean  (WINE_GLAPI *p_glIsVertexArrayAPPLE)( GLuint array );
        GLboolean  (WINE_GLAPI *p_glIsVertexAttribEnabledAPPLE)( GLuint index, GLenum pname );
        void       (WINE_GLAPI *p_glLGPUCopyImageSubDataNVX)( GLuint sourceGpu, GLbitfield destinationGpuMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srxY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth );
        void       (WINE_GLAPI *p_glLGPUInterlockNVX)(void);
        void       (WINE_GLAPI *p_glLGPUNamedBufferSubDataNVX)( GLbitfield gpuMask, GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data );
        void       (WINE_GLAPI *p_glLabelObjectEXT)( GLenum type, GLuint object, GLsizei length, const GLchar *label );
        void       (WINE_GLAPI *p_glLightEnviSGIX)( GLenum pname, GLint param );
        void       (WINE_GLAPI *p_glLightModelxOES)( GLenum pname, GLfixed param );
        void       (WINE_GLAPI *p_glLightModelxvOES)( GLenum pname, const GLfixed *param );
        void       (WINE_GLAPI *p_glLightxOES)( GLenum light, GLenum pname, GLfixed param );
        void       (WINE_GLAPI *p_glLightxvOES)( GLenum light, GLenum pname, const GLfixed *params );
        void       (WINE_GLAPI *p_glLineWidthxOES)( GLfixed width );
        void       (WINE_GLAPI *p_glLinkProgram)( GLuint program );
        void       (WINE_GLAPI *p_glLinkProgramARB)( GLhandleARB programObj );
        void       (WINE_GLAPI *p_glListDrawCommandsStatesClientNV)( GLuint list, GLuint segment, const void **indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count );
        void       (WINE_GLAPI *p_glListParameterfSGIX)( GLuint list, GLenum pname, GLfloat param );
        void       (WINE_GLAPI *p_glListParameterfvSGIX)( GLuint list, GLenum pname, const GLfloat *params );
        void       (WINE_GLAPI *p_glListParameteriSGIX)( GLuint list, GLenum pname, GLint param );
        void       (WINE_GLAPI *p_glListParameterivSGIX)( GLuint list, GLenum pname, const GLint *params );
        void       (WINE_GLAPI *p_glLoadIdentityDeformationMapSGIX)( GLbitfield mask );
        void       (WINE_GLAPI *p_glLoadMatrixxOES)( const GLfixed *m );
        void       (WINE_GLAPI *p_glLoadProgramNV)( GLenum target, GLuint id, GLsizei len, const GLubyte *program );
        void       (WINE_GLAPI *p_glLoadTransposeMatrixd)( const GLdouble *m );
        void       (WINE_GLAPI *p_glLoadTransposeMatrixdARB)( const GLdouble *m );
        void       (WINE_GLAPI *p_glLoadTransposeMatrixf)( const GLfloat *m );
        void       (WINE_GLAPI *p_glLoadTransposeMatrixfARB)( const GLfloat *m );
        void       (WINE_GLAPI *p_glLoadTransposeMatrixxOES)( const GLfixed *m );
        void       (WINE_GLAPI *p_glLockArraysEXT)( GLint first, GLsizei count );
        void       (WINE_GLAPI *p_glMTexCoord2fSGIS)( GLenum target, GLfloat s, GLfloat t );
        void       (WINE_GLAPI *p_glMTexCoord2fvSGIS)( GLenum target, GLfloat * v );
        void       (WINE_GLAPI *p_glMakeBufferNonResidentNV)( GLenum target );
        void       (WINE_GLAPI *p_glMakeBufferResidentNV)( GLenum target, GLenum access );
        void       (WINE_GLAPI *p_glMakeImageHandleNonResidentARB)( GLuint64 handle );
        void       (WINE_GLAPI *p_glMakeImageHandleNonResidentNV)( GLuint64 handle );
        void       (WINE_GLAPI *p_glMakeImageHandleResidentARB)( GLuint64 handle, GLenum access );
        void       (WINE_GLAPI *p_glMakeImageHandleResidentNV)( GLuint64 handle, GLenum access );
        void       (WINE_GLAPI *p_glMakeNamedBufferNonResidentNV)( GLuint buffer );
        void       (WINE_GLAPI *p_glMakeNamedBufferResidentNV)( GLuint buffer, GLenum access );
        void       (WINE_GLAPI *p_glMakeTextureHandleNonResidentARB)( GLuint64 handle );
        void       (WINE_GLAPI *p_glMakeTextureHandleNonResidentNV)( GLuint64 handle );
        void       (WINE_GLAPI *p_glMakeTextureHandleResidentARB)( GLuint64 handle );
        void       (WINE_GLAPI *p_glMakeTextureHandleResidentNV)( GLuint64 handle );
        void       (WINE_GLAPI *p_glMap1xOES)( GLenum target, GLfixed u1, GLfixed u2, GLint stride, GLint order, GLfixed points );
        void       (WINE_GLAPI *p_glMap2xOES)( GLenum target, GLfixed u1, GLfixed u2, GLint ustride, GLint uorder, GLfixed v1, GLfixed v2, GLint vstride, GLint vorder, GLfixed points );
        void *     (WINE_GLAPI *p_glMapBuffer)( GLenum target, GLenum access );
        void *     (WINE_GLAPI *p_glMapBufferARB)( GLenum target, GLenum access );
        void *     (WINE_GLAPI *p_glMapBufferRange)( GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access );
        void       (WINE_GLAPI *p_glMapControlPointsNV)( GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const void *points );
        void       (WINE_GLAPI *p_glMapGrid1xOES)( GLint n, GLfixed u1, GLfixed u2 );
        void       (WINE_GLAPI *p_glMapGrid2xOES)( GLint n, GLfixed u1, GLfixed u2, GLfixed v1, GLfixed v2 );
        void *     (WINE_GLAPI *p_glMapNamedBuffer)( GLuint buffer, GLenum access );
        void *     (WINE_GLAPI *p_glMapNamedBufferEXT)( GLuint buffer, GLenum access );
        void *     (WINE_GLAPI *p_glMapNamedBufferRange)( GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access );
        void *     (WINE_GLAPI *p_glMapNamedBufferRangeEXT)( GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access );
        void *     (WINE_GLAPI *p_glMapObjectBufferATI)( GLuint buffer );
        void       (WINE_GLAPI *p_glMapParameterfvNV)( GLenum target, GLenum pname, const GLfloat *params );
        void       (WINE_GLAPI *p_glMapParameterivNV)( GLenum target, GLenum pname, const GLint *params );
        void *     (WINE_GLAPI *p_glMapTexture2DINTEL)( GLuint texture, GLint level, GLbitfield access, GLint *stride, GLenum *layout );
        void       (WINE_GLAPI *p_glMapVertexAttrib1dAPPLE)( GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points );
        void       (WINE_GLAPI *p_glMapVertexAttrib1fAPPLE)( GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points );
        void       (WINE_GLAPI *p_glMapVertexAttrib2dAPPLE)( GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points );
        void       (WINE_GLAPI *p_glMapVertexAttrib2fAPPLE)( GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points );
        void       (WINE_GLAPI *p_glMaterialxOES)( GLenum face, GLenum pname, GLfixed param );
        void       (WINE_GLAPI *p_glMaterialxvOES)( GLenum face, GLenum pname, const GLfixed *param );
        void       (WINE_GLAPI *p_glMatrixFrustumEXT)( GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar );
        void       (WINE_GLAPI *p_glMatrixIndexPointerARB)( GLint size, GLenum type, GLsizei stride, const void *pointer );
        void       (WINE_GLAPI *p_glMatrixIndexubvARB)( GLint size, const GLubyte *indices );
        void       (WINE_GLAPI *p_glMatrixIndexuivARB)( GLint size, const GLuint *indices );
        void       (WINE_GLAPI *p_glMatrixIndexusvARB)( GLint size, const GLushort *indices );
        void       (WINE_GLAPI *p_glMatrixLoad3x2fNV)( GLenum matrixMode, const GLfloat *m );
        void       (WINE_GLAPI *p_glMatrixLoad3x3fNV)( GLenum matrixMode, const GLfloat *m );
        void       (WINE_GLAPI *p_glMatrixLoadIdentityEXT)( GLenum mode );
        void       (WINE_GLAPI *p_glMatrixLoadTranspose3x3fNV)( GLenum matrixMode, const GLfloat *m );
        void       (WINE_GLAPI *p_glMatrixLoadTransposedEXT)( GLenum mode, const GLdouble *m );
        void       (WINE_GLAPI *p_glMatrixLoadTransposefEXT)( GLenum mode, const GLfloat *m );
        void       (WINE_GLAPI *p_glMatrixLoaddEXT)( GLenum mode, const GLdouble *m );
        void       (WINE_GLAPI *p_glMatrixLoadfEXT)( GLenum mode, const GLfloat *m );
        void       (WINE_GLAPI *p_glMatrixMult3x2fNV)( GLenum matrixMode, const GLfloat *m );
        void       (WINE_GLAPI *p_glMatrixMult3x3fNV)( GLenum matrixMode, const GLfloat *m );
        void       (WINE_GLAPI *p_glMatrixMultTranspose3x3fNV)( GLenum matrixMode, const GLfloat *m );
        void       (WINE_GLAPI *p_glMatrixMultTransposedEXT)( GLenum mode, const GLdouble *m );
        void       (WINE_GLAPI *p_glMatrixMultTransposefEXT)( GLenum mode, const GLfloat *m );
        void       (WINE_GLAPI *p_glMatrixMultdEXT)( GLenum mode, const GLdouble *m );
        void       (WINE_GLAPI *p_glMatrixMultfEXT)( GLenum mode, const GLfloat *m );
        void       (WINE_GLAPI *p_glMatrixOrthoEXT)( GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar );
        void       (WINE_GLAPI *p_glMatrixPopEXT)( GLenum mode );
        void       (WINE_GLAPI *p_glMatrixPushEXT)( GLenum mode );
        void       (WINE_GLAPI *p_glMatrixRotatedEXT)( GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z );
        void       (WINE_GLAPI *p_glMatrixRotatefEXT)( GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z );
        void       (WINE_GLAPI *p_glMatrixScaledEXT)( GLenum mode, GLdouble x, GLdouble y, GLdouble z );
        void       (WINE_GLAPI *p_glMatrixScalefEXT)( GLenum mode, GLfloat x, GLfloat y, GLfloat z );
        void       (WINE_GLAPI *p_glMatrixTranslatedEXT)( GLenum mode, GLdouble x, GLdouble y, GLdouble z );
        void       (WINE_GLAPI *p_glMatrixTranslatefEXT)( GLenum mode, GLfloat x, GLfloat y, GLfloat z );
        void       (WINE_GLAPI *p_glMaxShaderCompilerThreadsARB)( GLuint count );
        void       (WINE_GLAPI *p_glMaxShaderCompilerThreadsKHR)( GLuint count );
        void       (WINE_GLAPI *p_glMemoryBarrier)( GLbitfield barriers );
        void       (WINE_GLAPI *p_glMemoryBarrierByRegion)( GLbitfield barriers );
        void       (WINE_GLAPI *p_glMemoryBarrierEXT)( GLbitfield barriers );
        void       (WINE_GLAPI *p_glMemoryObjectParameterivEXT)( GLuint memoryObject, GLenum pname, const GLint *params );
        void       (WINE_GLAPI *p_glMinSampleShading)( GLfloat value );
        void       (WINE_GLAPI *p_glMinSampleShadingARB)( GLfloat value );
        void       (WINE_GLAPI *p_glMinmax)( GLenum target, GLenum internalformat, GLboolean sink );
        void       (WINE_GLAPI *p_glMinmaxEXT)( GLenum target, GLenum internalformat, GLboolean sink );
        void       (WINE_GLAPI *p_glMultMatrixxOES)( const GLfixed *m );
        void       (WINE_GLAPI *p_glMultTransposeMatrixd)( const GLdouble *m );
        void       (WINE_GLAPI *p_glMultTransposeMatrixdARB)( const GLdouble *m );
        void       (WINE_GLAPI *p_glMultTransposeMatrixf)( const GLfloat *m );
        void       (WINE_GLAPI *p_glMultTransposeMatrixfARB)( const GLfloat *m );
        void       (WINE_GLAPI *p_glMultTransposeMatrixxOES)( const GLfixed *m );
        void       (WINE_GLAPI *p_glMultiDrawArrays)( GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount );
        void       (WINE_GLAPI *p_glMultiDrawArraysEXT)( GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount );
        void       (WINE_GLAPI *p_glMultiDrawArraysIndirect)( GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride );
        void       (WINE_GLAPI *p_glMultiDrawArraysIndirectAMD)( GLenum mode, const void *indirect, GLsizei primcount, GLsizei stride );
        void       (WINE_GLAPI *p_glMultiDrawArraysIndirectBindlessCountNV)( GLenum mode, const void *indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount );
        void       (WINE_GLAPI *p_glMultiDrawArraysIndirectBindlessNV)( GLenum mode, const void *indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount );
        void       (WINE_GLAPI *p_glMultiDrawArraysIndirectCount)( GLenum mode, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride );
        void       (WINE_GLAPI *p_glMultiDrawArraysIndirectCountARB)( GLenum mode, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride );
        void       (WINE_GLAPI *p_glMultiDrawElementArrayAPPLE)( GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount );
        void       (WINE_GLAPI *p_glMultiDrawElements)( GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount );
        void       (WINE_GLAPI *p_glMultiDrawElementsBaseVertex)( GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount, const GLint *basevertex );
        void       (WINE_GLAPI *p_glMultiDrawElementsEXT)( GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei primcount );
        void       (WINE_GLAPI *p_glMultiDrawElementsIndirect)( GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride );
        void       (WINE_GLAPI *p_glMultiDrawElementsIndirectAMD)( GLenum mode, GLenum type, const void *indirect, GLsizei primcount, GLsizei stride );
        void       (WINE_GLAPI *p_glMultiDrawElementsIndirectBindlessCountNV)( GLenum mode, GLenum type, const void *indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount );
        void       (WINE_GLAPI *p_glMultiDrawElementsIndirectBindlessNV)( GLenum mode, GLenum type, const void *indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount );
        void       (WINE_GLAPI *p_glMultiDrawElementsIndirectCount)( GLenum mode, GLenum type, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride );
        void       (WINE_GLAPI *p_glMultiDrawElementsIndirectCountARB)( GLenum mode, GLenum type, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride );
        void       (WINE_GLAPI *p_glMultiDrawMeshTasksIndirectCountNV)( GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride );
        void       (WINE_GLAPI *p_glMultiDrawMeshTasksIndirectNV)( GLintptr indirect, GLsizei drawcount, GLsizei stride );
        void       (WINE_GLAPI *p_glMultiDrawRangeElementArrayAPPLE)( GLenum mode, GLuint start, GLuint end, const GLint *first, const GLsizei *count, GLsizei primcount );
        void       (WINE_GLAPI *p_glMultiModeDrawArraysIBM)( const GLenum *mode, const GLint *first, const GLsizei *count, GLsizei primcount, GLint modestride );
        void       (WINE_GLAPI *p_glMultiModeDrawElementsIBM)( const GLenum *mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei primcount, GLint modestride );
        void       (WINE_GLAPI *p_glMultiTexBufferEXT)( GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer );
        void       (WINE_GLAPI *p_glMultiTexCoord1bOES)( GLenum texture, GLbyte s );
        void       (WINE_GLAPI *p_glMultiTexCoord1bvOES)( GLenum texture, const GLbyte *coords );
        void       (WINE_GLAPI *p_glMultiTexCoord1d)( GLenum target, GLdouble s );
        void       (WINE_GLAPI *p_glMultiTexCoord1dARB)( GLenum target, GLdouble s );
        void       (WINE_GLAPI *p_glMultiTexCoord1dSGIS)( GLenum target, GLdouble s );
        void       (WINE_GLAPI *p_glMultiTexCoord1dv)( GLenum target, const GLdouble *v );
        void       (WINE_GLAPI *p_glMultiTexCoord1dvARB)( GLenum target, const GLdouble *v );
        void       (WINE_GLAPI *p_glMultiTexCoord1dvSGIS)( GLenum target, GLdouble * v );
        void       (WINE_GLAPI *p_glMultiTexCoord1f)( GLenum target, GLfloat s );
        void       (WINE_GLAPI *p_glMultiTexCoord1fARB)( GLenum target, GLfloat s );
        void       (WINE_GLAPI *p_glMultiTexCoord1fSGIS)( GLenum target, GLfloat s );
        void       (WINE_GLAPI *p_glMultiTexCoord1fv)( GLenum target, const GLfloat *v );
        void       (WINE_GLAPI *p_glMultiTexCoord1fvARB)( GLenum target, const GLfloat *v );
        void       (WINE_GLAPI *p_glMultiTexCoord1fvSGIS)( GLenum target, const GLfloat * v );
        void       (WINE_GLAPI *p_glMultiTexCoord1hNV)( GLenum target, GLhalfNV s );
        void       (WINE_GLAPI *p_glMultiTexCoord1hvNV)( GLenum target, const GLhalfNV *v );
        void       (WINE_GLAPI *p_glMultiTexCoord1i)( GLenum target, GLint s );
        void       (WINE_GLAPI *p_glMultiTexCoord1iARB)( GLenum target, GLint s );
        void       (WINE_GLAPI *p_glMultiTexCoord1iSGIS)( GLenum target, GLint s );
        void       (WINE_GLAPI *p_glMultiTexCoord1iv)( GLenum target, const GLint *v );
        void       (WINE_GLAPI *p_glMultiTexCoord1ivARB)( GLenum target, const GLint *v );
        void       (WINE_GLAPI *p_glMultiTexCoord1ivSGIS)( GLenum target, GLint * v );
        void       (WINE_GLAPI *p_glMultiTexCoord1s)( GLenum target, GLshort s );
        void       (WINE_GLAPI *p_glMultiTexCoord1sARB)( GLenum target, GLshort s );
        void       (WINE_GLAPI *p_glMultiTexCoord1sSGIS)( GLenum target, GLshort s );
        void       (WINE_GLAPI *p_glMultiTexCoord1sv)( GLenum target, const GLshort *v );
        void       (WINE_GLAPI *p_glMultiTexCoord1svARB)( GLenum target, const GLshort *v );
        void       (WINE_GLAPI *p_glMultiTexCoord1svSGIS)( GLenum target, GLshort * v );
        void       (WINE_GLAPI *p_glMultiTexCoord1xOES)( GLenum texture, GLfixed s );
        void       (WINE_GLAPI *p_glMultiTexCoord1xvOES)( GLenum texture, const GLfixed *coords );
        void       (WINE_GLAPI *p_glMultiTexCoord2bOES)( GLenum texture, GLbyte s, GLbyte t );
        void       (WINE_GLAPI *p_glMultiTexCoord2bvOES)( GLenum texture, const GLbyte *coords );
        void       (WINE_GLAPI *p_glMultiTexCoord2d)( GLenum target, GLdouble s, GLdouble t );
        void       (WINE_GLAPI *p_glMultiTexCoord2dARB)( GLenum target, GLdouble s, GLdouble t );
        void       (WINE_GLAPI *p_glMultiTexCoord2dSGIS)( GLenum target, GLdouble s, GLdouble t );
        void       (WINE_GLAPI *p_glMultiTexCoord2dv)( GLenum target, const GLdouble *v );
        void       (WINE_GLAPI *p_glMultiTexCoord2dvARB)( GLenum target, const GLdouble *v );
        void       (WINE_GLAPI *p_glMultiTexCoord2dvSGIS)( GLenum target, GLdouble * v );
        void       (WINE_GLAPI *p_glMultiTexCoord2f)( GLenum target, GLfloat s, GLfloat t );
        void       (WINE_GLAPI *p_glMultiTexCoord2fARB)( GLenum target, GLfloat s, GLfloat t );
        void       (WINE_GLAPI *p_glMultiTexCoord2fSGIS)( GLenum target, GLfloat s, GLfloat t );
        void       (WINE_GLAPI *p_glMultiTexCoord2fv)( GLenum target, const GLfloat *v );
        void       (WINE_GLAPI *p_glMultiTexCoord2fvARB)( GLenum target, const GLfloat *v );
        void       (WINE_GLAPI *p_glMultiTexCoord2fvSGIS)( GLenum target, GLfloat * v );
        void       (WINE_GLAPI *p_glMultiTexCoord2hNV)( GLenum target, GLhalfNV s, GLhalfNV t );
        void       (WINE_GLAPI *p_glMultiTexCoord2hvNV)( GLenum target, const GLhalfNV *v );
        void       (WINE_GLAPI *p_glMultiTexCoord2i)( GLenum target, GLint s, GLint t );
        void       (WINE_GLAPI *p_glMultiTexCoord2iARB)( GLenum target, GLint s, GLint t );
        void       (WINE_GLAPI *p_glMultiTexCoord2iSGIS)( GLenum target, GLint s, GLint t );
        void       (WINE_GLAPI *p_glMultiTexCoord2iv)( GLenum target, const GLint *v );
        void       (WINE_GLAPI *p_glMultiTexCoord2ivARB)( GLenum target, const GLint *v );
        void       (WINE_GLAPI *p_glMultiTexCoord2ivSGIS)( GLenum target, GLint * v );
        void       (WINE_GLAPI *p_glMultiTexCoord2s)( GLenum target, GLshort s, GLshort t );
        void       (WINE_GLAPI *p_glMultiTexCoord2sARB)( GLenum target, GLshort s, GLshort t );
        void       (WINE_GLAPI *p_glMultiTexCoord2sSGIS)( GLenum target, GLshort s, GLshort t );
        void       (WINE_GLAPI *p_glMultiTexCoord2sv)( GLenum target, const GLshort *v );
        void       (WINE_GLAPI *p_glMultiTexCoord2svARB)( GLenum target, const GLshort *v );
        void       (WINE_GLAPI *p_glMultiTexCoord2svSGIS)( GLenum target, GLshort * v );
        void       (WINE_GLAPI *p_glMultiTexCoord2xOES)( GLenum texture, GLfixed s, GLfixed t );
        void       (WINE_GLAPI *p_glMultiTexCoord2xvOES)( GLenum texture, const GLfixed *coords );
        void       (WINE_GLAPI *p_glMultiTexCoord3bOES)( GLenum texture, GLbyte s, GLbyte t, GLbyte r );
        void       (WINE_GLAPI *p_glMultiTexCoord3bvOES)( GLenum texture, const GLbyte *coords );
        void       (WINE_GLAPI *p_glMultiTexCoord3d)( GLenum target, GLdouble s, GLdouble t, GLdouble r );
        void       (WINE_GLAPI *p_glMultiTexCoord3dARB)( GLenum target, GLdouble s, GLdouble t, GLdouble r );
        void       (WINE_GLAPI *p_glMultiTexCoord3dSGIS)( GLenum target, GLdouble s, GLdouble t, GLdouble r );
        void       (WINE_GLAPI *p_glMultiTexCoord3dv)( GLenum target, const GLdouble *v );
        void       (WINE_GLAPI *p_glMultiTexCoord3dvARB)( GLenum target, const GLdouble *v );
        void       (WINE_GLAPI *p_glMultiTexCoord3dvSGIS)( GLenum target, GLdouble * v );
        void       (WINE_GLAPI *p_glMultiTexCoord3f)( GLenum target, GLfloat s, GLfloat t, GLfloat r );
        void       (WINE_GLAPI *p_glMultiTexCoord3fARB)( GLenum target, GLfloat s, GLfloat t, GLfloat r );
        void       (WINE_GLAPI *p_glMultiTexCoord3fSGIS)( GLenum target, GLfloat s, GLfloat t, GLfloat r );
        void       (WINE_GLAPI *p_glMultiTexCoord3fv)( GLenum target, const GLfloat *v );
        void       (WINE_GLAPI *p_glMultiTexCoord3fvARB)( GLenum target, const GLfloat *v );
        void       (WINE_GLAPI *p_glMultiTexCoord3fvSGIS)( GLenum target, GLfloat * v );
        void       (WINE_GLAPI *p_glMultiTexCoord3hNV)( GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r );
        void       (WINE_GLAPI *p_glMultiTexCoord3hvNV)( GLenum target, const GLhalfNV *v );
        void       (WINE_GLAPI *p_glMultiTexCoord3i)( GLenum target, GLint s, GLint t, GLint r );
        void       (WINE_GLAPI *p_glMultiTexCoord3iARB)( GLenum target, GLint s, GLint t, GLint r );
        void       (WINE_GLAPI *p_glMultiTexCoord3iSGIS)( GLenum target, GLint s, GLint t, GLint r );
        void       (WINE_GLAPI *p_glMultiTexCoord3iv)( GLenum target, const GLint *v );
        void       (WINE_GLAPI *p_glMultiTexCoord3ivARB)( GLenum target, const GLint *v );
        void       (WINE_GLAPI *p_glMultiTexCoord3ivSGIS)( GLenum target, GLint * v );
        void       (WINE_GLAPI *p_glMultiTexCoord3s)( GLenum target, GLshort s, GLshort t, GLshort r );
        void       (WINE_GLAPI *p_glMultiTexCoord3sARB)( GLenum target, GLshort s, GLshort t, GLshort r );
        void       (WINE_GLAPI *p_glMultiTexCoord3sSGIS)( GLenum target, GLshort s, GLshort t, GLshort r );
        void       (WINE_GLAPI *p_glMultiTexCoord3sv)( GLenum target, const GLshort *v );
        void       (WINE_GLAPI *p_glMultiTexCoord3svARB)( GLenum target, const GLshort *v );
        void       (WINE_GLAPI *p_glMultiTexCoord3svSGIS)( GLenum target, GLshort * v );
        void       (WINE_GLAPI *p_glMultiTexCoord3xOES)( GLenum texture, GLfixed s, GLfixed t, GLfixed r );
        void       (WINE_GLAPI *p_glMultiTexCoord3xvOES)( GLenum texture, const GLfixed *coords );
        void       (WINE_GLAPI *p_glMultiTexCoord4bOES)( GLenum texture, GLbyte s, GLbyte t, GLbyte r, GLbyte q );
        void       (WINE_GLAPI *p_glMultiTexCoord4bvOES)( GLenum texture, const GLbyte *coords );
        void       (WINE_GLAPI *p_glMultiTexCoord4d)( GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q );
        void       (WINE_GLAPI *p_glMultiTexCoord4dARB)( GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q );
        void       (WINE_GLAPI *p_glMultiTexCoord4dSGIS)( GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q );
        void       (WINE_GLAPI *p_glMultiTexCoord4dv)( GLenum target, const GLdouble *v );
        void       (WINE_GLAPI *p_glMultiTexCoord4dvARB)( GLenum target, const GLdouble *v );
        void       (WINE_GLAPI *p_glMultiTexCoord4dvSGIS)( GLenum target, GLdouble * v );
        void       (WINE_GLAPI *p_glMultiTexCoord4f)( GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q );
        void       (WINE_GLAPI *p_glMultiTexCoord4fARB)( GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q );
        void       (WINE_GLAPI *p_glMultiTexCoord4fSGIS)( GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q );
        void       (WINE_GLAPI *p_glMultiTexCoord4fv)( GLenum target, const GLfloat *v );
        void       (WINE_GLAPI *p_glMultiTexCoord4fvARB)( GLenum target, const GLfloat *v );
        void       (WINE_GLAPI *p_glMultiTexCoord4fvSGIS)( GLenum target, GLfloat * v );
        void       (WINE_GLAPI *p_glMultiTexCoord4hNV)( GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q );
        void       (WINE_GLAPI *p_glMultiTexCoord4hvNV)( GLenum target, const GLhalfNV *v );
        void       (WINE_GLAPI *p_glMultiTexCoord4i)( GLenum target, GLint s, GLint t, GLint r, GLint q );
        void       (WINE_GLAPI *p_glMultiTexCoord4iARB)( GLenum target, GLint s, GLint t, GLint r, GLint q );
        void       (WINE_GLAPI *p_glMultiTexCoord4iSGIS)( GLenum target, GLint s, GLint t, GLint r, GLint q );
        void       (WINE_GLAPI *p_glMultiTexCoord4iv)( GLenum target, const GLint *v );
        void       (WINE_GLAPI *p_glMultiTexCoord4ivARB)( GLenum target, const GLint *v );
        void       (WINE_GLAPI *p_glMultiTexCoord4ivSGIS)( GLenum target, GLint * v );
        void       (WINE_GLAPI *p_glMultiTexCoord4s)( GLenum target, GLshort s, GLshort t, GLshort r, GLshort q );
        void       (WINE_GLAPI *p_glMultiTexCoord4sARB)( GLenum target, GLshort s, GLshort t, GLshort r, GLshort q );
        void       (WINE_GLAPI *p_glMultiTexCoord4sSGIS)( GLenum target, GLshort s, GLshort t, GLshort r, GLshort q );
        void       (WINE_GLAPI *p_glMultiTexCoord4sv)( GLenum target, const GLshort *v );
        void       (WINE_GLAPI *p_glMultiTexCoord4svARB)( GLenum target, const GLshort *v );
        void       (WINE_GLAPI *p_glMultiTexCoord4svSGIS)( GLenum target, GLshort * v );
        void       (WINE_GLAPI *p_glMultiTexCoord4xOES)( GLenum texture, GLfixed s, GLfixed t, GLfixed r, GLfixed q );
        void       (WINE_GLAPI *p_glMultiTexCoord4xvOES)( GLenum texture, const GLfixed *coords );
        void       (WINE_GLAPI *p_glMultiTexCoordP1ui)( GLenum texture, GLenum type, GLuint coords );
        void       (WINE_GLAPI *p_glMultiTexCoordP1uiv)( GLenum texture, GLenum type, const GLuint *coords );
        void       (WINE_GLAPI *p_glMultiTexCoordP2ui)( GLenum texture, GLenum type, GLuint coords );
        void       (WINE_GLAPI *p_glMultiTexCoordP2uiv)( GLenum texture, GLenum type, const GLuint *coords );
        void       (WINE_GLAPI *p_glMultiTexCoordP3ui)( GLenum texture, GLenum type, GLuint coords );
        void       (WINE_GLAPI *p_glMultiTexCoordP3uiv)( GLenum texture, GLenum type, const GLuint *coords );
        void       (WINE_GLAPI *p_glMultiTexCoordP4ui)( GLenum texture, GLenum type, GLuint coords );
        void       (WINE_GLAPI *p_glMultiTexCoordP4uiv)( GLenum texture, GLenum type, const GLuint *coords );
        void       (WINE_GLAPI *p_glMultiTexCoordPointerEXT)( GLenum texunit, GLint size, GLenum type, GLsizei stride, const void *pointer );
        void       (WINE_GLAPI *p_glMultiTexCoordPointerSGIS)( GLenum target, GLint size, GLenum type, GLsizei stride, GLvoid * pointer );
        void       (WINE_GLAPI *p_glMultiTexEnvfEXT)( GLenum texunit, GLenum target, GLenum pname, GLfloat param );
        void       (WINE_GLAPI *p_glMultiTexEnvfvEXT)( GLenum texunit, GLenum target, GLenum pname, const GLfloat *params );
        void       (WINE_GLAPI *p_glMultiTexEnviEXT)( GLenum texunit, GLenum target, GLenum pname, GLint param );
        void       (WINE_GLAPI *p_glMultiTexEnvivEXT)( GLenum texunit, GLenum target, GLenum pname, const GLint *params );
        void       (WINE_GLAPI *p_glMultiTexGendEXT)( GLenum texunit, GLenum coord, GLenum pname, GLdouble param );
        void       (WINE_GLAPI *p_glMultiTexGendvEXT)( GLenum texunit, GLenum coord, GLenum pname, const GLdouble *params );
        void       (WINE_GLAPI *p_glMultiTexGenfEXT)( GLenum texunit, GLenum coord, GLenum pname, GLfloat param );
        void       (WINE_GLAPI *p_glMultiTexGenfvEXT)( GLenum texunit, GLenum coord, GLenum pname, const GLfloat *params );
        void       (WINE_GLAPI *p_glMultiTexGeniEXT)( GLenum texunit, GLenum coord, GLenum pname, GLint param );
        void       (WINE_GLAPI *p_glMultiTexGenivEXT)( GLenum texunit, GLenum coord, GLenum pname, const GLint *params );
        void       (WINE_GLAPI *p_glMultiTexImage1DEXT)( GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels );
        void       (WINE_GLAPI *p_glMultiTexImage2DEXT)( GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels );
        void       (WINE_GLAPI *p_glMultiTexImage3DEXT)( GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels );
        void       (WINE_GLAPI *p_glMultiTexParameterIivEXT)( GLenum texunit, GLenum target, GLenum pname, const GLint *params );
        void       (WINE_GLAPI *p_glMultiTexParameterIuivEXT)( GLenum texunit, GLenum target, GLenum pname, const GLuint *params );
        void       (WINE_GLAPI *p_glMultiTexParameterfEXT)( GLenum texunit, GLenum target, GLenum pname, GLfloat param );
        void       (WINE_GLAPI *p_glMultiTexParameterfvEXT)( GLenum texunit, GLenum target, GLenum pname, const GLfloat *params );
        void       (WINE_GLAPI *p_glMultiTexParameteriEXT)( GLenum texunit, GLenum target, GLenum pname, GLint param );
        void       (WINE_GLAPI *p_glMultiTexParameterivEXT)( GLenum texunit, GLenum target, GLenum pname, const GLint *params );
        void       (WINE_GLAPI *p_glMultiTexRenderbufferEXT)( GLenum texunit, GLenum target, GLuint renderbuffer );
        void       (WINE_GLAPI *p_glMultiTexSubImage1DEXT)( GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels );
        void       (WINE_GLAPI *p_glMultiTexSubImage2DEXT)( GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels );
        void       (WINE_GLAPI *p_glMultiTexSubImage3DEXT)( GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels );
        void       (WINE_GLAPI *p_glMulticastBarrierNV)(void);
        void       (WINE_GLAPI *p_glMulticastBlitFramebufferNV)( GLuint srcGpu, GLuint dstGpu, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter );
        void       (WINE_GLAPI *p_glMulticastBufferSubDataNV)( GLbitfield gpuMask, GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data );
        void       (WINE_GLAPI *p_glMulticastCopyBufferSubDataNV)( GLuint readGpu, GLbitfield writeGpuMask, GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size );
        void       (WINE_GLAPI *p_glMulticastCopyImageSubDataNV)( GLuint srcGpu, GLbitfield dstGpuMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth );
        void       (WINE_GLAPI *p_glMulticastFramebufferSampleLocationsfvNV)( GLuint gpu, GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v );
        void       (WINE_GLAPI *p_glMulticastGetQueryObjecti64vNV)( GLuint gpu, GLuint id, GLenum pname, GLint64 *params );
        void       (WINE_GLAPI *p_glMulticastGetQueryObjectivNV)( GLuint gpu, GLuint id, GLenum pname, GLint *params );
        void       (WINE_GLAPI *p_glMulticastGetQueryObjectui64vNV)( GLuint gpu, GLuint id, GLenum pname, GLuint64 *params );
        void       (WINE_GLAPI *p_glMulticastGetQueryObjectuivNV)( GLuint gpu, GLuint id, GLenum pname, GLuint *params );
        void       (WINE_GLAPI *p_glMulticastScissorArrayvNVX)( GLuint gpu, GLuint first, GLsizei count, const GLint *v );
        void       (WINE_GLAPI *p_glMulticastViewportArrayvNVX)( GLuint gpu, GLuint first, GLsizei count, const GLfloat *v );
        void       (WINE_GLAPI *p_glMulticastViewportPositionWScaleNVX)( GLuint gpu, GLuint index, GLfloat xcoeff, GLfloat ycoeff );
        void       (WINE_GLAPI *p_glMulticastWaitSyncNV)( GLuint signalGpu, GLbitfield waitGpuMask );
        void       (WINE_GLAPI *p_glNamedBufferAttachMemoryNV)( GLuint buffer, GLuint memory, GLuint64 offset );
        void       (WINE_GLAPI *p_glNamedBufferData)( GLuint buffer, GLsizeiptr size, const void *data, GLenum usage );
        void       (WINE_GLAPI *p_glNamedBufferDataEXT)( GLuint buffer, GLsizeiptr size, const void *data, GLenum usage );
        void       (WINE_GLAPI *p_glNamedBufferPageCommitmentARB)( GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit );
        void       (WINE_GLAPI *p_glNamedBufferPageCommitmentEXT)( GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit );
        void       (WINE_GLAPI *p_glNamedBufferStorage)( GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags );
        void       (WINE_GLAPI *p_glNamedBufferStorageEXT)( GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags );
        void       (WINE_GLAPI *p_glNamedBufferStorageExternalEXT)( GLuint buffer, GLintptr offset, GLsizeiptr size, GLeglClientBufferEXT clientBuffer, GLbitfield flags );
        void       (WINE_GLAPI *p_glNamedBufferStorageMemEXT)( GLuint buffer, GLsizeiptr size, GLuint memory, GLuint64 offset );
        void       (WINE_GLAPI *p_glNamedBufferSubData)( GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data );
        void       (WINE_GLAPI *p_glNamedBufferSubDataEXT)( GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data );
        void       (WINE_GLAPI *p_glNamedCopyBufferSubDataEXT)( GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size );
        void       (WINE_GLAPI *p_glNamedFramebufferDrawBuffer)( GLuint framebuffer, GLenum buf );
        void       (WINE_GLAPI *p_glNamedFramebufferDrawBuffers)( GLuint framebuffer, GLsizei n, const GLenum *bufs );
        void       (WINE_GLAPI *p_glNamedFramebufferParameteri)( GLuint framebuffer, GLenum pname, GLint param );
        void       (WINE_GLAPI *p_glNamedFramebufferParameteriEXT)( GLuint framebuffer, GLenum pname, GLint param );
        void       (WINE_GLAPI *p_glNamedFramebufferReadBuffer)( GLuint framebuffer, GLenum src );
        void       (WINE_GLAPI *p_glNamedFramebufferRenderbuffer)( GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer );
        void       (WINE_GLAPI *p_glNamedFramebufferRenderbufferEXT)( GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer );
        void       (WINE_GLAPI *p_glNamedFramebufferSampleLocationsfvARB)( GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v );
        void       (WINE_GLAPI *p_glNamedFramebufferSampleLocationsfvNV)( GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v );
        void       (WINE_GLAPI *p_glNamedFramebufferSamplePositionsfvAMD)( GLuint framebuffer, GLuint numsamples, GLuint pixelindex, const GLfloat *values );
        void       (WINE_GLAPI *p_glNamedFramebufferTexture)( GLuint framebuffer, GLenum attachment, GLuint texture, GLint level );
        void       (WINE_GLAPI *p_glNamedFramebufferTexture1DEXT)( GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level );
        void       (WINE_GLAPI *p_glNamedFramebufferTexture2DEXT)( GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level );
        void       (WINE_GLAPI *p_glNamedFramebufferTexture3DEXT)( GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset );
        void       (WINE_GLAPI *p_glNamedFramebufferTextureEXT)( GLuint framebuffer, GLenum attachment, GLuint texture, GLint level );
        void       (WINE_GLAPI *p_glNamedFramebufferTextureFaceEXT)( GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face );
        void       (WINE_GLAPI *p_glNamedFramebufferTextureLayer)( GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer );
        void       (WINE_GLAPI *p_glNamedFramebufferTextureLayerEXT)( GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer );
        void       (WINE_GLAPI *p_glNamedProgramLocalParameter4dEXT)( GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w );
        void       (WINE_GLAPI *p_glNamedProgramLocalParameter4dvEXT)( GLuint program, GLenum target, GLuint index, const GLdouble *params );
        void       (WINE_GLAPI *p_glNamedProgramLocalParameter4fEXT)( GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w );
        void       (WINE_GLAPI *p_glNamedProgramLocalParameter4fvEXT)( GLuint program, GLenum target, GLuint index, const GLfloat *params );
        void       (WINE_GLAPI *p_glNamedProgramLocalParameterI4iEXT)( GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w );
        void       (WINE_GLAPI *p_glNamedProgramLocalParameterI4ivEXT)( GLuint program, GLenum target, GLuint index, const GLint *params );
        void       (WINE_GLAPI *p_glNamedProgramLocalParameterI4uiEXT)( GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w );
        void       (WINE_GLAPI *p_glNamedProgramLocalParameterI4uivEXT)( GLuint program, GLenum target, GLuint index, const GLuint *params );
        void       (WINE_GLAPI *p_glNamedProgramLocalParameters4fvEXT)( GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat *params );
        void       (WINE_GLAPI *p_glNamedProgramLocalParametersI4ivEXT)( GLuint program, GLenum target, GLuint index, GLsizei count, const GLint *params );
        void       (WINE_GLAPI *p_glNamedProgramLocalParametersI4uivEXT)( GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint *params );
        void       (WINE_GLAPI *p_glNamedProgramStringEXT)( GLuint program, GLenum target, GLenum format, GLsizei len, const void *string );
        void       (WINE_GLAPI *p_glNamedRenderbufferStorage)( GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height );
        void       (WINE_GLAPI *p_glNamedRenderbufferStorageEXT)( GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height );
        void       (WINE_GLAPI *p_glNamedRenderbufferStorageMultisample)( GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height );
        void       (WINE_GLAPI *p_glNamedRenderbufferStorageMultisampleAdvancedAMD)( GLuint renderbuffer, GLsizei samples, GLsizei storageSamples, GLenum internalformat, GLsizei width, GLsizei height );
        void       (WINE_GLAPI *p_glNamedRenderbufferStorageMultisampleCoverageEXT)( GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height );
        void       (WINE_GLAPI *p_glNamedRenderbufferStorageMultisampleEXT)( GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height );
        void       (WINE_GLAPI *p_glNamedStringARB)( GLenum type, GLint namelen, const GLchar *name, GLint stringlen, const GLchar *string );
        GLuint     (WINE_GLAPI *p_glNewBufferRegion)( GLenum type );
        GLuint     (WINE_GLAPI *p_glNewObjectBufferATI)( GLsizei size, const void *pointer, GLenum usage );
        void       (WINE_GLAPI *p_glNormal3fVertex3fSUN)( GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z );
        void       (WINE_GLAPI *p_glNormal3fVertex3fvSUN)( const GLfloat *n, const GLfloat *v );
        void       (WINE_GLAPI *p_glNormal3hNV)( GLhalfNV nx, GLhalfNV ny, GLhalfNV nz );
        void       (WINE_GLAPI *p_glNormal3hvNV)( const GLhalfNV *v );
        void       (WINE_GLAPI *p_glNormal3xOES)( GLfixed nx, GLfixed ny, GLfixed nz );
        void       (WINE_GLAPI *p_glNormal3xvOES)( const GLfixed *coords );
        void       (WINE_GLAPI *p_glNormalFormatNV)( GLenum type, GLsizei stride );
        void       (WINE_GLAPI *p_glNormalP3ui)( GLenum type, GLuint coords );
        void       (WINE_GLAPI *p_glNormalP3uiv)( GLenum type, const GLuint *coords );
        void       (WINE_GLAPI *p_glNormalPointerEXT)( GLenum type, GLsizei stride, GLsizei count, const void *pointer );
        void       (WINE_GLAPI *p_glNormalPointerListIBM)( GLenum type, GLint stride, const void **pointer, GLint ptrstride );
        void       (WINE_GLAPI *p_glNormalPointervINTEL)( GLenum type, const void **pointer );
        void       (WINE_GLAPI *p_glNormalStream3bATI)( GLenum stream, GLbyte nx, GLbyte ny, GLbyte nz );
        void       (WINE_GLAPI *p_glNormalStream3bvATI)( GLenum stream, const GLbyte *coords );
        void       (WINE_GLAPI *p_glNormalStream3dATI)( GLenum stream, GLdouble nx, GLdouble ny, GLdouble nz );
        void       (WINE_GLAPI *p_glNormalStream3dvATI)( GLenum stream, const GLdouble *coords );
        void       (WINE_GLAPI *p_glNormalStream3fATI)( GLenum stream, GLfloat nx, GLfloat ny, GLfloat nz );
        void       (WINE_GLAPI *p_glNormalStream3fvATI)( GLenum stream, const GLfloat *coords );
        void       (WINE_GLAPI *p_glNormalStream3iATI)( GLenum stream, GLint nx, GLint ny, GLint nz );
        void       (WINE_GLAPI *p_glNormalStream3ivATI)( GLenum stream, const GLint *coords );
        void       (WINE_GLAPI *p_glNormalStream3sATI)( GLenum stream, GLshort nx, GLshort ny, GLshort nz );
        void       (WINE_GLAPI *p_glNormalStream3svATI)( GLenum stream, const GLshort *coords );
        void       (WINE_GLAPI *p_glObjectLabel)( GLenum identifier, GLuint name, GLsizei length, const GLchar *label );
        void       (WINE_GLAPI *p_glObjectPtrLabel)( const void *ptr, GLsizei length, const GLchar *label );
        GLenum     (WINE_GLAPI *p_glObjectPurgeableAPPLE)( GLenum objectType, GLuint name, GLenum option );
        GLenum     (WINE_GLAPI *p_glObjectUnpurgeableAPPLE)( GLenum objectType, GLuint name, GLenum option );
        void       (WINE_GLAPI *p_glOrthofOES)( GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f );
        void       (WINE_GLAPI *p_glOrthoxOES)( GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f );
        void       (WINE_GLAPI *p_glPNTrianglesfATI)( GLenum pname, GLfloat param );
        void       (WINE_GLAPI *p_glPNTrianglesiATI)( GLenum pname, GLint param );
        void       (WINE_GLAPI *p_glPassTexCoordATI)( GLuint dst, GLuint coord, GLenum swizzle );
        void       (WINE_GLAPI *p_glPassThroughxOES)( GLfixed token );
        void       (WINE_GLAPI *p_glPatchParameterfv)( GLenum pname, const GLfloat *values );
        void       (WINE_GLAPI *p_glPatchParameteri)( GLenum pname, GLint value );
        void       (WINE_GLAPI *p_glPathColorGenNV)( GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat *coeffs );
        void       (WINE_GLAPI *p_glPathCommandsNV)( GLuint path, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void *coords );
        void       (WINE_GLAPI *p_glPathCoordsNV)( GLuint path, GLsizei numCoords, GLenum coordType, const void *coords );
        void       (WINE_GLAPI *p_glPathCoverDepthFuncNV)( GLenum func );
        void       (WINE_GLAPI *p_glPathDashArrayNV)( GLuint path, GLsizei dashCount, const GLfloat *dashArray );
        void       (WINE_GLAPI *p_glPathFogGenNV)( GLenum genMode );
        GLenum     (WINE_GLAPI *p_glPathGlyphIndexArrayNV)( GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale );
        GLenum     (WINE_GLAPI *p_glPathGlyphIndexRangeNV)( GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint pathParameterTemplate, GLfloat emScale, GLuint baseAndCount[2] );
        void       (WINE_GLAPI *p_glPathGlyphRangeNV)( GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale );
        void       (WINE_GLAPI *p_glPathGlyphsNV)( GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const void *charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale );
        GLenum     (WINE_GLAPI *p_glPathMemoryGlyphIndexArrayNV)( GLuint firstPathName, GLenum fontTarget, GLsizeiptr fontSize, const void *fontData, GLsizei faceIndex, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale );
        void       (WINE_GLAPI *p_glPathParameterfNV)( GLuint path, GLenum pname, GLfloat value );
        void       (WINE_GLAPI *p_glPathParameterfvNV)( GLuint path, GLenum pname, const GLfloat *value );
        void       (WINE_GLAPI *p_glPathParameteriNV)( GLuint path, GLenum pname, GLint value );
        void       (WINE_GLAPI *p_glPathParameterivNV)( GLuint path, GLenum pname, const GLint *value );
        void       (WINE_GLAPI *p_glPathStencilDepthOffsetNV)( GLfloat factor, GLfloat units );
        void       (WINE_GLAPI *p_glPathStencilFuncNV)( GLenum func, GLint ref, GLuint mask );
        void       (WINE_GLAPI *p_glPathStringNV)( GLuint path, GLenum format, GLsizei length, const void *pathString );
        void       (WINE_GLAPI *p_glPathSubCommandsNV)( GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void *coords );
        void       (WINE_GLAPI *p_glPathSubCoordsNV)( GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const void *coords );
        void       (WINE_GLAPI *p_glPathTexGenNV)( GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat *coeffs );
        void       (WINE_GLAPI *p_glPauseTransformFeedback)(void);
        void       (WINE_GLAPI *p_glPauseTransformFeedbackNV)(void);
        void       (WINE_GLAPI *p_glPixelDataRangeNV)( GLenum target, GLsizei length, const void *pointer );
        void       (WINE_GLAPI *p_glPixelMapx)( GLenum map, GLint size, const GLfixed *values );
        void       (WINE_GLAPI *p_glPixelStorex)( GLenum pname, GLfixed param );
        void       (WINE_GLAPI *p_glPixelTexGenParameterfSGIS)( GLenum pname, GLfloat param );
        void       (WINE_GLAPI *p_glPixelTexGenParameterfvSGIS)( GLenum pname, const GLfloat *params );
        void       (WINE_GLAPI *p_glPixelTexGenParameteriSGIS)( GLenum pname, GLint param );
        void       (WINE_GLAPI *p_glPixelTexGenParameterivSGIS)( GLenum pname, const GLint *params );
        void       (WINE_GLAPI *p_glPixelTexGenSGIX)( GLenum mode );
        void       (WINE_GLAPI *p_glPixelTransferxOES)( GLenum pname, GLfixed param );
        void       (WINE_GLAPI *p_glPixelTransformParameterfEXT)( GLenum target, GLenum pname, GLfloat param );
        void       (WINE_GLAPI *p_glPixelTransformParameterfvEXT)( GLenum target, GLenum pname, const GLfloat *params );
        void       (WINE_GLAPI *p_glPixelTransformParameteriEXT)( GLenum target, GLenum pname, GLint param );
        void       (WINE_GLAPI *p_glPixelTransformParameterivEXT)( GLenum target, GLenum pname, const GLint *params );
        void       (WINE_GLAPI *p_glPixelZoomxOES)( GLfixed xfactor, GLfixed yfactor );
        GLboolean  (WINE_GLAPI *p_glPointAlongPathNV)( GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat *x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY );
        void       (WINE_GLAPI *p_glPointParameterf)( GLenum pname, GLfloat param );
        void       (WINE_GLAPI *p_glPointParameterfARB)( GLenum pname, GLfloat param );
        void       (WINE_GLAPI *p_glPointParameterfEXT)( GLenum pname, GLfloat param );
        void       (WINE_GLAPI *p_glPointParameterfSGIS)( GLenum pname, GLfloat param );
        void       (WINE_GLAPI *p_glPointParameterfv)( GLenum pname, const GLfloat *params );
        void       (WINE_GLAPI *p_glPointParameterfvARB)( GLenum pname, const GLfloat *params );
        void       (WINE_GLAPI *p_glPointParameterfvEXT)( GLenum pname, const GLfloat *params );
        void       (WINE_GLAPI *p_glPointParameterfvSGIS)( GLenum pname, const GLfloat *params );
        void       (WINE_GLAPI *p_glPointParameteri)( GLenum pname, GLint param );
        void       (WINE_GLAPI *p_glPointParameteriNV)( GLenum pname, GLint param );
        void       (WINE_GLAPI *p_glPointParameteriv)( GLenum pname, const GLint *params );
        void       (WINE_GLAPI *p_glPointParameterivNV)( GLenum pname, const GLint *params );
        void       (WINE_GLAPI *p_glPointParameterxvOES)( GLenum pname, const GLfixed *params );
        void       (WINE_GLAPI *p_glPointSizexOES)( GLfixed size );
        GLint      (WINE_GLAPI *p_glPollAsyncSGIX)( GLuint *markerp );
        GLint      (WINE_GLAPI *p_glPollInstrumentsSGIX)( GLint *marker_p );
        void       (WINE_GLAPI *p_glPolygonOffsetClamp)( GLfloat factor, GLfloat units, GLfloat clamp );
        void       (WINE_GLAPI *p_glPolygonOffsetClampEXT)( GLfloat factor, GLfloat units, GLfloat clamp );
        void       (WINE_GLAPI *p_glPolygonOffsetEXT)( GLfloat factor, GLfloat bias );
        void       (WINE_GLAPI *p_glPolygonOffsetxOES)( GLfixed factor, GLfixed units );
        void       (WINE_GLAPI *p_glPopDebugGroup)(void);
        void       (WINE_GLAPI *p_glPopGroupMarkerEXT)(void);
        void       (WINE_GLAPI *p_glPresentFrameDualFillNV)( GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLenum target1, GLuint fill1, GLenum target2, GLuint fill2, GLenum target3, GLuint fill3 );
        void       (WINE_GLAPI *p_glPresentFrameKeyedNV)( GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLuint key0, GLenum target1, GLuint fill1, GLuint key1 );
        void       (WINE_GLAPI *p_glPrimitiveBoundingBoxARB)( GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW );
        void       (WINE_GLAPI *p_glPrimitiveRestartIndex)( GLuint index );
        void       (WINE_GLAPI *p_glPrimitiveRestartIndexNV)( GLuint index );
        void       (WINE_GLAPI *p_glPrimitiveRestartNV)(void);
        void       (WINE_GLAPI *p_glPrioritizeTexturesEXT)( GLsizei n, const GLuint *textures, const GLclampf *priorities );
        void       (WINE_GLAPI *p_glPrioritizeTexturesxOES)( GLsizei n, const GLuint *textures, const GLfixed *priorities );
        void       (WINE_GLAPI *p_glProgramBinary)( GLuint program, GLenum binaryFormat, const void *binary, GLsizei length );
        void       (WINE_GLAPI *p_glProgramBufferParametersIivNV)( GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLint *params );
        void       (WINE_GLAPI *p_glProgramBufferParametersIuivNV)( GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLuint *params );
        void       (WINE_GLAPI *p_glProgramBufferParametersfvNV)( GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLfloat *params );
        void       (WINE_GLAPI *p_glProgramEnvParameter4dARB)( GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w );
        void       (WINE_GLAPI *p_glProgramEnvParameter4dvARB)( GLenum target, GLuint index, const GLdouble *params );
        void       (WINE_GLAPI *p_glProgramEnvParameter4fARB)( GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w );
        void       (WINE_GLAPI *p_glProgramEnvParameter4fvARB)( GLenum target, GLuint index, const GLfloat *params );
        void       (WINE_GLAPI *p_glProgramEnvParameterI4iNV)( GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w );
        void       (WINE_GLAPI *p_glProgramEnvParameterI4ivNV)( GLenum target, GLuint index, const GLint *params );
        void       (WINE_GLAPI *p_glProgramEnvParameterI4uiNV)( GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w );
        void       (WINE_GLAPI *p_glProgramEnvParameterI4uivNV)( GLenum target, GLuint index, const GLuint *params );
        void       (WINE_GLAPI *p_glProgramEnvParameters4fvEXT)( GLenum target, GLuint index, GLsizei count, const GLfloat *params );
        void       (WINE_GLAPI *p_glProgramEnvParametersI4ivNV)( GLenum target, GLuint index, GLsizei count, const GLint *params );
        void       (WINE_GLAPI *p_glProgramEnvParametersI4uivNV)( GLenum target, GLuint index, GLsizei count, const GLuint *params );
        void       (WINE_GLAPI *p_glProgramLocalParameter4dARB)( GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w );
        void       (WINE_GLAPI *p_glProgramLocalParameter4dvARB)( GLenum target, GLuint index, const GLdouble *params );
        void       (WINE_GLAPI *p_glProgramLocalParameter4fARB)( GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w );
        void       (WINE_GLAPI *p_glProgramLocalParameter4fvARB)( GLenum target, GLuint index, const GLfloat *params );
        void       (WINE_GLAPI *p_glProgramLocalParameterI4iNV)( GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w );
        void       (WINE_GLAPI *p_glProgramLocalParameterI4ivNV)( GLenum target, GLuint index, const GLint *params );
        void       (WINE_GLAPI *p_glProgramLocalParameterI4uiNV)( GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w );
        void       (WINE_GLAPI *p_glProgramLocalParameterI4uivNV)( GLenum target, GLuint index, const GLuint *params );
        void       (WINE_GLAPI *p_glProgramLocalParameters4fvEXT)( GLenum target, GLuint index, GLsizei count, const GLfloat *params );
        void       (WINE_GLAPI *p_glProgramLocalParametersI4ivNV)( GLenum target, GLuint index, GLsizei count, const GLint *params );
        void       (WINE_GLAPI *p_glProgramLocalParametersI4uivNV)( GLenum target, GLuint index, GLsizei count, const GLuint *params );
        void       (WINE_GLAPI *p_glProgramNamedParameter4dNV)( GLuint id, GLsizei len, const GLubyte *name, GLdouble x, GLdouble y, GLdouble z, GLdouble w );
        void       (WINE_GLAPI *p_glProgramNamedParameter4dvNV)( GLuint id, GLsizei len, const GLubyte *name, const GLdouble *v );
        void       (WINE_GLAPI *p_glProgramNamedParameter4fNV)( GLuint id, GLsizei len, const GLubyte *name, GLfloat x, GLfloat y, GLfloat z, GLfloat w );
        void       (WINE_GLAPI *p_glProgramNamedParameter4fvNV)( GLuint id, GLsizei len, const GLubyte *name, const GLfloat *v );
        void       (WINE_GLAPI *p_glProgramParameter4dNV)( GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w );
        void       (WINE_GLAPI *p_glProgramParameter4dvNV)( GLenum target, GLuint index, const GLdouble *v );
        void       (WINE_GLAPI *p_glProgramParameter4fNV)( GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w );
        void       (WINE_GLAPI *p_glProgramParameter4fvNV)( GLenum target, GLuint index, const GLfloat *v );
        void       (WINE_GLAPI *p_glProgramParameteri)( GLuint program, GLenum pname, GLint value );
        void       (WINE_GLAPI *p_glProgramParameteriARB)( GLuint program, GLenum pname, GLint value );
        void       (WINE_GLAPI *p_glProgramParameteriEXT)( GLuint program, GLenum pname, GLint value );
        void       (WINE_GLAPI *p_glProgramParameters4dvNV)( GLenum target, GLuint index, GLsizei count, const GLdouble *v );
        void       (WINE_GLAPI *p_glProgramParameters4fvNV)( GLenum target, GLuint index, GLsizei count, const GLfloat *v );
        void       (WINE_GLAPI *p_glProgramPathFragmentInputGenNV)( GLuint program, GLint location, GLenum genMode, GLint components, const GLfloat *coeffs );
        void       (WINE_GLAPI *p_glProgramStringARB)( GLenum target, GLenum format, GLsizei len, const void *string );
        void       (WINE_GLAPI *p_glProgramSubroutineParametersuivNV)( GLenum target, GLsizei count, const GLuint *params );
        void       (WINE_GLAPI *p_glProgramUniform1d)( GLuint program, GLint location, GLdouble v0 );
        void       (WINE_GLAPI *p_glProgramUniform1dEXT)( GLuint program, GLint location, GLdouble x );
        void       (WINE_GLAPI *p_glProgramUniform1dv)( GLuint program, GLint location, GLsizei count, const GLdouble *value );
        void       (WINE_GLAPI *p_glProgramUniform1dvEXT)( GLuint program, GLint location, GLsizei count, const GLdouble *value );
        void       (WINE_GLAPI *p_glProgramUniform1f)( GLuint program, GLint location, GLfloat v0 );
        void       (WINE_GLAPI *p_glProgramUniform1fEXT)( GLuint program, GLint location, GLfloat v0 );
        void       (WINE_GLAPI *p_glProgramUniform1fv)( GLuint program, GLint location, GLsizei count, const GLfloat *value );
        void       (WINE_GLAPI *p_glProgramUniform1fvEXT)( GLuint program, GLint location, GLsizei count, const GLfloat *value );
        void       (WINE_GLAPI *p_glProgramUniform1i)( GLuint program, GLint location, GLint v0 );
        void       (WINE_GLAPI *p_glProgramUniform1i64ARB)( GLuint program, GLint location, GLint64 x );
        void       (WINE_GLAPI *p_glProgramUniform1i64NV)( GLuint program, GLint location, GLint64EXT x );
        void       (WINE_GLAPI *p_glProgramUniform1i64vARB)( GLuint program, GLint location, GLsizei count, const GLint64 *value );
        void       (WINE_GLAPI *p_glProgramUniform1i64vNV)( GLuint program, GLint location, GLsizei count, const GLint64EXT *value );
        void       (WINE_GLAPI *p_glProgramUniform1iEXT)( GLuint program, GLint location, GLint v0 );
        void       (WINE_GLAPI *p_glProgramUniform1iv)( GLuint program, GLint location, GLsizei count, const GLint *value );
        void       (WINE_GLAPI *p_glProgramUniform1ivEXT)( GLuint program, GLint location, GLsizei count, const GLint *value );
        void       (WINE_GLAPI *p_glProgramUniform1ui)( GLuint program, GLint location, GLuint v0 );
        void       (WINE_GLAPI *p_glProgramUniform1ui64ARB)( GLuint program, GLint location, GLuint64 x );
        void       (WINE_GLAPI *p_glProgramUniform1ui64NV)( GLuint program, GLint location, GLuint64EXT x );
        void       (WINE_GLAPI *p_glProgramUniform1ui64vARB)( GLuint program, GLint location, GLsizei count, const GLuint64 *value );
        void       (WINE_GLAPI *p_glProgramUniform1ui64vNV)( GLuint program, GLint location, GLsizei count, const GLuint64EXT *value );
        void       (WINE_GLAPI *p_glProgramUniform1uiEXT)( GLuint program, GLint location, GLuint v0 );
        void       (WINE_GLAPI *p_glProgramUniform1uiv)( GLuint program, GLint location, GLsizei count, const GLuint *value );
        void       (WINE_GLAPI *p_glProgramUniform1uivEXT)( GLuint program, GLint location, GLsizei count, const GLuint *value );
        void       (WINE_GLAPI *p_glProgramUniform2d)( GLuint program, GLint location, GLdouble v0, GLdouble v1 );
        void       (WINE_GLAPI *p_glProgramUniform2dEXT)( GLuint program, GLint location, GLdouble x, GLdouble y );
        void       (WINE_GLAPI *p_glProgramUniform2dv)( GLuint program, GLint location, GLsizei count, const GLdouble *value );
        void       (WINE_GLAPI *p_glProgramUniform2dvEXT)( GLuint program, GLint location, GLsizei count, const GLdouble *value );
        void       (WINE_GLAPI *p_glProgramUniform2f)( GLuint program, GLint location, GLfloat v0, GLfloat v1 );
        void       (WINE_GLAPI *p_glProgramUniform2fEXT)( GLuint program, GLint location, GLfloat v0, GLfloat v1 );
        void       (WINE_GLAPI *p_glProgramUniform2fv)( GLuint program, GLint location, GLsizei count, const GLfloat *value );
        void       (WINE_GLAPI *p_glProgramUniform2fvEXT)( GLuint program, GLint location, GLsizei count, const GLfloat *value );
        void       (WINE_GLAPI *p_glProgramUniform2i)( GLuint program, GLint location, GLint v0, GLint v1 );
        void       (WINE_GLAPI *p_glProgramUniform2i64ARB)( GLuint program, GLint location, GLint64 x, GLint64 y );
        void       (WINE_GLAPI *p_glProgramUniform2i64NV)( GLuint program, GLint location, GLint64EXT x, GLint64EXT y );
        void       (WINE_GLAPI *p_glProgramUniform2i64vARB)( GLuint program, GLint location, GLsizei count, const GLint64 *value );
        void       (WINE_GLAPI *p_glProgramUniform2i64vNV)( GLuint program, GLint location, GLsizei count, const GLint64EXT *value );
        void       (WINE_GLAPI *p_glProgramUniform2iEXT)( GLuint program, GLint location, GLint v0, GLint v1 );
        void       (WINE_GLAPI *p_glProgramUniform2iv)( GLuint program, GLint location, GLsizei count, const GLint *value );
        void       (WINE_GLAPI *p_glProgramUniform2ivEXT)( GLuint program, GLint location, GLsizei count, const GLint *value );
        void       (WINE_GLAPI *p_glProgramUniform2ui)( GLuint program, GLint location, GLuint v0, GLuint v1 );
        void       (WINE_GLAPI *p_glProgramUniform2ui64ARB)( GLuint program, GLint location, GLuint64 x, GLuint64 y );
        void       (WINE_GLAPI *p_glProgramUniform2ui64NV)( GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y );
        void       (WINE_GLAPI *p_glProgramUniform2ui64vARB)( GLuint program, GLint location, GLsizei count, const GLuint64 *value );
        void       (WINE_GLAPI *p_glProgramUniform2ui64vNV)( GLuint program, GLint location, GLsizei count, const GLuint64EXT *value );
        void       (WINE_GLAPI *p_glProgramUniform2uiEXT)( GLuint program, GLint location, GLuint v0, GLuint v1 );
        void       (WINE_GLAPI *p_glProgramUniform2uiv)( GLuint program, GLint location, GLsizei count, const GLuint *value );
        void       (WINE_GLAPI *p_glProgramUniform2uivEXT)( GLuint program, GLint location, GLsizei count, const GLuint *value );
        void       (WINE_GLAPI *p_glProgramUniform3d)( GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2 );
        void       (WINE_GLAPI *p_glProgramUniform3dEXT)( GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z );
        void       (WINE_GLAPI *p_glProgramUniform3dv)( GLuint program, GLint location, GLsizei count, const GLdouble *value );
        void       (WINE_GLAPI *p_glProgramUniform3dvEXT)( GLuint program, GLint location, GLsizei count, const GLdouble *value );
        void       (WINE_GLAPI *p_glProgramUniform3f)( GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2 );
        void       (WINE_GLAPI *p_glProgramUniform3fEXT)( GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2 );
        void       (WINE_GLAPI *p_glProgramUniform3fv)( GLuint program, GLint location, GLsizei count, const GLfloat *value );
        void       (WINE_GLAPI *p_glProgramUniform3fvEXT)( GLuint program, GLint location, GLsizei count, const GLfloat *value );
        void       (WINE_GLAPI *p_glProgramUniform3i)( GLuint program, GLint location, GLint v0, GLint v1, GLint v2 );
        void       (WINE_GLAPI *p_glProgramUniform3i64ARB)( GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z );
        void       (WINE_GLAPI *p_glProgramUniform3i64NV)( GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z );
        void       (WINE_GLAPI *p_glProgramUniform3i64vARB)( GLuint program, GLint location, GLsizei count, const GLint64 *value );
        void       (WINE_GLAPI *p_glProgramUniform3i64vNV)( GLuint program, GLint location, GLsizei count, const GLint64EXT *value );
        void       (WINE_GLAPI *p_glProgramUniform3iEXT)( GLuint program, GLint location, GLint v0, GLint v1, GLint v2 );
        void       (WINE_GLAPI *p_glProgramUniform3iv)( GLuint program, GLint location, GLsizei count, const GLint *value );
        void       (WINE_GLAPI *p_glProgramUniform3ivEXT)( GLuint program, GLint location, GLsizei count, const GLint *value );
        void       (WINE_GLAPI *p_glProgramUniform3ui)( GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2 );
        void       (WINE_GLAPI *p_glProgramUniform3ui64ARB)( GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z );
        void       (WINE_GLAPI *p_glProgramUniform3ui64NV)( GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z );
        void       (WINE_GLAPI *p_glProgramUniform3ui64vARB)( GLuint program, GLint location, GLsizei count, const GLuint64 *value );
        void       (WINE_GLAPI *p_glProgramUniform3ui64vNV)( GLuint program, GLint location, GLsizei count, const GLuint64EXT *value );
        void       (WINE_GLAPI *p_glProgramUniform3uiEXT)( GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2 );
        void       (WINE_GLAPI *p_glProgramUniform3uiv)( GLuint program, GLint location, GLsizei count, const GLuint *value );
        void       (WINE_GLAPI *p_glProgramUniform3uivEXT)( GLuint program, GLint location, GLsizei count, const GLuint *value );
        void       (WINE_GLAPI *p_glProgramUniform4d)( GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3 );
        void       (WINE_GLAPI *p_glProgramUniform4dEXT)( GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w );
        void       (WINE_GLAPI *p_glProgramUniform4dv)( GLuint program, GLint location, GLsizei count, const GLdouble *value );
        void       (WINE_GLAPI *p_glProgramUniform4dvEXT)( GLuint program, GLint location, GLsizei count, const GLdouble *value );
        void       (WINE_GLAPI *p_glProgramUniform4f)( GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3 );
        void       (WINE_GLAPI *p_glProgramUniform4fEXT)( GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3 );
        void       (WINE_GLAPI *p_glProgramUniform4fv)( GLuint program, GLint location, GLsizei count, const GLfloat *value );
        void       (WINE_GLAPI *p_glProgramUniform4fvEXT)( GLuint program, GLint location, GLsizei count, const GLfloat *value );
        void       (WINE_GLAPI *p_glProgramUniform4i)( GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3 );
        void       (WINE_GLAPI *p_glProgramUniform4i64ARB)( GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w );
        void       (WINE_GLAPI *p_glProgramUniform4i64NV)( GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w );
        void       (WINE_GLAPI *p_glProgramUniform4i64vARB)( GLuint program, GLint location, GLsizei count, const GLint64 *value );
        void       (WINE_GLAPI *p_glProgramUniform4i64vNV)( GLuint program, GLint location, GLsizei count, const GLint64EXT *value );
        void       (WINE_GLAPI *p_glProgramUniform4iEXT)( GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3 );
        void       (WINE_GLAPI *p_glProgramUniform4iv)( GLuint program, GLint location, GLsizei count, const GLint *value );
        void       (WINE_GLAPI *p_glProgramUniform4ivEXT)( GLuint program, GLint location, GLsizei count, const GLint *value );
        void       (WINE_GLAPI *p_glProgramUniform4ui)( GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3 );
        void       (WINE_GLAPI *p_glProgramUniform4ui64ARB)( GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w );
        void       (WINE_GLAPI *p_glProgramUniform4ui64NV)( GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w );
        void       (WINE_GLAPI *p_glProgramUniform4ui64vARB)( GLuint program, GLint location, GLsizei count, const GLuint64 *value );
        void       (WINE_GLAPI *p_glProgramUniform4ui64vNV)( GLuint program, GLint location, GLsizei count, const GLuint64EXT *value );
        void       (WINE_GLAPI *p_glProgramUniform4uiEXT)( GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3 );
        void       (WINE_GLAPI *p_glProgramUniform4uiv)( GLuint program, GLint location, GLsizei count, const GLuint *value );
        void       (WINE_GLAPI *p_glProgramUniform4uivEXT)( GLuint program, GLint location, GLsizei count, const GLuint *value );
        void       (WINE_GLAPI *p_glProgramUniformHandleui64ARB)( GLuint program, GLint location, GLuint64 value );
        void       (WINE_GLAPI *p_glProgramUniformHandleui64NV)( GLuint program, GLint location, GLuint64 value );
        void       (WINE_GLAPI *p_glProgramUniformHandleui64vARB)( GLuint program, GLint location, GLsizei count, const GLuint64 *values );
        void       (WINE_GLAPI *p_glProgramUniformHandleui64vNV)( GLuint program, GLint location, GLsizei count, const GLuint64 *values );
        void       (WINE_GLAPI *p_glProgramUniformMatrix2dv)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
        void       (WINE_GLAPI *p_glProgramUniformMatrix2dvEXT)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
        void       (WINE_GLAPI *p_glProgramUniformMatrix2fv)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
        void       (WINE_GLAPI *p_glProgramUniformMatrix2fvEXT)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
        void       (WINE_GLAPI *p_glProgramUniformMatrix2x3dv)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
        void       (WINE_GLAPI *p_glProgramUniformMatrix2x3dvEXT)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
        void       (WINE_GLAPI *p_glProgramUniformMatrix2x3fv)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
        void       (WINE_GLAPI *p_glProgramUniformMatrix2x3fvEXT)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
        void       (WINE_GLAPI *p_glProgramUniformMatrix2x4dv)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
        void       (WINE_GLAPI *p_glProgramUniformMatrix2x4dvEXT)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
        void       (WINE_GLAPI *p_glProgramUniformMatrix2x4fv)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
        void       (WINE_GLAPI *p_glProgramUniformMatrix2x4fvEXT)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
        void       (WINE_GLAPI *p_glProgramUniformMatrix3dv)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
        void       (WINE_GLAPI *p_glProgramUniformMatrix3dvEXT)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
        void       (WINE_GLAPI *p_glProgramUniformMatrix3fv)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
        void       (WINE_GLAPI *p_glProgramUniformMatrix3fvEXT)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
        void       (WINE_GLAPI *p_glProgramUniformMatrix3x2dv)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
        void       (WINE_GLAPI *p_glProgramUniformMatrix3x2dvEXT)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
        void       (WINE_GLAPI *p_glProgramUniformMatrix3x2fv)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
        void       (WINE_GLAPI *p_glProgramUniformMatrix3x2fvEXT)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
        void       (WINE_GLAPI *p_glProgramUniformMatrix3x4dv)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
        void       (WINE_GLAPI *p_glProgramUniformMatrix3x4dvEXT)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
        void       (WINE_GLAPI *p_glProgramUniformMatrix3x4fv)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
        void       (WINE_GLAPI *p_glProgramUniformMatrix3x4fvEXT)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
        void       (WINE_GLAPI *p_glProgramUniformMatrix4dv)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
        void       (WINE_GLAPI *p_glProgramUniformMatrix4dvEXT)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
        void       (WINE_GLAPI *p_glProgramUniformMatrix4fv)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
        void       (WINE_GLAPI *p_glProgramUniformMatrix4fvEXT)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
        void       (WINE_GLAPI *p_glProgramUniformMatrix4x2dv)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
        void       (WINE_GLAPI *p_glProgramUniformMatrix4x2dvEXT)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
        void       (WINE_GLAPI *p_glProgramUniformMatrix4x2fv)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
        void       (WINE_GLAPI *p_glProgramUniformMatrix4x2fvEXT)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
        void       (WINE_GLAPI *p_glProgramUniformMatrix4x3dv)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
        void       (WINE_GLAPI *p_glProgramUniformMatrix4x3dvEXT)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
        void       (WINE_GLAPI *p_glProgramUniformMatrix4x3fv)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
        void       (WINE_GLAPI *p_glProgramUniformMatrix4x3fvEXT)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
        void       (WINE_GLAPI *p_glProgramUniformui64NV)( GLuint program, GLint location, GLuint64EXT value );
        void       (WINE_GLAPI *p_glProgramUniformui64vNV)( GLuint program, GLint location, GLsizei count, const GLuint64EXT *value );
        void       (WINE_GLAPI *p_glProgramVertexLimitNV)( GLenum target, GLint limit );
        void       (WINE_GLAPI *p_glProvokingVertex)( GLenum mode );
        void       (WINE_GLAPI *p_glProvokingVertexEXT)( GLenum mode );
        void       (WINE_GLAPI *p_glPushClientAttribDefaultEXT)( GLbitfield mask );
        void       (WINE_GLAPI *p_glPushDebugGroup)( GLenum source, GLuint id, GLsizei length, const GLchar *message );
        void       (WINE_GLAPI *p_glPushGroupMarkerEXT)( GLsizei length, const GLchar *marker );
        void       (WINE_GLAPI *p_glQueryCounter)( GLuint id, GLenum target );
        GLbitfield (WINE_GLAPI *p_glQueryMatrixxOES)( GLfixed *mantissa, GLint *exponent );
        void       (WINE_GLAPI *p_glQueryObjectParameteruiAMD)( GLenum target, GLuint id, GLenum pname, GLuint param );
        GLint      (WINE_GLAPI *p_glQueryResourceNV)( GLenum queryType, GLint tagId, GLuint count, GLint *buffer );
        void       (WINE_GLAPI *p_glQueryResourceTagNV)( GLint tagId, const GLchar *tagString );
        void       (WINE_GLAPI *p_glRasterPos2xOES)( GLfixed x, GLfixed y );
        void       (WINE_GLAPI *p_glRasterPos2xvOES)( const GLfixed *coords );
        void       (WINE_GLAPI *p_glRasterPos3xOES)( GLfixed x, GLfixed y, GLfixed z );
        void       (WINE_GLAPI *p_glRasterPos3xvOES)( const GLfixed *coords );
        void       (WINE_GLAPI *p_glRasterPos4xOES)( GLfixed x, GLfixed y, GLfixed z, GLfixed w );
        void       (WINE_GLAPI *p_glRasterPos4xvOES)( const GLfixed *coords );
        void       (WINE_GLAPI *p_glRasterSamplesEXT)( GLuint samples, GLboolean fixedsamplelocations );
        void       (WINE_GLAPI *p_glReadBufferRegion)( GLenum region, GLint x, GLint y, GLsizei width, GLsizei height );
        void       (WINE_GLAPI *p_glReadInstrumentsSGIX)( GLint marker );
        void       (WINE_GLAPI *p_glReadnPixels)( GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data );
        void       (WINE_GLAPI *p_glReadnPixelsARB)( GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data );
        void       (WINE_GLAPI *p_glRectxOES)( GLfixed x1, GLfixed y1, GLfixed x2, GLfixed y2 );
        void       (WINE_GLAPI *p_glRectxvOES)( const GLfixed *v1, const GLfixed *v2 );
        void       (WINE_GLAPI *p_glReferencePlaneSGIX)( const GLdouble *equation );
        GLboolean  (WINE_GLAPI *p_glReleaseKeyedMutexWin32EXT)( GLuint memory, GLuint64 key );
        void       (WINE_GLAPI *p_glReleaseShaderCompiler)(void);
        void       (WINE_GLAPI *p_glRenderGpuMaskNV)( GLbitfield mask );
        void       (WINE_GLAPI *p_glRenderbufferStorage)( GLenum target, GLenum internalformat, GLsizei width, GLsizei height );
        void       (WINE_GLAPI *p_glRenderbufferStorageEXT)( GLenum target, GLenum internalformat, GLsizei width, GLsizei height );
        void       (WINE_GLAPI *p_glRenderbufferStorageMultisample)( GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height );
        void       (WINE_GLAPI *p_glRenderbufferStorageMultisampleAdvancedAMD)( GLenum target, GLsizei samples, GLsizei storageSamples, GLenum internalformat, GLsizei width, GLsizei height );
        void       (WINE_GLAPI *p_glRenderbufferStorageMultisampleCoverageNV)( GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height );
        void       (WINE_GLAPI *p_glRenderbufferStorageMultisampleEXT)( GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height );
        void       (WINE_GLAPI *p_glReplacementCodePointerSUN)( GLenum type, GLsizei stride, const void **pointer );
        void       (WINE_GLAPI *p_glReplacementCodeubSUN)( GLubyte code );
        void       (WINE_GLAPI *p_glReplacementCodeubvSUN)( const GLubyte *code );
        void       (WINE_GLAPI *p_glReplacementCodeuiColor3fVertex3fSUN)( GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z );
        void       (WINE_GLAPI *p_glReplacementCodeuiColor3fVertex3fvSUN)( const GLuint *rc, const GLfloat *c, const GLfloat *v );
        void       (WINE_GLAPI *p_glReplacementCodeuiColor4fNormal3fVertex3fSUN)( GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z );
        void       (WINE_GLAPI *p_glReplacementCodeuiColor4fNormal3fVertex3fvSUN)( const GLuint *rc, const GLfloat *c, const GLfloat *n, const GLfloat *v );
        void       (WINE_GLAPI *p_glReplacementCodeuiColor4ubVertex3fSUN)( GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z );
        void       (WINE_GLAPI *p_glReplacementCodeuiColor4ubVertex3fvSUN)( const GLuint *rc, const GLubyte *c, const GLfloat *v );
        void       (WINE_GLAPI *p_glReplacementCodeuiNormal3fVertex3fSUN)( GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z );
        void       (WINE_GLAPI *p_glReplacementCodeuiNormal3fVertex3fvSUN)( const GLuint *rc, const GLfloat *n, const GLfloat *v );
        void       (WINE_GLAPI *p_glReplacementCodeuiSUN)( GLuint code );
        void       (WINE_GLAPI *p_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN)( GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z );
        void       (WINE_GLAPI *p_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN)( const GLuint *rc, const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v );
        void       (WINE_GLAPI *p_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN)( GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z );
        void       (WINE_GLAPI *p_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN)( const GLuint *rc, const GLfloat *tc, const GLfloat *n, const GLfloat *v );
        void       (WINE_GLAPI *p_glReplacementCodeuiTexCoord2fVertex3fSUN)( GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z );
        void       (WINE_GLAPI *p_glReplacementCodeuiTexCoord2fVertex3fvSUN)( const GLuint *rc, const GLfloat *tc, const GLfloat *v );
        void       (WINE_GLAPI *p_glReplacementCodeuiVertex3fSUN)( GLuint rc, GLfloat x, GLfloat y, GLfloat z );
        void       (WINE_GLAPI *p_glReplacementCodeuiVertex3fvSUN)( const GLuint *rc, const GLfloat *v );
        void       (WINE_GLAPI *p_glReplacementCodeuivSUN)( const GLuint *code );
        void       (WINE_GLAPI *p_glReplacementCodeusSUN)( GLushort code );
        void       (WINE_GLAPI *p_glReplacementCodeusvSUN)( const GLushort *code );
        void       (WINE_GLAPI *p_glRequestResidentProgramsNV)( GLsizei n, const GLuint *programs );
        void       (WINE_GLAPI *p_glResetHistogram)( GLenum target );
        void       (WINE_GLAPI *p_glResetHistogramEXT)( GLenum target );
        void       (WINE_GLAPI *p_glResetMemoryObjectParameterNV)( GLuint memory, GLenum pname );
        void       (WINE_GLAPI *p_glResetMinmax)( GLenum target );
        void       (WINE_GLAPI *p_glResetMinmaxEXT)( GLenum target );
        void       (WINE_GLAPI *p_glResizeBuffersMESA)(void);
        void       (WINE_GLAPI *p_glResolveDepthValuesNV)(void);
        void       (WINE_GLAPI *p_glResumeTransformFeedback)(void);
        void       (WINE_GLAPI *p_glResumeTransformFeedbackNV)(void);
        void       (WINE_GLAPI *p_glRotatexOES)( GLfixed angle, GLfixed x, GLfixed y, GLfixed z );
        void       (WINE_GLAPI *p_glSampleCoverage)( GLfloat value, GLboolean invert );
        void       (WINE_GLAPI *p_glSampleCoverageARB)( GLfloat value, GLboolean invert );
        void       (WINE_GLAPI *p_glSampleMapATI)( GLuint dst, GLuint interp, GLenum swizzle );
        void       (WINE_GLAPI *p_glSampleMaskEXT)( GLclampf value, GLboolean invert );
        void       (WINE_GLAPI *p_glSampleMaskIndexedNV)( GLuint index, GLbitfield mask );
        void       (WINE_GLAPI *p_glSampleMaskSGIS)( GLclampf value, GLboolean invert );
        void       (WINE_GLAPI *p_glSampleMaski)( GLuint maskNumber, GLbitfield mask );
        void       (WINE_GLAPI *p_glSamplePatternEXT)( GLenum pattern );
        void       (WINE_GLAPI *p_glSamplePatternSGIS)( GLenum pattern );
        void       (WINE_GLAPI *p_glSamplerParameterIiv)( GLuint sampler, GLenum pname, const GLint *param );
        void       (WINE_GLAPI *p_glSamplerParameterIuiv)( GLuint sampler, GLenum pname, const GLuint *param );
        void       (WINE_GLAPI *p_glSamplerParameterf)( GLuint sampler, GLenum pname, GLfloat param );
        void       (WINE_GLAPI *p_glSamplerParameterfv)( GLuint sampler, GLenum pname, const GLfloat *param );
        void       (WINE_GLAPI *p_glSamplerParameteri)( GLuint sampler, GLenum pname, GLint param );
        void       (WINE_GLAPI *p_glSamplerParameteriv)( GLuint sampler, GLenum pname, const GLint *param );
        void       (WINE_GLAPI *p_glScalexOES)( GLfixed x, GLfixed y, GLfixed z );
        void       (WINE_GLAPI *p_glScissorArrayv)( GLuint first, GLsizei count, const GLint *v );
        void       (WINE_GLAPI *p_glScissorExclusiveArrayvNV)( GLuint first, GLsizei count, const GLint *v );
        void       (WINE_GLAPI *p_glScissorExclusiveNV)( GLint x, GLint y, GLsizei width, GLsizei height );
        void       (WINE_GLAPI *p_glScissorIndexed)( GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height );
        void       (WINE_GLAPI *p_glScissorIndexedv)( GLuint index, const GLint *v );
        void       (WINE_GLAPI *p_glSecondaryColor3b)( GLbyte red, GLbyte green, GLbyte blue );
        void       (WINE_GLAPI *p_glSecondaryColor3bEXT)( GLbyte red, GLbyte green, GLbyte blue );
        void       (WINE_GLAPI *p_glSecondaryColor3bv)( const GLbyte *v );
        void       (WINE_GLAPI *p_glSecondaryColor3bvEXT)( const GLbyte *v );
        void       (WINE_GLAPI *p_glSecondaryColor3d)( GLdouble red, GLdouble green, GLdouble blue );
        void       (WINE_GLAPI *p_glSecondaryColor3dEXT)( GLdouble red, GLdouble green, GLdouble blue );
        void       (WINE_GLAPI *p_glSecondaryColor3dv)( const GLdouble *v );
        void       (WINE_GLAPI *p_glSecondaryColor3dvEXT)( const GLdouble *v );
        void       (WINE_GLAPI *p_glSecondaryColor3f)( GLfloat red, GLfloat green, GLfloat blue );
        void       (WINE_GLAPI *p_glSecondaryColor3fEXT)( GLfloat red, GLfloat green, GLfloat blue );
        void       (WINE_GLAPI *p_glSecondaryColor3fv)( const GLfloat *v );
        void       (WINE_GLAPI *p_glSecondaryColor3fvEXT)( const GLfloat *v );
        void       (WINE_GLAPI *p_glSecondaryColor3hNV)( GLhalfNV red, GLhalfNV green, GLhalfNV blue );
        void       (WINE_GLAPI *p_glSecondaryColor3hvNV)( const GLhalfNV *v );
        void       (WINE_GLAPI *p_glSecondaryColor3i)( GLint red, GLint green, GLint blue );
        void       (WINE_GLAPI *p_glSecondaryColor3iEXT)( GLint red, GLint green, GLint blue );
        void       (WINE_GLAPI *p_glSecondaryColor3iv)( const GLint *v );
        void       (WINE_GLAPI *p_glSecondaryColor3ivEXT)( const GLint *v );
        void       (WINE_GLAPI *p_glSecondaryColor3s)( GLshort red, GLshort green, GLshort blue );
        void       (WINE_GLAPI *p_glSecondaryColor3sEXT)( GLshort red, GLshort green, GLshort blue );
        void       (WINE_GLAPI *p_glSecondaryColor3sv)( const GLshort *v );
        void       (WINE_GLAPI *p_glSecondaryColor3svEXT)( const GLshort *v );
        void       (WINE_GLAPI *p_glSecondaryColor3ub)( GLubyte red, GLubyte green, GLubyte blue );
        void       (WINE_GLAPI *p_glSecondaryColor3ubEXT)( GLubyte red, GLubyte green, GLubyte blue );
        void       (WINE_GLAPI *p_glSecondaryColor3ubv)( const GLubyte *v );
        void       (WINE_GLAPI *p_glSecondaryColor3ubvEXT)( const GLubyte *v );
        void       (WINE_GLAPI *p_glSecondaryColor3ui)( GLuint red, GLuint green, GLuint blue );
        void       (WINE_GLAPI *p_glSecondaryColor3uiEXT)( GLuint red, GLuint green, GLuint blue );
        void       (WINE_GLAPI *p_glSecondaryColor3uiv)( const GLuint *v );
        void       (WINE_GLAPI *p_glSecondaryColor3uivEXT)( const GLuint *v );
        void       (WINE_GLAPI *p_glSecondaryColor3us)( GLushort red, GLushort green, GLushort blue );
        void       (WINE_GLAPI *p_glSecondaryColor3usEXT)( GLushort red, GLushort green, GLushort blue );
        void       (WINE_GLAPI *p_glSecondaryColor3usv)( const GLushort *v );
        void       (WINE_GLAPI *p_glSecondaryColor3usvEXT)( const GLushort *v );
        void       (WINE_GLAPI *p_glSecondaryColorFormatNV)( GLint size, GLenum type, GLsizei stride );
        void       (WINE_GLAPI *p_glSecondaryColorP3ui)( GLenum type, GLuint color );
        void       (WINE_GLAPI *p_glSecondaryColorP3uiv)( GLenum type, const GLuint *color );
        void       (WINE_GLAPI *p_glSecondaryColorPointer)( GLint size, GLenum type, GLsizei stride, const void *pointer );
        void       (WINE_GLAPI *p_glSecondaryColorPointerEXT)( GLint size, GLenum type, GLsizei stride, const void *pointer );
        void       (WINE_GLAPI *p_glSecondaryColorPointerListIBM)( GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride );
        void       (WINE_GLAPI *p_glSelectPerfMonitorCountersAMD)( GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint *counterList );
        void       (WINE_GLAPI *p_glSelectTextureCoordSetSGIS)( GLenum target );
        void       (WINE_GLAPI *p_glSelectTextureSGIS)( GLenum target );
        void       (WINE_GLAPI *p_glSemaphoreParameterui64vEXT)( GLuint semaphore, GLenum pname, const GLuint64 *params );
        void       (WINE_GLAPI *p_glSeparableFilter2D)( GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *row, const void *column );
        void       (WINE_GLAPI *p_glSeparableFilter2DEXT)( GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *row, const void *column );
        void       (WINE_GLAPI *p_glSetFenceAPPLE)( GLuint fence );
        void       (WINE_GLAPI *p_glSetFenceNV)( GLuint fence, GLenum condition );
        void       (WINE_GLAPI *p_glSetFragmentShaderConstantATI)( GLuint dst, const GLfloat *value );
        void       (WINE_GLAPI *p_glSetInvariantEXT)( GLuint id, GLenum type, const void *addr );
        void       (WINE_GLAPI *p_glSetLocalConstantEXT)( GLuint id, GLenum type, const void *addr );
        void       (WINE_GLAPI *p_glSetMultisamplefvAMD)( GLenum pname, GLuint index, const GLfloat *val );
        void       (WINE_GLAPI *p_glShaderBinary)( GLsizei count, const GLuint *shaders, GLenum binaryformat, const void *binary, GLsizei length );
        void       (WINE_GLAPI *p_glShaderOp1EXT)( GLenum op, GLuint res, GLuint arg1 );
        void       (WINE_GLAPI *p_glShaderOp2EXT)( GLenum op, GLuint res, GLuint arg1, GLuint arg2 );
        void       (WINE_GLAPI *p_glShaderOp3EXT)( GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3 );
        void       (WINE_GLAPI *p_glShaderSource)( GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length );
        void       (WINE_GLAPI *p_glShaderSourceARB)( GLhandleARB shaderObj, GLsizei count, const GLcharARB **string, const GLint *length );
        void       (WINE_GLAPI *p_glShaderStorageBlockBinding)( GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding );
        void       (WINE_GLAPI *p_glShadingRateImageBarrierNV)( GLboolean synchronize );
        void       (WINE_GLAPI *p_glShadingRateImagePaletteNV)( GLuint viewport, GLuint first, GLsizei count, const GLenum *rates );
        void       (WINE_GLAPI *p_glShadingRateSampleOrderCustomNV)( GLenum rate, GLuint samples, const GLint *locations );
        void       (WINE_GLAPI *p_glShadingRateSampleOrderNV)( GLenum order );
        void       (WINE_GLAPI *p_glSharpenTexFuncSGIS)( GLenum target, GLsizei n, const GLfloat *points );
        void       (WINE_GLAPI *p_glSignalSemaphoreEXT)( GLuint semaphore, GLuint numBufferBarriers, const GLuint *buffers, GLuint numTextureBarriers, const GLuint *textures, const GLenum *dstLayouts );
        void       (WINE_GLAPI *p_glSignalSemaphoreui64NVX)( GLuint signalGpu, GLsizei fenceObjectCount, const GLuint *semaphoreArray, const GLuint64 *fenceValueArray );
        void       (WINE_GLAPI *p_glSignalVkFenceNV)( GLuint64 vkFence );
        void       (WINE_GLAPI *p_glSignalVkSemaphoreNV)( GLuint64 vkSemaphore );
        void       (WINE_GLAPI *p_glSpecializeShader)( GLuint shader, const GLchar *pEntryPoint, GLuint numSpecializationConstants, const GLuint *pConstantIndex, const GLuint *pConstantValue );
        void       (WINE_GLAPI *p_glSpecializeShaderARB)( GLuint shader, const GLchar *pEntryPoint, GLuint numSpecializationConstants, const GLuint *pConstantIndex, const GLuint *pConstantValue );
        void       (WINE_GLAPI *p_glSpriteParameterfSGIX)( GLenum pname, GLfloat param );
        void       (WINE_GLAPI *p_glSpriteParameterfvSGIX)( GLenum pname, const GLfloat *params );
        void       (WINE_GLAPI *p_glSpriteParameteriSGIX)( GLenum pname, GLint param );
        void       (WINE_GLAPI *p_glSpriteParameterivSGIX)( GLenum pname, const GLint *params );
        void       (WINE_GLAPI *p_glStartInstrumentsSGIX)(void);
        void       (WINE_GLAPI *p_glStateCaptureNV)( GLuint state, GLenum mode );
        void       (WINE_GLAPI *p_glStencilClearTagEXT)( GLsizei stencilTagBits, GLuint stencilClearTag );
        void       (WINE_GLAPI *p_glStencilFillPathInstancedNV)( GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues );
        void       (WINE_GLAPI *p_glStencilFillPathNV)( GLuint path, GLenum fillMode, GLuint mask );
        void       (WINE_GLAPI *p_glStencilFuncSeparate)( GLenum face, GLenum func, GLint ref, GLuint mask );
        void       (WINE_GLAPI *p_glStencilFuncSeparateATI)( GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask );
        void       (WINE_GLAPI *p_glStencilMaskSeparate)( GLenum face, GLuint mask );
        void       (WINE_GLAPI *p_glStencilOpSeparate)( GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass );
        void       (WINE_GLAPI *p_glStencilOpSeparateATI)( GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass );
        void       (WINE_GLAPI *p_glStencilOpValueAMD)( GLenum face, GLuint value );
        void       (WINE_GLAPI *p_glStencilStrokePathInstancedNV)( GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues );
        void       (WINE_GLAPI *p_glStencilStrokePathNV)( GLuint path, GLint reference, GLuint mask );
        void       (WINE_GLAPI *p_glStencilThenCoverFillPathInstancedNV)( GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues );
        void       (WINE_GLAPI *p_glStencilThenCoverFillPathNV)( GLuint path, GLenum fillMode, GLuint mask, GLenum coverMode );
        void       (WINE_GLAPI *p_glStencilThenCoverStrokePathInstancedNV)( GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues );
        void       (WINE_GLAPI *p_glStencilThenCoverStrokePathNV)( GLuint path, GLint reference, GLuint mask, GLenum coverMode );
        void       (WINE_GLAPI *p_glStopInstrumentsSGIX)( GLint marker );
        void       (WINE_GLAPI *p_glStringMarkerGREMEDY)( GLsizei len, const void *string );
        void       (WINE_GLAPI *p_glSubpixelPrecisionBiasNV)( GLuint xbits, GLuint ybits );
        void       (WINE_GLAPI *p_glSwizzleEXT)( GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW );
        void       (WINE_GLAPI *p_glSyncTextureINTEL)( GLuint texture );
        void       (WINE_GLAPI *p_glTagSampleBufferSGIX)(void);
        void       (WINE_GLAPI *p_glTangent3bEXT)( GLbyte tx, GLbyte ty, GLbyte tz );
        void       (WINE_GLAPI *p_glTangent3bvEXT)( const GLbyte *v );
        void       (WINE_GLAPI *p_glTangent3dEXT)( GLdouble tx, GLdouble ty, GLdouble tz );
        void       (WINE_GLAPI *p_glTangent3dvEXT)( const GLdouble *v );
        void       (WINE_GLAPI *p_glTangent3fEXT)( GLfloat tx, GLfloat ty, GLfloat tz );
        void       (WINE_GLAPI *p_glTangent3fvEXT)( const GLfloat *v );
        void       (WINE_GLAPI *p_glTangent3iEXT)( GLint tx, GLint ty, GLint tz );
        void       (WINE_GLAPI *p_glTangent3ivEXT)( const GLint *v );
        void       (WINE_GLAPI *p_glTangent3sEXT)( GLshort tx, GLshort ty, GLshort tz );
        void       (WINE_GLAPI *p_glTangent3svEXT)( const GLshort *v );
        void       (WINE_GLAPI *p_glTangentPointerEXT)( GLenum type, GLsizei stride, const void *pointer );
        void       (WINE_GLAPI *p_glTbufferMask3DFX)( GLuint mask );
        void       (WINE_GLAPI *p_glTessellationFactorAMD)( GLfloat factor );
        void       (WINE_GLAPI *p_glTessellationModeAMD)( GLenum mode );
        GLboolean  (WINE_GLAPI *p_glTestFenceAPPLE)( GLuint fence );
        GLboolean  (WINE_GLAPI *p_glTestFenceNV)( GLuint fence );
        GLboolean  (WINE_GLAPI *p_glTestObjectAPPLE)( GLenum object, GLuint name );
        void       (WINE_GLAPI *p_glTexAttachMemoryNV)( GLenum target, GLuint memory, GLuint64 offset );
        void       (WINE_GLAPI *p_glTexBuffer)( GLenum target, GLenum internalformat, GLuint buffer );
        void       (WINE_GLAPI *p_glTexBufferARB)( GLenum target, GLenum internalformat, GLuint buffer );
        void       (WINE_GLAPI *p_glTexBufferEXT)( GLenum target, GLenum internalformat, GLuint buffer );
        void       (WINE_GLAPI *p_glTexBufferRange)( GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size );
        void       (WINE_GLAPI *p_glTexBumpParameterfvATI)( GLenum pname, const GLfloat *param );
        void       (WINE_GLAPI *p_glTexBumpParameterivATI)( GLenum pname, const GLint *param );
        void       (WINE_GLAPI *p_glTexCoord1bOES)( GLbyte s );
        void       (WINE_GLAPI *p_glTexCoord1bvOES)( const GLbyte *coords );
        void       (WINE_GLAPI *p_glTexCoord1hNV)( GLhalfNV s );
        void       (WINE_GLAPI *p_glTexCoord1hvNV)( const GLhalfNV *v );
        void       (WINE_GLAPI *p_glTexCoord1xOES)( GLfixed s );
        void       (WINE_GLAPI *p_glTexCoord1xvOES)( const GLfixed *coords );
        void       (WINE_GLAPI *p_glTexCoord2bOES)( GLbyte s, GLbyte t );
        void       (WINE_GLAPI *p_glTexCoord2bvOES)( const GLbyte *coords );
        void       (WINE_GLAPI *p_glTexCoord2fColor3fVertex3fSUN)( GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z );
        void       (WINE_GLAPI *p_glTexCoord2fColor3fVertex3fvSUN)( const GLfloat *tc, const GLfloat *c, const GLfloat *v );
        void       (WINE_GLAPI *p_glTexCoord2fColor4fNormal3fVertex3fSUN)( GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z );
        void       (WINE_GLAPI *p_glTexCoord2fColor4fNormal3fVertex3fvSUN)( const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v );
        void       (WINE_GLAPI *p_glTexCoord2fColor4ubVertex3fSUN)( GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z );
        void       (WINE_GLAPI *p_glTexCoord2fColor4ubVertex3fvSUN)( const GLfloat *tc, const GLubyte *c, const GLfloat *v );
        void       (WINE_GLAPI *p_glTexCoord2fNormal3fVertex3fSUN)( GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z );
        void       (WINE_GLAPI *p_glTexCoord2fNormal3fVertex3fvSUN)( const GLfloat *tc, const GLfloat *n, const GLfloat *v );
        void       (WINE_GLAPI *p_glTexCoord2fVertex3fSUN)( GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z );
        void       (WINE_GLAPI *p_glTexCoord2fVertex3fvSUN)( const GLfloat *tc, const GLfloat *v );
        void       (WINE_GLAPI *p_glTexCoord2hNV)( GLhalfNV s, GLhalfNV t );
        void       (WINE_GLAPI *p_glTexCoord2hvNV)( const GLhalfNV *v );
        void       (WINE_GLAPI *p_glTexCoord2xOES)( GLfixed s, GLfixed t );
        void       (WINE_GLAPI *p_glTexCoord2xvOES)( const GLfixed *coords );
        void       (WINE_GLAPI *p_glTexCoord3bOES)( GLbyte s, GLbyte t, GLbyte r );
        void       (WINE_GLAPI *p_glTexCoord3bvOES)( const GLbyte *coords );
        void       (WINE_GLAPI *p_glTexCoord3hNV)( GLhalfNV s, GLhalfNV t, GLhalfNV r );
        void       (WINE_GLAPI *p_glTexCoord3hvNV)( const GLhalfNV *v );
        void       (WINE_GLAPI *p_glTexCoord3xOES)( GLfixed s, GLfixed t, GLfixed r );
        void       (WINE_GLAPI *p_glTexCoord3xvOES)( const GLfixed *coords );
        void       (WINE_GLAPI *p_glTexCoord4bOES)( GLbyte s, GLbyte t, GLbyte r, GLbyte q );
        void       (WINE_GLAPI *p_glTexCoord4bvOES)( const GLbyte *coords );
        void       (WINE_GLAPI *p_glTexCoord4fColor4fNormal3fVertex4fSUN)( GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w );
        void       (WINE_GLAPI *p_glTexCoord4fColor4fNormal3fVertex4fvSUN)( const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v );
        void       (WINE_GLAPI *p_glTexCoord4fVertex4fSUN)( GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w );
        void       (WINE_GLAPI *p_glTexCoord4fVertex4fvSUN)( const GLfloat *tc, const GLfloat *v );
        void       (WINE_GLAPI *p_glTexCoord4hNV)( GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q );
        void       (WINE_GLAPI *p_glTexCoord4hvNV)( const GLhalfNV *v );
        void       (WINE_GLAPI *p_glTexCoord4xOES)( GLfixed s, GLfixed t, GLfixed r, GLfixed q );
        void       (WINE_GLAPI *p_glTexCoord4xvOES)( const GLfixed *coords );
        void       (WINE_GLAPI *p_glTexCoordFormatNV)( GLint size, GLenum type, GLsizei stride );
        void       (WINE_GLAPI *p_glTexCoordP1ui)( GLenum type, GLuint coords );
        void       (WINE_GLAPI *p_glTexCoordP1uiv)( GLenum type, const GLuint *coords );
        void       (WINE_GLAPI *p_glTexCoordP2ui)( GLenum type, GLuint coords );
        void       (WINE_GLAPI *p_glTexCoordP2uiv)( GLenum type, const GLuint *coords );
        void       (WINE_GLAPI *p_glTexCoordP3ui)( GLenum type, GLuint coords );
        void       (WINE_GLAPI *p_glTexCoordP3uiv)( GLenum type, const GLuint *coords );
        void       (WINE_GLAPI *p_glTexCoordP4ui)( GLenum type, GLuint coords );
        void       (WINE_GLAPI *p_glTexCoordP4uiv)( GLenum type, const GLuint *coords );
        void       (WINE_GLAPI *p_glTexCoordPointerEXT)( GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer );
        void       (WINE_GLAPI *p_glTexCoordPointerListIBM)( GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride );
        void       (WINE_GLAPI *p_glTexCoordPointervINTEL)( GLint size, GLenum type, const void **pointer );
        void       (WINE_GLAPI *p_glTexEnvxOES)( GLenum target, GLenum pname, GLfixed param );
        void       (WINE_GLAPI *p_glTexEnvxvOES)( GLenum target, GLenum pname, const GLfixed *params );
        void       (WINE_GLAPI *p_glTexFilterFuncSGIS)( GLenum target, GLenum filter, GLsizei n, const GLfloat *weights );
        void       (WINE_GLAPI *p_glTexGenxOES)( GLenum coord, GLenum pname, GLfixed param );
        void       (WINE_GLAPI *p_glTexGenxvOES)( GLenum coord, GLenum pname, const GLfixed *params );
        void       (WINE_GLAPI *p_glTexImage2DMultisample)( GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations );
        void       (WINE_GLAPI *p_glTexImage2DMultisampleCoverageNV)( GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations );
        void       (WINE_GLAPI *p_glTexImage3D)( GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels );
        void       (WINE_GLAPI *p_glTexImage3DEXT)( GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels );
        void       (WINE_GLAPI *p_glTexImage3DMultisample)( GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations );
        void       (WINE_GLAPI *p_glTexImage3DMultisampleCoverageNV)( GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations );
        void       (WINE_GLAPI *p_glTexImage4DSGIS)( GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, const void *pixels );
        void       (WINE_GLAPI *p_glTexPageCommitmentARB)( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit );
        void       (WINE_GLAPI *p_glTexParameterIiv)( GLenum target, GLenum pname, const GLint *params );
        void       (WINE_GLAPI *p_glTexParameterIivEXT)( GLenum target, GLenum pname, const GLint *params );
        void       (WINE_GLAPI *p_glTexParameterIuiv)( GLenum target, GLenum pname, const GLuint *params );
        void       (WINE_GLAPI *p_glTexParameterIuivEXT)( GLenum target, GLenum pname, const GLuint *params );
        void       (WINE_GLAPI *p_glTexParameterxOES)( GLenum target, GLenum pname, GLfixed param );
        void       (WINE_GLAPI *p_glTexParameterxvOES)( GLenum target, GLenum pname, const GLfixed *params );
        void       (WINE_GLAPI *p_glTexRenderbufferNV)( GLenum target, GLuint renderbuffer );
        void       (WINE_GLAPI *p_glTexStorage1D)( GLenum target, GLsizei levels, GLenum internalformat, GLsizei width );
        void       (WINE_GLAPI *p_glTexStorage2D)( GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height );
        void       (WINE_GLAPI *p_glTexStorage2DMultisample)( GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations );
        void       (WINE_GLAPI *p_glTexStorage3D)( GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth );
        void       (WINE_GLAPI *p_glTexStorage3DMultisample)( GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations );
        void       (WINE_GLAPI *p_glTexStorageMem1DEXT)( GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLuint memory, GLuint64 offset );
        void       (WINE_GLAPI *p_glTexStorageMem2DEXT)( GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset );
        void       (WINE_GLAPI *p_glTexStorageMem2DMultisampleEXT)( GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset );
        void       (WINE_GLAPI *p_glTexStorageMem3DEXT)( GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset );
        void       (WINE_GLAPI *p_glTexStorageMem3DMultisampleEXT)( GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset );
        void       (WINE_GLAPI *p_glTexStorageSparseAMD)( GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags );
        void       (WINE_GLAPI *p_glTexSubImage1DEXT)( GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels );
        void       (WINE_GLAPI *p_glTexSubImage2DEXT)( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels );
        void       (WINE_GLAPI *p_glTexSubImage3D)( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels );
        void       (WINE_GLAPI *p_glTexSubImage3DEXT)( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels );
        void       (WINE_GLAPI *p_glTexSubImage4DSGIS)( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, const void *pixels );
        void       (WINE_GLAPI *p_glTextureAttachMemoryNV)( GLuint texture, GLuint memory, GLuint64 offset );
        void       (WINE_GLAPI *p_glTextureBarrier)(void);
        void       (WINE_GLAPI *p_glTextureBarrierNV)(void);
        void       (WINE_GLAPI *p_glTextureBuffer)( GLuint texture, GLenum internalformat, GLuint buffer );
        void       (WINE_GLAPI *p_glTextureBufferEXT)( GLuint texture, GLenum target, GLenum internalformat, GLuint buffer );
        void       (WINE_GLAPI *p_glTextureBufferRange)( GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size );
        void       (WINE_GLAPI *p_glTextureBufferRangeEXT)( GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size );
        void       (WINE_GLAPI *p_glTextureColorMaskSGIS)( GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha );
        void       (WINE_GLAPI *p_glTextureImage1DEXT)( GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels );
        void       (WINE_GLAPI *p_glTextureImage2DEXT)( GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels );
        void       (WINE_GLAPI *p_glTextureImage2DMultisampleCoverageNV)( GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations );
        void       (WINE_GLAPI *p_glTextureImage2DMultisampleNV)( GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations );
        void       (WINE_GLAPI *p_glTextureImage3DEXT)( GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels );
        void       (WINE_GLAPI *p_glTextureImage3DMultisampleCoverageNV)( GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations );
        void       (WINE_GLAPI *p_glTextureImage3DMultisampleNV)( GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations );
        void       (WINE_GLAPI *p_glTextureLightEXT)( GLenum pname );
        void       (WINE_GLAPI *p_glTextureMaterialEXT)( GLenum face, GLenum mode );
        void       (WINE_GLAPI *p_glTextureNormalEXT)( GLenum mode );
        void       (WINE_GLAPI *p_glTexturePageCommitmentEXT)( GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit );
        void       (WINE_GLAPI *p_glTextureParameterIiv)( GLuint texture, GLenum pname, const GLint *params );
        void       (WINE_GLAPI *p_glTextureParameterIivEXT)( GLuint texture, GLenum target, GLenum pname, const GLint *params );
        void       (WINE_GLAPI *p_glTextureParameterIuiv)( GLuint texture, GLenum pname, const GLuint *params );
        void       (WINE_GLAPI *p_glTextureParameterIuivEXT)( GLuint texture, GLenum target, GLenum pname, const GLuint *params );
        void       (WINE_GLAPI *p_glTextureParameterf)( GLuint texture, GLenum pname, GLfloat param );
        void       (WINE_GLAPI *p_glTextureParameterfEXT)( GLuint texture, GLenum target, GLenum pname, GLfloat param );
        void       (WINE_GLAPI *p_glTextureParameterfv)( GLuint texture, GLenum pname, const GLfloat *param );
        void       (WINE_GLAPI *p_glTextureParameterfvEXT)( GLuint texture, GLenum target, GLenum pname, const GLfloat *params );
        void       (WINE_GLAPI *p_glTextureParameteri)( GLuint texture, GLenum pname, GLint param );
        void       (WINE_GLAPI *p_glTextureParameteriEXT)( GLuint texture, GLenum target, GLenum pname, GLint param );
        void       (WINE_GLAPI *p_glTextureParameteriv)( GLuint texture, GLenum pname, const GLint *param );
        void       (WINE_GLAPI *p_glTextureParameterivEXT)( GLuint texture, GLenum target, GLenum pname, const GLint *params );
        void       (WINE_GLAPI *p_glTextureRangeAPPLE)( GLenum target, GLsizei length, const void *pointer );
        void       (WINE_GLAPI *p_glTextureRenderbufferEXT)( GLuint texture, GLenum target, GLuint renderbuffer );
        void       (WINE_GLAPI *p_glTextureStorage1D)( GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width );
        void       (WINE_GLAPI *p_glTextureStorage1DEXT)( GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width );
        void       (WINE_GLAPI *p_glTextureStorage2D)( GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height );
        void       (WINE_GLAPI *p_glTextureStorage2DEXT)( GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height );
        void       (WINE_GLAPI *p_glTextureStorage2DMultisample)( GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations );
        void       (WINE_GLAPI *p_glTextureStorage2DMultisampleEXT)( GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations );
        void       (WINE_GLAPI *p_glTextureStorage3D)( GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth );
        void       (WINE_GLAPI *p_glTextureStorage3DEXT)( GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth );
        void       (WINE_GLAPI *p_glTextureStorage3DMultisample)( GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations );
        void       (WINE_GLAPI *p_glTextureStorage3DMultisampleEXT)( GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations );
        void       (WINE_GLAPI *p_glTextureStorageMem1DEXT)( GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLuint memory, GLuint64 offset );
        void       (WINE_GLAPI *p_glTextureStorageMem2DEXT)( GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset );
        void       (WINE_GLAPI *p_glTextureStorageMem2DMultisampleEXT)( GLuint texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset );
        void       (WINE_GLAPI *p_glTextureStorageMem3DEXT)( GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset );
        void       (WINE_GLAPI *p_glTextureStorageMem3DMultisampleEXT)( GLuint texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset );
        void       (WINE_GLAPI *p_glTextureStorageSparseAMD)( GLuint texture, GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags );
        void       (WINE_GLAPI *p_glTextureSubImage1D)( GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels );
        void       (WINE_GLAPI *p_glTextureSubImage1DEXT)( GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels );
        void       (WINE_GLAPI *p_glTextureSubImage2D)( GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels );
        void       (WINE_GLAPI *p_glTextureSubImage2DEXT)( GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels );
        void       (WINE_GLAPI *p_glTextureSubImage3D)( GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels );
        void       (WINE_GLAPI *p_glTextureSubImage3DEXT)( GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels );
        void       (WINE_GLAPI *p_glTextureView)( GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers );
        void       (WINE_GLAPI *p_glTrackMatrixNV)( GLenum target, GLuint address, GLenum matrix, GLenum transform );
        void       (WINE_GLAPI *p_glTransformFeedbackAttribsNV)( GLsizei count, const GLint *attribs, GLenum bufferMode );
        void       (WINE_GLAPI *p_glTransformFeedbackBufferBase)( GLuint xfb, GLuint index, GLuint buffer );
        void       (WINE_GLAPI *p_glTransformFeedbackBufferRange)( GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size );
        void       (WINE_GLAPI *p_glTransformFeedbackStreamAttribsNV)( GLsizei count, const GLint *attribs, GLsizei nbuffers, const GLint *bufstreams, GLenum bufferMode );
        void       (WINE_GLAPI *p_glTransformFeedbackVaryings)( GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode );
        void       (WINE_GLAPI *p_glTransformFeedbackVaryingsEXT)( GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode );
        void       (WINE_GLAPI *p_glTransformFeedbackVaryingsNV)( GLuint program, GLsizei count, const GLint *locations, GLenum bufferMode );
        void       (WINE_GLAPI *p_glTransformPathNV)( GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat *transformValues );
        void       (WINE_GLAPI *p_glTranslatexOES)( GLfixed x, GLfixed y, GLfixed z );
        void       (WINE_GLAPI *p_glUniform1d)( GLint location, GLdouble x );
        void       (WINE_GLAPI *p_glUniform1dv)( GLint location, GLsizei count, const GLdouble *value );
        void       (WINE_GLAPI *p_glUniform1f)( GLint location, GLfloat v0 );
        void       (WINE_GLAPI *p_glUniform1fARB)( GLint location, GLfloat v0 );
        void       (WINE_GLAPI *p_glUniform1fv)( GLint location, GLsizei count, const GLfloat *value );
        void       (WINE_GLAPI *p_glUniform1fvARB)( GLint location, GLsizei count, const GLfloat *value );
        void       (WINE_GLAPI *p_glUniform1i)( GLint location, GLint v0 );
        void       (WINE_GLAPI *p_glUniform1i64ARB)( GLint location, GLint64 x );
        void       (WINE_GLAPI *p_glUniform1i64NV)( GLint location, GLint64EXT x );
        void       (WINE_GLAPI *p_glUniform1i64vARB)( GLint location, GLsizei count, const GLint64 *value );
        void       (WINE_GLAPI *p_glUniform1i64vNV)( GLint location, GLsizei count, const GLint64EXT *value );
        void       (WINE_GLAPI *p_glUniform1iARB)( GLint location, GLint v0 );
        void       (WINE_GLAPI *p_glUniform1iv)( GLint location, GLsizei count, const GLint *value );
        void       (WINE_GLAPI *p_glUniform1ivARB)( GLint location, GLsizei count, const GLint *value );
        void       (WINE_GLAPI *p_glUniform1ui)( GLint location, GLuint v0 );
        void       (WINE_GLAPI *p_glUniform1ui64ARB)( GLint location, GLuint64 x );
        void       (WINE_GLAPI *p_glUniform1ui64NV)( GLint location, GLuint64EXT x );
        void       (WINE_GLAPI *p_glUniform1ui64vARB)( GLint location, GLsizei count, const GLuint64 *value );
        void       (WINE_GLAPI *p_glUniform1ui64vNV)( GLint location, GLsizei count, const GLuint64EXT *value );
        void       (WINE_GLAPI *p_glUniform1uiEXT)( GLint location, GLuint v0 );
        void       (WINE_GLAPI *p_glUniform1uiv)( GLint location, GLsizei count, const GLuint *value );
        void       (WINE_GLAPI *p_glUniform1uivEXT)( GLint location, GLsizei count, const GLuint *value );
        void       (WINE_GLAPI *p_glUniform2d)( GLint location, GLdouble x, GLdouble y );
        void       (WINE_GLAPI *p_glUniform2dv)( GLint location, GLsizei count, const GLdouble *value );
        void       (WINE_GLAPI *p_glUniform2f)( GLint location, GLfloat v0, GLfloat v1 );
        void       (WINE_GLAPI *p_glUniform2fARB)( GLint location, GLfloat v0, GLfloat v1 );
        void       (WINE_GLAPI *p_glUniform2fv)( GLint location, GLsizei count, const GLfloat *value );
        void       (WINE_GLAPI *p_glUniform2fvARB)( GLint location, GLsizei count, const GLfloat *value );
        void       (WINE_GLAPI *p_glUniform2i)( GLint location, GLint v0, GLint v1 );
        void       (WINE_GLAPI *p_glUniform2i64ARB)( GLint location, GLint64 x, GLint64 y );
        void       (WINE_GLAPI *p_glUniform2i64NV)( GLint location, GLint64EXT x, GLint64EXT y );
        void       (WINE_GLAPI *p_glUniform2i64vARB)( GLint location, GLsizei count, const GLint64 *value );
        void       (WINE_GLAPI *p_glUniform2i64vNV)( GLint location, GLsizei count, const GLint64EXT *value );
        void       (WINE_GLAPI *p_glUniform2iARB)( GLint location, GLint v0, GLint v1 );
        void       (WINE_GLAPI *p_glUniform2iv)( GLint location, GLsizei count, const GLint *value );
        void       (WINE_GLAPI *p_glUniform2ivARB)( GLint location, GLsizei count, const GLint *value );
        void       (WINE_GLAPI *p_glUniform2ui)( GLint location, GLuint v0, GLuint v1 );
        void       (WINE_GLAPI *p_glUniform2ui64ARB)( GLint location, GLuint64 x, GLuint64 y );
        void       (WINE_GLAPI *p_glUniform2ui64NV)( GLint location, GLuint64EXT x, GLuint64EXT y );
        void       (WINE_GLAPI *p_glUniform2ui64vARB)( GLint location, GLsizei count, const GLuint64 *value );
        void       (WINE_GLAPI *p_glUniform2ui64vNV)( GLint location, GLsizei count, const GLuint64EXT *value );
        void       (WINE_GLAPI *p_glUniform2uiEXT)( GLint location, GLuint v0, GLuint v1 );
        void       (WINE_GLAPI *p_glUniform2uiv)( GLint location, GLsizei count, const GLuint *value );
        void       (WINE_GLAPI *p_glUniform2uivEXT)( GLint location, GLsizei count, const GLuint *value );
        void       (WINE_GLAPI *p_glUniform3d)( GLint location, GLdouble x, GLdouble y, GLdouble z );
        void       (WINE_GLAPI *p_glUniform3dv)( GLint location, GLsizei count, const GLdouble *value );
        void       (WINE_GLAPI *p_glUniform3f)( GLint location, GLfloat v0, GLfloat v1, GLfloat v2 );
        void       (WINE_GLAPI *p_glUniform3fARB)( GLint location, GLfloat v0, GLfloat v1, GLfloat v2 );
        void       (WINE_GLAPI *p_glUniform3fv)( GLint location, GLsizei count, const GLfloat *value );
        void       (WINE_GLAPI *p_glUniform3fvARB)( GLint location, GLsizei count, const GLfloat *value );
        void       (WINE_GLAPI *p_glUniform3i)( GLint location, GLint v0, GLint v1, GLint v2 );
        void       (WINE_GLAPI *p_glUniform3i64ARB)( GLint location, GLint64 x, GLint64 y, GLint64 z );
        void       (WINE_GLAPI *p_glUniform3i64NV)( GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z );
        void       (WINE_GLAPI *p_glUniform3i64vARB)( GLint location, GLsizei count, const GLint64 *value );
        void       (WINE_GLAPI *p_glUniform3i64vNV)( GLint location, GLsizei count, const GLint64EXT *value );
        void       (WINE_GLAPI *p_glUniform3iARB)( GLint location, GLint v0, GLint v1, GLint v2 );
        void       (WINE_GLAPI *p_glUniform3iv)( GLint location, GLsizei count, const GLint *value );
        void       (WINE_GLAPI *p_glUniform3ivARB)( GLint location, GLsizei count, const GLint *value );
        void       (WINE_GLAPI *p_glUniform3ui)( GLint location, GLuint v0, GLuint v1, GLuint v2 );
        void       (WINE_GLAPI *p_glUniform3ui64ARB)( GLint location, GLuint64 x, GLuint64 y, GLuint64 z );
        void       (WINE_GLAPI *p_glUniform3ui64NV)( GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z );
        void       (WINE_GLAPI *p_glUniform3ui64vARB)( GLint location, GLsizei count, const GLuint64 *value );
        void       (WINE_GLAPI *p_glUniform3ui64vNV)( GLint location, GLsizei count, const GLuint64EXT *value );
        void       (WINE_GLAPI *p_glUniform3uiEXT)( GLint location, GLuint v0, GLuint v1, GLuint v2 );
        void       (WINE_GLAPI *p_glUniform3uiv)( GLint location, GLsizei count, const GLuint *value );
        void       (WINE_GLAPI *p_glUniform3uivEXT)( GLint location, GLsizei count, const GLuint *value );
        void       (WINE_GLAPI *p_glUniform4d)( GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w );
        void       (WINE_GLAPI *p_glUniform4dv)( GLint location, GLsizei count, const GLdouble *value );
        void       (WINE_GLAPI *p_glUniform4f)( GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3 );
        void       (WINE_GLAPI *p_glUniform4fARB)( GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3 );
        void       (WINE_GLAPI *p_glUniform4fv)( GLint location, GLsizei count, const GLfloat *value );
        void       (WINE_GLAPI *p_glUniform4fvARB)( GLint location, GLsizei count, const GLfloat *value );
        void       (WINE_GLAPI *p_glUniform4i)( GLint location, GLint v0, GLint v1, GLint v2, GLint v3 );
        void       (WINE_GLAPI *p_glUniform4i64ARB)( GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w );
        void       (WINE_GLAPI *p_glUniform4i64NV)( GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w );
        void       (WINE_GLAPI *p_glUniform4i64vARB)( GLint location, GLsizei count, const GLint64 *value );
        void       (WINE_GLAPI *p_glUniform4i64vNV)( GLint location, GLsizei count, const GLint64EXT *value );
        void       (WINE_GLAPI *p_glUniform4iARB)( GLint location, GLint v0, GLint v1, GLint v2, GLint v3 );
        void       (WINE_GLAPI *p_glUniform4iv)( GLint location, GLsizei count, const GLint *value );
        void       (WINE_GLAPI *p_glUniform4ivARB)( GLint location, GLsizei count, const GLint *value );
        void       (WINE_GLAPI *p_glUniform4ui)( GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3 );
        void       (WINE_GLAPI *p_glUniform4ui64ARB)( GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w );
        void       (WINE_GLAPI *p_glUniform4ui64NV)( GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w );
        void       (WINE_GLAPI *p_glUniform4ui64vARB)( GLint location, GLsizei count, const GLuint64 *value );
        void       (WINE_GLAPI *p_glUniform4ui64vNV)( GLint location, GLsizei count, const GLuint64EXT *value );
        void       (WINE_GLAPI *p_glUniform4uiEXT)( GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3 );
        void       (WINE_GLAPI *p_glUniform4uiv)( GLint location, GLsizei count, const GLuint *value );
        void       (WINE_GLAPI *p_glUniform4uivEXT)( GLint location, GLsizei count, const GLuint *value );
        void       (WINE_GLAPI *p_glUniformBlockBinding)( GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding );
        void       (WINE_GLAPI *p_glUniformBufferEXT)( GLuint program, GLint location, GLuint buffer );
        void       (WINE_GLAPI *p_glUniformHandleui64ARB)( GLint location, GLuint64 value );
        void       (WINE_GLAPI *p_glUniformHandleui64NV)( GLint location, GLuint64 value );
        void       (WINE_GLAPI *p_glUniformHandleui64vARB)( GLint location, GLsizei count, const GLuint64 *value );
        void       (WINE_GLAPI *p_glUniformHandleui64vNV)( GLint location, GLsizei count, const GLuint64 *value );
        void       (WINE_GLAPI *p_glUniformMatrix2dv)( GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
        void       (WINE_GLAPI *p_glUniformMatrix2fv)( GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
        void       (WINE_GLAPI *p_glUniformMatrix2fvARB)( GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
        void       (WINE_GLAPI *p_glUniformMatrix2x3dv)( GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
        void       (WINE_GLAPI *p_glUniformMatrix2x3fv)( GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
        void       (WINE_GLAPI *p_glUniformMatrix2x4dv)( GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
        void       (WINE_GLAPI *p_glUniformMatrix2x4fv)( GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
        void       (WINE_GLAPI *p_glUniformMatrix3dv)( GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
        void       (WINE_GLAPI *p_glUniformMatrix3fv)( GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
        void       (WINE_GLAPI *p_glUniformMatrix3fvARB)( GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
        void       (WINE_GLAPI *p_glUniformMatrix3x2dv)( GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
        void       (WINE_GLAPI *p_glUniformMatrix3x2fv)( GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
        void       (WINE_GLAPI *p_glUniformMatrix3x4dv)( GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
        void       (WINE_GLAPI *p_glUniformMatrix3x4fv)( GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
        void       (WINE_GLAPI *p_glUniformMatrix4dv)( GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
        void       (WINE_GLAPI *p_glUniformMatrix4fv)( GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
        void       (WINE_GLAPI *p_glUniformMatrix4fvARB)( GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
        void       (WINE_GLAPI *p_glUniformMatrix4x2dv)( GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
        void       (WINE_GLAPI *p_glUniformMatrix4x2fv)( GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
        void       (WINE_GLAPI *p_glUniformMatrix4x3dv)( GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
        void       (WINE_GLAPI *p_glUniformMatrix4x3fv)( GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
        void       (WINE_GLAPI *p_glUniformSubroutinesuiv)( GLenum shadertype, GLsizei count, const GLuint *indices );
        void       (WINE_GLAPI *p_glUniformui64NV)( GLint location, GLuint64EXT value );
        void       (WINE_GLAPI *p_glUniformui64vNV)( GLint location, GLsizei count, const GLuint64EXT *value );
        void       (WINE_GLAPI *p_glUnlockArraysEXT)(void);
        GLboolean  (WINE_GLAPI *p_glUnmapBuffer)( GLenum target );
        GLboolean  (WINE_GLAPI *p_glUnmapBufferARB)( GLenum target );
        GLboolean  (WINE_GLAPI *p_glUnmapNamedBuffer)( GLuint buffer );
        GLboolean  (WINE_GLAPI *p_glUnmapNamedBufferEXT)( GLuint buffer );
        void       (WINE_GLAPI *p_glUnmapObjectBufferATI)( GLuint buffer );
        void       (WINE_GLAPI *p_glUnmapTexture2DINTEL)( GLuint texture, GLint level );
        void       (WINE_GLAPI *p_glUpdateObjectBufferATI)( GLuint buffer, GLuint offset, GLsizei size, const void *pointer, GLenum preserve );
        void       (WINE_GLAPI *p_glUploadGpuMaskNVX)( GLbitfield mask );
        void       (WINE_GLAPI *p_glUseProgram)( GLuint program );
        void       (WINE_GLAPI *p_glUseProgramObjectARB)( GLhandleARB programObj );
        void       (WINE_GLAPI *p_glUseProgramStages)( GLuint pipeline, GLbitfield stages, GLuint program );
        void       (WINE_GLAPI *p_glUseShaderProgramEXT)( GLenum type, GLuint program );
        void       (WINE_GLAPI *p_glVDPAUFiniNV)(void);
        void       (WINE_GLAPI *p_glVDPAUGetSurfaceivNV)( GLvdpauSurfaceNV surface, GLenum pname, GLsizei count, GLsizei *length, GLint *values );
        void       (WINE_GLAPI *p_glVDPAUInitNV)( const void *vdpDevice, const void *getProcAddress );
        GLboolean  (WINE_GLAPI *p_glVDPAUIsSurfaceNV)( GLvdpauSurfaceNV surface );
        void       (WINE_GLAPI *p_glVDPAUMapSurfacesNV)( GLsizei numSurfaces, const GLvdpauSurfaceNV *surfaces );
        GLvdpauSurfaceNV (WINE_GLAPI *p_glVDPAURegisterOutputSurfaceNV)( const void *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames );
        GLvdpauSurfaceNV (WINE_GLAPI *p_glVDPAURegisterVideoSurfaceNV)( const void *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames );
        GLvdpauSurfaceNV (WINE_GLAPI *p_glVDPAURegisterVideoSurfaceWithPictureStructureNV)( const void *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames, GLboolean isFrameStructure );
        void       (WINE_GLAPI *p_glVDPAUSurfaceAccessNV)( GLvdpauSurfaceNV surface, GLenum access );
        void       (WINE_GLAPI *p_glVDPAUUnmapSurfacesNV)( GLsizei numSurface, const GLvdpauSurfaceNV *surfaces );
        void       (WINE_GLAPI *p_glVDPAUUnregisterSurfaceNV)( GLvdpauSurfaceNV surface );
        void       (WINE_GLAPI *p_glValidateProgram)( GLuint program );
        void       (WINE_GLAPI *p_glValidateProgramARB)( GLhandleARB programObj );
        void       (WINE_GLAPI *p_glValidateProgramPipeline)( GLuint pipeline );
        void       (WINE_GLAPI *p_glVariantArrayObjectATI)( GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset );
        void       (WINE_GLAPI *p_glVariantPointerEXT)( GLuint id, GLenum type, GLuint stride, const void *addr );
        void       (WINE_GLAPI *p_glVariantbvEXT)( GLuint id, const GLbyte *addr );
        void       (WINE_GLAPI *p_glVariantdvEXT)( GLuint id, const GLdouble *addr );
        void       (WINE_GLAPI *p_glVariantfvEXT)( GLuint id, const GLfloat *addr );
        void       (WINE_GLAPI *p_glVariantivEXT)( GLuint id, const GLint *addr );
        void       (WINE_GLAPI *p_glVariantsvEXT)( GLuint id, const GLshort *addr );
        void       (WINE_GLAPI *p_glVariantubvEXT)( GLuint id, const GLubyte *addr );
        void       (WINE_GLAPI *p_glVariantuivEXT)( GLuint id, const GLuint *addr );
        void       (WINE_GLAPI *p_glVariantusvEXT)( GLuint id, const GLushort *addr );
        void       (WINE_GLAPI *p_glVertex2bOES)( GLbyte x, GLbyte y );
        void       (WINE_GLAPI *p_glVertex2bvOES)( const GLbyte *coords );
        void       (WINE_GLAPI *p_glVertex2hNV)( GLhalfNV x, GLhalfNV y );
        void       (WINE_GLAPI *p_glVertex2hvNV)( const GLhalfNV *v );
        void       (WINE_GLAPI *p_glVertex2xOES)( GLfixed x );
        void       (WINE_GLAPI *p_glVertex2xvOES)( const GLfixed *coords );
        void       (WINE_GLAPI *p_glVertex3bOES)( GLbyte x, GLbyte y, GLbyte z );
        void       (WINE_GLAPI *p_glVertex3bvOES)( const GLbyte *coords );
        void       (WINE_GLAPI *p_glVertex3hNV)( GLhalfNV x, GLhalfNV y, GLhalfNV z );
        void       (WINE_GLAPI *p_glVertex3hvNV)( const GLhalfNV *v );
        void       (WINE_GLAPI *p_glVertex3xOES)( GLfixed x, GLfixed y );
        void       (WINE_GLAPI *p_glVertex3xvOES)( const GLfixed *coords );
        void       (WINE_GLAPI *p_glVertex4bOES)( GLbyte x, GLbyte y, GLbyte z, GLbyte w );
        void       (WINE_GLAPI *p_glVertex4bvOES)( const GLbyte *coords );
        void       (WINE_GLAPI *p_glVertex4hNV)( GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w );
        void       (WINE_GLAPI *p_glVertex4hvNV)( const GLhalfNV *v );
        void       (WINE_GLAPI *p_glVertex4xOES)( GLfixed x, GLfixed y, GLfixed z );
        void       (WINE_GLAPI *p_glVertex4xvOES)( const GLfixed *coords );
        void       (WINE_GLAPI *p_glVertexArrayAttribBinding)( GLuint vaobj, GLuint attribindex, GLuint bindingindex );
        void       (WINE_GLAPI *p_glVertexArrayAttribFormat)( GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset );
        void       (WINE_GLAPI *p_glVertexArrayAttribIFormat)( GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset );
        void       (WINE_GLAPI *p_glVertexArrayAttribLFormat)( GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset );
        void       (WINE_GLAPI *p_glVertexArrayBindVertexBufferEXT)( GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride );
        void       (WINE_GLAPI *p_glVertexArrayBindingDivisor)( GLuint vaobj, GLuint bindingindex, GLuint divisor );
        void       (WINE_GLAPI *p_glVertexArrayColorOffsetEXT)( GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset );
        void       (WINE_GLAPI *p_glVertexArrayEdgeFlagOffsetEXT)( GLuint vaobj, GLuint buffer, GLsizei stride, GLintptr offset );
        void       (WINE_GLAPI *p_glVertexArrayElementBuffer)( GLuint vaobj, GLuint buffer );
        void       (WINE_GLAPI *p_glVertexArrayFogCoordOffsetEXT)( GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset );
        void       (WINE_GLAPI *p_glVertexArrayIndexOffsetEXT)( GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset );
        void       (WINE_GLAPI *p_glVertexArrayMultiTexCoordOffsetEXT)( GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, GLintptr offset );
        void       (WINE_GLAPI *p_glVertexArrayNormalOffsetEXT)( GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset );
        void       (WINE_GLAPI *p_glVertexArrayParameteriAPPLE)( GLenum pname, GLint param );
        void       (WINE_GLAPI *p_glVertexArrayRangeAPPLE)( GLsizei length, void *pointer );
        void       (WINE_GLAPI *p_glVertexArrayRangeNV)( GLsizei length, const void *pointer );
        void       (WINE_GLAPI *p_glVertexArraySecondaryColorOffsetEXT)( GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset );
        void       (WINE_GLAPI *p_glVertexArrayTexCoordOffsetEXT)( GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset );
        void       (WINE_GLAPI *p_glVertexArrayVertexAttribBindingEXT)( GLuint vaobj, GLuint attribindex, GLuint bindingindex );
        void       (WINE_GLAPI *p_glVertexArrayVertexAttribDivisorEXT)( GLuint vaobj, GLuint index, GLuint divisor );
        void       (WINE_GLAPI *p_glVertexArrayVertexAttribFormatEXT)( GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset );
        void       (WINE_GLAPI *p_glVertexArrayVertexAttribIFormatEXT)( GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset );
        void       (WINE_GLAPI *p_glVertexArrayVertexAttribIOffsetEXT)( GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset );
        void       (WINE_GLAPI *p_glVertexArrayVertexAttribLFormatEXT)( GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset );
        void       (WINE_GLAPI *p_glVertexArrayVertexAttribLOffsetEXT)( GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset );
        void       (WINE_GLAPI *p_glVertexArrayVertexAttribOffsetEXT)( GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLintptr offset );
        void       (WINE_GLAPI *p_glVertexArrayVertexBindingDivisorEXT)( GLuint vaobj, GLuint bindingindex, GLuint divisor );
        void       (WINE_GLAPI *p_glVertexArrayVertexBuffer)( GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride );
        void       (WINE_GLAPI *p_glVertexArrayVertexBuffers)( GLuint vaobj, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides );
        void       (WINE_GLAPI *p_glVertexArrayVertexOffsetEXT)( GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset );
        void       (WINE_GLAPI *p_glVertexAttrib1d)( GLuint index, GLdouble x );
        void       (WINE_GLAPI *p_glVertexAttrib1dARB)( GLuint index, GLdouble x );
        void       (WINE_GLAPI *p_glVertexAttrib1dNV)( GLuint index, GLdouble x );
        void       (WINE_GLAPI *p_glVertexAttrib1dv)( GLuint index, const GLdouble *v );
        void       (WINE_GLAPI *p_glVertexAttrib1dvARB)( GLuint index, const GLdouble *v );
        void       (WINE_GLAPI *p_glVertexAttrib1dvNV)( GLuint index, const GLdouble *v );
        void       (WINE_GLAPI *p_glVertexAttrib1f)( GLuint index, GLfloat x );
        void       (WINE_GLAPI *p_glVertexAttrib1fARB)( GLuint index, GLfloat x );
        void       (WINE_GLAPI *p_glVertexAttrib1fNV)( GLuint index, GLfloat x );
        void       (WINE_GLAPI *p_glVertexAttrib1fv)( GLuint index, const GLfloat *v );
        void       (WINE_GLAPI *p_glVertexAttrib1fvARB)( GLuint index, const GLfloat *v );
        void       (WINE_GLAPI *p_glVertexAttrib1fvNV)( GLuint index, const GLfloat *v );
        void       (WINE_GLAPI *p_glVertexAttrib1hNV)( GLuint index, GLhalfNV x );
        void       (WINE_GLAPI *p_glVertexAttrib1hvNV)( GLuint index, const GLhalfNV *v );
        void       (WINE_GLAPI *p_glVertexAttrib1s)( GLuint index, GLshort x );
        void       (WINE_GLAPI *p_glVertexAttrib1sARB)( GLuint index, GLshort x );
        void       (WINE_GLAPI *p_glVertexAttrib1sNV)( GLuint index, GLshort x );
        void       (WINE_GLAPI *p_glVertexAttrib1sv)( GLuint index, const GLshort *v );
        void       (WINE_GLAPI *p_glVertexAttrib1svARB)( GLuint index, const GLshort *v );
        void       (WINE_GLAPI *p_glVertexAttrib1svNV)( GLuint index, const GLshort *v );
        void       (WINE_GLAPI *p_glVertexAttrib2d)( GLuint index, GLdouble x, GLdouble y );
        void       (WINE_GLAPI *p_glVertexAttrib2dARB)( GLuint index, GLdouble x, GLdouble y );
        void       (WINE_GLAPI *p_glVertexAttrib2dNV)( GLuint index, GLdouble x, GLdouble y );
        void       (WINE_GLAPI *p_glVertexAttrib2dv)( GLuint index, const GLdouble *v );
        void       (WINE_GLAPI *p_glVertexAttrib2dvARB)( GLuint index, const GLdouble *v );
        void       (WINE_GLAPI *p_glVertexAttrib2dvNV)( GLuint index, const GLdouble *v );
        void       (WINE_GLAPI *p_glVertexAttrib2f)( GLuint index, GLfloat x, GLfloat y );
        void       (WINE_GLAPI *p_glVertexAttrib2fARB)( GLuint index, GLfloat x, GLfloat y );
        void       (WINE_GLAPI *p_glVertexAttrib2fNV)( GLuint index, GLfloat x, GLfloat y );
        void       (WINE_GLAPI *p_glVertexAttrib2fv)( GLuint index, const GLfloat *v );
        void       (WINE_GLAPI *p_glVertexAttrib2fvARB)( GLuint index, const GLfloat *v );
        void       (WINE_GLAPI *p_glVertexAttrib2fvNV)( GLuint index, const GLfloat *v );
        void       (WINE_GLAPI *p_glVertexAttrib2hNV)( GLuint index, GLhalfNV x, GLhalfNV y );
        void       (WINE_GLAPI *p_glVertexAttrib2hvNV)( GLuint index, const GLhalfNV *v );
        void       (WINE_GLAPI *p_glVertexAttrib2s)( GLuint index, GLshort x, GLshort y );
        void       (WINE_GLAPI *p_glVertexAttrib2sARB)( GLuint index, GLshort x, GLshort y );
        void       (WINE_GLAPI *p_glVertexAttrib2sNV)( GLuint index, GLshort x, GLshort y );
        void       (WINE_GLAPI *p_glVertexAttrib2sv)( GLuint index, const GLshort *v );
        void       (WINE_GLAPI *p_glVertexAttrib2svARB)( GLuint index, const GLshort *v );
        void       (WINE_GLAPI *p_glVertexAttrib2svNV)( GLuint index, const GLshort *v );
        void       (WINE_GLAPI *p_glVertexAttrib3d)( GLuint index, GLdouble x, GLdouble y, GLdouble z );
        void       (WINE_GLAPI *p_glVertexAttrib3dARB)( GLuint index, GLdouble x, GLdouble y, GLdouble z );
        void       (WINE_GLAPI *p_glVertexAttrib3dNV)( GLuint index, GLdouble x, GLdouble y, GLdouble z );
        void       (WINE_GLAPI *p_glVertexAttrib3dv)( GLuint index, const GLdouble *v );
        void       (WINE_GLAPI *p_glVertexAttrib3dvARB)( GLuint index, const GLdouble *v );
        void       (WINE_GLAPI *p_glVertexAttrib3dvNV)( GLuint index, const GLdouble *v );
        void       (WINE_GLAPI *p_glVertexAttrib3f)( GLuint index, GLfloat x, GLfloat y, GLfloat z );
        void       (WINE_GLAPI *p_glVertexAttrib3fARB)( GLuint index, GLfloat x, GLfloat y, GLfloat z );
        void       (WINE_GLAPI *p_glVertexAttrib3fNV)( GLuint index, GLfloat x, GLfloat y, GLfloat z );
        void       (WINE_GLAPI *p_glVertexAttrib3fv)( GLuint index, const GLfloat *v );
        void       (WINE_GLAPI *p_glVertexAttrib3fvARB)( GLuint index, const GLfloat *v );
        void       (WINE_GLAPI *p_glVertexAttrib3fvNV)( GLuint index, const GLfloat *v );
        void       (WINE_GLAPI *p_glVertexAttrib3hNV)( GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z );
        void       (WINE_GLAPI *p_glVertexAttrib3hvNV)( GLuint index, const GLhalfNV *v );
        void       (WINE_GLAPI *p_glVertexAttrib3s)( GLuint index, GLshort x, GLshort y, GLshort z );
        void       (WINE_GLAPI *p_glVertexAttrib3sARB)( GLuint index, GLshort x, GLshort y, GLshort z );
        void       (WINE_GLAPI *p_glVertexAttrib3sNV)( GLuint index, GLshort x, GLshort y, GLshort z );
        void       (WINE_GLAPI *p_glVertexAttrib3sv)( GLuint index, const GLshort *v );
        void       (WINE_GLAPI *p_glVertexAttrib3svARB)( GLuint index, const GLshort *v );
        void       (WINE_GLAPI *p_glVertexAttrib3svNV)( GLuint index, const GLshort *v );
        void       (WINE_GLAPI *p_glVertexAttrib4Nbv)( GLuint index, const GLbyte *v );
        void       (WINE_GLAPI *p_glVertexAttrib4NbvARB)( GLuint index, const GLbyte *v );
        void       (WINE_GLAPI *p_glVertexAttrib4Niv)( GLuint index, const GLint *v );
        void       (WINE_GLAPI *p_glVertexAttrib4NivARB)( GLuint index, const GLint *v );
        void       (WINE_GLAPI *p_glVertexAttrib4Nsv)( GLuint index, const GLshort *v );
        void       (WINE_GLAPI *p_glVertexAttrib4NsvARB)( GLuint index, const GLshort *v );
        void       (WINE_GLAPI *p_glVertexAttrib4Nub)( GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w );
        void       (WINE_GLAPI *p_glVertexAttrib4NubARB)( GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w );
        void       (WINE_GLAPI *p_glVertexAttrib4Nubv)( GLuint index, const GLubyte *v );
        void       (WINE_GLAPI *p_glVertexAttrib4NubvARB)( GLuint index, const GLubyte *v );
        void       (WINE_GLAPI *p_glVertexAttrib4Nuiv)( GLuint index, const GLuint *v );
        void       (WINE_GLAPI *p_glVertexAttrib4NuivARB)( GLuint index, const GLuint *v );
        void       (WINE_GLAPI *p_glVertexAttrib4Nusv)( GLuint index, const GLushort *v );
        void       (WINE_GLAPI *p_glVertexAttrib4NusvARB)( GLuint index, const GLushort *v );
        void       (WINE_GLAPI *p_glVertexAttrib4bv)( GLuint index, const GLbyte *v );
        void       (WINE_GLAPI *p_glVertexAttrib4bvARB)( GLuint index, const GLbyte *v );
        void       (WINE_GLAPI *p_glVertexAttrib4d)( GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w );
        void       (WINE_GLAPI *p_glVertexAttrib4dARB)( GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w );
        void       (WINE_GLAPI *p_glVertexAttrib4dNV)( GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w );
        void       (WINE_GLAPI *p_glVertexAttrib4dv)( GLuint index, const GLdouble *v );
        void       (WINE_GLAPI *p_glVertexAttrib4dvARB)( GLuint index, const GLdouble *v );
        void       (WINE_GLAPI *p_glVertexAttrib4dvNV)( GLuint index, const GLdouble *v );
        void       (WINE_GLAPI *p_glVertexAttrib4f)( GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w );
        void       (WINE_GLAPI *p_glVertexAttrib4fARB)( GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w );
        void       (WINE_GLAPI *p_glVertexAttrib4fNV)( GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w );
        void       (WINE_GLAPI *p_glVertexAttrib4fv)( GLuint index, const GLfloat *v );
        void       (WINE_GLAPI *p_glVertexAttrib4fvARB)( GLuint index, const GLfloat *v );
        void       (WINE_GLAPI *p_glVertexAttrib4fvNV)( GLuint index, const GLfloat *v );
        void       (WINE_GLAPI *p_glVertexAttrib4hNV)( GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w );
        void       (WINE_GLAPI *p_glVertexAttrib4hvNV)( GLuint index, const GLhalfNV *v );
        void       (WINE_GLAPI *p_glVertexAttrib4iv)( GLuint index, const GLint *v );
        void       (WINE_GLAPI *p_glVertexAttrib4ivARB)( GLuint index, const GLint *v );
        void       (WINE_GLAPI *p_glVertexAttrib4s)( GLuint index, GLshort x, GLshort y, GLshort z, GLshort w );
        void       (WINE_GLAPI *p_glVertexAttrib4sARB)( GLuint index, GLshort x, GLshort y, GLshort z, GLshort w );
        void       (WINE_GLAPI *p_glVertexAttrib4sNV)( GLuint index, GLshort x, GLshort y, GLshort z, GLshort w );
        void       (WINE_GLAPI *p_glVertexAttrib4sv)( GLuint index, const GLshort *v );
        void       (WINE_GLAPI *p_glVertexAttrib4svARB)( GLuint index, const GLshort *v );
        void       (WINE_GLAPI *p_glVertexAttrib4svNV)( GLuint index, const GLshort *v );
        void       (WINE_GLAPI *p_glVertexAttrib4ubNV)( GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w );
        void       (WINE_GLAPI *p_glVertexAttrib4ubv)( GLuint index, const GLubyte *v );
        void       (WINE_GLAPI *p_glVertexAttrib4ubvARB)( GLuint index, const GLubyte *v );
        void       (WINE_GLAPI *p_glVertexAttrib4ubvNV)( GLuint index, const GLubyte *v );
        void       (WINE_GLAPI *p_glVertexAttrib4uiv)( GLuint index, const GLuint *v );
        void       (WINE_GLAPI *p_glVertexAttrib4uivARB)( GLuint index, const GLuint *v );
        void       (WINE_GLAPI *p_glVertexAttrib4usv)( GLuint index, const GLushort *v );
        void       (WINE_GLAPI *p_glVertexAttrib4usvARB)( GLuint index, const GLushort *v );
        void       (WINE_GLAPI *p_glVertexAttribArrayObjectATI)( GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset );
        void       (WINE_GLAPI *p_glVertexAttribBinding)( GLuint attribindex, GLuint bindingindex );
        void       (WINE_GLAPI *p_glVertexAttribDivisor)( GLuint index, GLuint divisor );
        void       (WINE_GLAPI *p_glVertexAttribDivisorARB)( GLuint index, GLuint divisor );
        void       (WINE_GLAPI *p_glVertexAttribFormat)( GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset );
        void       (WINE_GLAPI *p_glVertexAttribFormatNV)( GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride );
        void       (WINE_GLAPI *p_glVertexAttribI1i)( GLuint index, GLint x );
        void       (WINE_GLAPI *p_glVertexAttribI1iEXT)( GLuint index, GLint x );
        void       (WINE_GLAPI *p_glVertexAttribI1iv)( GLuint index, const GLint *v );
        void       (WINE_GLAPI *p_glVertexAttribI1ivEXT)( GLuint index, const GLint *v );
        void       (WINE_GLAPI *p_glVertexAttribI1ui)( GLuint index, GLuint x );
        void       (WINE_GLAPI *p_glVertexAttribI1uiEXT)( GLuint index, GLuint x );
        void       (WINE_GLAPI *p_glVertexAttribI1uiv)( GLuint index, const GLuint *v );
        void       (WINE_GLAPI *p_glVertexAttribI1uivEXT)( GLuint index, const GLuint *v );
        void       (WINE_GLAPI *p_glVertexAttribI2i)( GLuint index, GLint x, GLint y );
        void       (WINE_GLAPI *p_glVertexAttribI2iEXT)( GLuint index, GLint x, GLint y );
        void       (WINE_GLAPI *p_glVertexAttribI2iv)( GLuint index, const GLint *v );
        void       (WINE_GLAPI *p_glVertexAttribI2ivEXT)( GLuint index, const GLint *v );
        void       (WINE_GLAPI *p_glVertexAttribI2ui)( GLuint index, GLuint x, GLuint y );
        void       (WINE_GLAPI *p_glVertexAttribI2uiEXT)( GLuint index, GLuint x, GLuint y );
        void       (WINE_GLAPI *p_glVertexAttribI2uiv)( GLuint index, const GLuint *v );
        void       (WINE_GLAPI *p_glVertexAttribI2uivEXT)( GLuint index, const GLuint *v );
        void       (WINE_GLAPI *p_glVertexAttribI3i)( GLuint index, GLint x, GLint y, GLint z );
        void       (WINE_GLAPI *p_glVertexAttribI3iEXT)( GLuint index, GLint x, GLint y, GLint z );
        void       (WINE_GLAPI *p_glVertexAttribI3iv)( GLuint index, const GLint *v );
        void       (WINE_GLAPI *p_glVertexAttribI3ivEXT)( GLuint index, const GLint *v );
        void       (WINE_GLAPI *p_glVertexAttribI3ui)( GLuint index, GLuint x, GLuint y, GLuint z );
        void       (WINE_GLAPI *p_glVertexAttribI3uiEXT)( GLuint index, GLuint x, GLuint y, GLuint z );
        void       (WINE_GLAPI *p_glVertexAttribI3uiv)( GLuint index, const GLuint *v );
        void       (WINE_GLAPI *p_glVertexAttribI3uivEXT)( GLuint index, const GLuint *v );
        void       (WINE_GLAPI *p_glVertexAttribI4bv)( GLuint index, const GLbyte *v );
        void       (WINE_GLAPI *p_glVertexAttribI4bvEXT)( GLuint index, const GLbyte *v );
        void       (WINE_GLAPI *p_glVertexAttribI4i)( GLuint index, GLint x, GLint y, GLint z, GLint w );
        void       (WINE_GLAPI *p_glVertexAttribI4iEXT)( GLuint index, GLint x, GLint y, GLint z, GLint w );
        void       (WINE_GLAPI *p_glVertexAttribI4iv)( GLuint index, const GLint *v );
        void       (WINE_GLAPI *p_glVertexAttribI4ivEXT)( GLuint index, const GLint *v );
        void       (WINE_GLAPI *p_glVertexAttribI4sv)( GLuint index, const GLshort *v );
        void       (WINE_GLAPI *p_glVertexAttribI4svEXT)( GLuint index, const GLshort *v );
        void       (WINE_GLAPI *p_glVertexAttribI4ubv)( GLuint index, const GLubyte *v );
        void       (WINE_GLAPI *p_glVertexAttribI4ubvEXT)( GLuint index, const GLubyte *v );
        void       (WINE_GLAPI *p_glVertexAttribI4ui)( GLuint index, GLuint x, GLuint y, GLuint z, GLuint w );
        void       (WINE_GLAPI *p_glVertexAttribI4uiEXT)( GLuint index, GLuint x, GLuint y, GLuint z, GLuint w );
        void       (WINE_GLAPI *p_glVertexAttribI4uiv)( GLuint index, const GLuint *v );
        void       (WINE_GLAPI *p_glVertexAttribI4uivEXT)( GLuint index, const GLuint *v );
        void       (WINE_GLAPI *p_glVertexAttribI4usv)( GLuint index, const GLushort *v );
        void       (WINE_GLAPI *p_glVertexAttribI4usvEXT)( GLuint index, const GLushort *v );
        void       (WINE_GLAPI *p_glVertexAttribIFormat)( GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset );
        void       (WINE_GLAPI *p_glVertexAttribIFormatNV)( GLuint index, GLint size, GLenum type, GLsizei stride );
        void       (WINE_GLAPI *p_glVertexAttribIPointer)( GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer );
        void       (WINE_GLAPI *p_glVertexAttribIPointerEXT)( GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer );
        void       (WINE_GLAPI *p_glVertexAttribL1d)( GLuint index, GLdouble x );
        void       (WINE_GLAPI *p_glVertexAttribL1dEXT)( GLuint index, GLdouble x );
        void       (WINE_GLAPI *p_glVertexAttribL1dv)( GLuint index, const GLdouble *v );
        void       (WINE_GLAPI *p_glVertexAttribL1dvEXT)( GLuint index, const GLdouble *v );
        void       (WINE_GLAPI *p_glVertexAttribL1i64NV)( GLuint index, GLint64EXT x );
        void       (WINE_GLAPI *p_glVertexAttribL1i64vNV)( GLuint index, const GLint64EXT *v );
        void       (WINE_GLAPI *p_glVertexAttribL1ui64ARB)( GLuint index, GLuint64EXT x );
        void       (WINE_GLAPI *p_glVertexAttribL1ui64NV)( GLuint index, GLuint64EXT x );
        void       (WINE_GLAPI *p_glVertexAttribL1ui64vARB)( GLuint index, const GLuint64EXT *v );
        void       (WINE_GLAPI *p_glVertexAttribL1ui64vNV)( GLuint index, const GLuint64EXT *v );
        void       (WINE_GLAPI *p_glVertexAttribL2d)( GLuint index, GLdouble x, GLdouble y );
        void       (WINE_GLAPI *p_glVertexAttribL2dEXT)( GLuint index, GLdouble x, GLdouble y );
        void       (WINE_GLAPI *p_glVertexAttribL2dv)( GLuint index, const GLdouble *v );
        void       (WINE_GLAPI *p_glVertexAttribL2dvEXT)( GLuint index, const GLdouble *v );
        void       (WINE_GLAPI *p_glVertexAttribL2i64NV)( GLuint index, GLint64EXT x, GLint64EXT y );
        void       (WINE_GLAPI *p_glVertexAttribL2i64vNV)( GLuint index, const GLint64EXT *v );
        void       (WINE_GLAPI *p_glVertexAttribL2ui64NV)( GLuint index, GLuint64EXT x, GLuint64EXT y );
        void       (WINE_GLAPI *p_glVertexAttribL2ui64vNV)( GLuint index, const GLuint64EXT *v );
        void       (WINE_GLAPI *p_glVertexAttribL3d)( GLuint index, GLdouble x, GLdouble y, GLdouble z );
        void       (WINE_GLAPI *p_glVertexAttribL3dEXT)( GLuint index, GLdouble x, GLdouble y, GLdouble z );
        void       (WINE_GLAPI *p_glVertexAttribL3dv)( GLuint index, const GLdouble *v );
        void       (WINE_GLAPI *p_glVertexAttribL3dvEXT)( GLuint index, const GLdouble *v );
        void       (WINE_GLAPI *p_glVertexAttribL3i64NV)( GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z );
        void       (WINE_GLAPI *p_glVertexAttribL3i64vNV)( GLuint index, const GLint64EXT *v );
        void       (WINE_GLAPI *p_glVertexAttribL3ui64NV)( GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z );
        void       (WINE_GLAPI *p_glVertexAttribL3ui64vNV)( GLuint index, const GLuint64EXT *v );
        void       (WINE_GLAPI *p_glVertexAttribL4d)( GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w );
        void       (WINE_GLAPI *p_glVertexAttribL4dEXT)( GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w );
        void       (WINE_GLAPI *p_glVertexAttribL4dv)( GLuint index, const GLdouble *v );
        void       (WINE_GLAPI *p_glVertexAttribL4dvEXT)( GLuint index, const GLdouble *v );
        void       (WINE_GLAPI *p_glVertexAttribL4i64NV)( GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w );
        void       (WINE_GLAPI *p_glVertexAttribL4i64vNV)( GLuint index, const GLint64EXT *v );
        void       (WINE_GLAPI *p_glVertexAttribL4ui64NV)( GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w );
        void       (WINE_GLAPI *p_glVertexAttribL4ui64vNV)( GLuint index, const GLuint64EXT *v );
        void       (WINE_GLAPI *p_glVertexAttribLFormat)( GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset );
        void       (WINE_GLAPI *p_glVertexAttribLFormatNV)( GLuint index, GLint size, GLenum type, GLsizei stride );
        void       (WINE_GLAPI *p_glVertexAttribLPointer)( GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer );
        void       (WINE_GLAPI *p_glVertexAttribLPointerEXT)( GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer );
        void       (WINE_GLAPI *p_glVertexAttribP1ui)( GLuint index, GLenum type, GLboolean normalized, GLuint value );
        void       (WINE_GLAPI *p_glVertexAttribP1uiv)( GLuint index, GLenum type, GLboolean normalized, const GLuint *value );
        void       (WINE_GLAPI *p_glVertexAttribP2ui)( GLuint index, GLenum type, GLboolean normalized, GLuint value );
        void       (WINE_GLAPI *p_glVertexAttribP2uiv)( GLuint index, GLenum type, GLboolean normalized, const GLuint *value );
        void       (WINE_GLAPI *p_glVertexAttribP3ui)( GLuint index, GLenum type, GLboolean normalized, GLuint value );
        void       (WINE_GLAPI *p_glVertexAttribP3uiv)( GLuint index, GLenum type, GLboolean normalized, const GLuint *value );
        void       (WINE_GLAPI *p_glVertexAttribP4ui)( GLuint index, GLenum type, GLboolean normalized, GLuint value );
        void       (WINE_GLAPI *p_glVertexAttribP4uiv)( GLuint index, GLenum type, GLboolean normalized, const GLuint *value );
        void       (WINE_GLAPI *p_glVertexAttribParameteriAMD)( GLuint index, GLenum pname, GLint param );
        void       (WINE_GLAPI *p_glVertexAttribPointer)( GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer );
        void       (WINE_GLAPI *p_glVertexAttribPointerARB)( GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer );
        void       (WINE_GLAPI *p_glVertexAttribPointerNV)( GLuint index, GLint fsize, GLenum type, GLsizei stride, const void *pointer );
        void       (WINE_GLAPI *p_glVertexAttribs1dvNV)( GLuint index, GLsizei count, const GLdouble *v );
        void       (WINE_GLAPI *p_glVertexAttribs1fvNV)( GLuint index, GLsizei count, const GLfloat *v );
        void       (WINE_GLAPI *p_glVertexAttribs1hvNV)( GLuint index, GLsizei n, const GLhalfNV *v );
        void       (WINE_GLAPI *p_glVertexAttribs1svNV)( GLuint index, GLsizei count, const GLshort *v );
        void       (WINE_GLAPI *p_glVertexAttribs2dvNV)( GLuint index, GLsizei count, const GLdouble *v );
        void       (WINE_GLAPI *p_glVertexAttribs2fvNV)( GLuint index, GLsizei count, const GLfloat *v );
        void       (WINE_GLAPI *p_glVertexAttribs2hvNV)( GLuint index, GLsizei n, const GLhalfNV *v );
        void       (WINE_GLAPI *p_glVertexAttribs2svNV)( GLuint index, GLsizei count, const GLshort *v );
        void       (WINE_GLAPI *p_glVertexAttribs3dvNV)( GLuint index, GLsizei count, const GLdouble *v );
        void       (WINE_GLAPI *p_glVertexAttribs3fvNV)( GLuint index, GLsizei count, const GLfloat *v );
        void       (WINE_GLAPI *p_glVertexAttribs3hvNV)( GLuint index, GLsizei n, const GLhalfNV *v );
        void       (WINE_GLAPI *p_glVertexAttribs3svNV)( GLuint index, GLsizei count, const GLshort *v );
        void       (WINE_GLAPI *p_glVertexAttribs4dvNV)( GLuint index, GLsizei count, const GLdouble *v );
        void       (WINE_GLAPI *p_glVertexAttribs4fvNV)( GLuint index, GLsizei count, const GLfloat *v );
        void       (WINE_GLAPI *p_glVertexAttribs4hvNV)( GLuint index, GLsizei n, const GLhalfNV *v );
        void       (WINE_GLAPI *p_glVertexAttribs4svNV)( GLuint index, GLsizei count, const GLshort *v );
        void       (WINE_GLAPI *p_glVertexAttribs4ubvNV)( GLuint index, GLsizei count, const GLubyte *v );
        void       (WINE_GLAPI *p_glVertexBindingDivisor)( GLuint bindingindex, GLuint divisor );
        void       (WINE_GLAPI *p_glVertexBlendARB)( GLint count );
        void       (WINE_GLAPI *p_glVertexBlendEnvfATI)( GLenum pname, GLfloat param );
        void       (WINE_GLAPI *p_glVertexBlendEnviATI)( GLenum pname, GLint param );
        void       (WINE_GLAPI *p_glVertexFormatNV)( GLint size, GLenum type, GLsizei stride );
        void       (WINE_GLAPI *p_glVertexP2ui)( GLenum type, GLuint value );
        void       (WINE_GLAPI *p_glVertexP2uiv)( GLenum type, const GLuint *value );
        void       (WINE_GLAPI *p_glVertexP3ui)( GLenum type, GLuint value );
        void       (WINE_GLAPI *p_glVertexP3uiv)( GLenum type, const GLuint *value );
        void       (WINE_GLAPI *p_glVertexP4ui)( GLenum type, GLuint value );
        void       (WINE_GLAPI *p_glVertexP4uiv)( GLenum type, const GLuint *value );
        void       (WINE_GLAPI *p_glVertexPointerEXT)( GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer );
        void       (WINE_GLAPI *p_glVertexPointerListIBM)( GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride );
        void       (WINE_GLAPI *p_glVertexPointervINTEL)( GLint size, GLenum type, const void **pointer );
        void       (WINE_GLAPI *p_glVertexStream1dATI)( GLenum stream, GLdouble x );
        void       (WINE_GLAPI *p_glVertexStream1dvATI)( GLenum stream, const GLdouble *coords );
        void       (WINE_GLAPI *p_glVertexStream1fATI)( GLenum stream, GLfloat x );
        void       (WINE_GLAPI *p_glVertexStream1fvATI)( GLenum stream, const GLfloat *coords );
        void       (WINE_GLAPI *p_glVertexStream1iATI)( GLenum stream, GLint x );
        void       (WINE_GLAPI *p_glVertexStream1ivATI)( GLenum stream, const GLint *coords );
        void       (WINE_GLAPI *p_glVertexStream1sATI)( GLenum stream, GLshort x );
        void       (WINE_GLAPI *p_glVertexStream1svATI)( GLenum stream, const GLshort *coords );
        void       (WINE_GLAPI *p_glVertexStream2dATI)( GLenum stream, GLdouble x, GLdouble y );
        void       (WINE_GLAPI *p_glVertexStream2dvATI)( GLenum stream, const GLdouble *coords );
        void       (WINE_GLAPI *p_glVertexStream2fATI)( GLenum stream, GLfloat x, GLfloat y );
        void       (WINE_GLAPI *p_glVertexStream2fvATI)( GLenum stream, const GLfloat *coords );
        void       (WINE_GLAPI *p_glVertexStream2iATI)( GLenum stream, GLint x, GLint y );
        void       (WINE_GLAPI *p_glVertexStream2ivATI)( GLenum stream, const GLint *coords );
        void       (WINE_GLAPI *p_glVertexStream2sATI)( GLenum stream, GLshort x, GLshort y );
        void       (WINE_GLAPI *p_glVertexStream2svATI)( GLenum stream, const GLshort *coords );
        void       (WINE_GLAPI *p_glVertexStream3dATI)( GLenum stream, GLdouble x, GLdouble y, GLdouble z );
        void       (WINE_GLAPI *p_glVertexStream3dvATI)( GLenum stream, const GLdouble *coords );
        void       (WINE_GLAPI *p_glVertexStream3fATI)( GLenum stream, GLfloat x, GLfloat y, GLfloat z );
        void       (WINE_GLAPI *p_glVertexStream3fvATI)( GLenum stream, const GLfloat *coords );
        void       (WINE_GLAPI *p_glVertexStream3iATI)( GLenum stream, GLint x, GLint y, GLint z );
        void       (WINE_GLAPI *p_glVertexStream3ivATI)( GLenum stream, const GLint *coords );
        void       (WINE_GLAPI *p_glVertexStream3sATI)( GLenum stream, GLshort x, GLshort y, GLshort z );
        void       (WINE_GLAPI *p_glVertexStream3svATI)( GLenum stream, const GLshort *coords );
        void       (WINE_GLAPI *p_glVertexStream4dATI)( GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w );
        void       (WINE_GLAPI *p_glVertexStream4dvATI)( GLenum stream, const GLdouble *coords );
        void       (WINE_GLAPI *p_glVertexStream4fATI)( GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w );
        void       (WINE_GLAPI *p_glVertexStream4fvATI)( GLenum stream, const GLfloat *coords );
        void       (WINE_GLAPI *p_glVertexStream4iATI)( GLenum stream, GLint x, GLint y, GLint z, GLint w );
        void       (WINE_GLAPI *p_glVertexStream4ivATI)( GLenum stream, const GLint *coords );
        void       (WINE_GLAPI *p_glVertexStream4sATI)( GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w );
        void       (WINE_GLAPI *p_glVertexStream4svATI)( GLenum stream, const GLshort *coords );
        void       (WINE_GLAPI *p_glVertexWeightPointerEXT)( GLint size, GLenum type, GLsizei stride, const void *pointer );
        void       (WINE_GLAPI *p_glVertexWeightfEXT)( GLfloat weight );
        void       (WINE_GLAPI *p_glVertexWeightfvEXT)( const GLfloat *weight );
        void       (WINE_GLAPI *p_glVertexWeighthNV)( GLhalfNV weight );
        void       (WINE_GLAPI *p_glVertexWeighthvNV)( const GLhalfNV *weight );
        GLenum     (WINE_GLAPI *p_glVideoCaptureNV)( GLuint video_capture_slot, GLuint *sequence_num, GLuint64EXT *capture_time );
        void       (WINE_GLAPI *p_glVideoCaptureStreamParameterdvNV)( GLuint video_capture_slot, GLuint stream, GLenum pname, const GLdouble *params );
        void       (WINE_GLAPI *p_glVideoCaptureStreamParameterfvNV)( GLuint video_capture_slot, GLuint stream, GLenum pname, const GLfloat *params );
        void       (WINE_GLAPI *p_glVideoCaptureStreamParameterivNV)( GLuint video_capture_slot, GLuint stream, GLenum pname, const GLint *params );
        void       (WINE_GLAPI *p_glViewportArrayv)( GLuint first, GLsizei count, const GLfloat *v );
        void       (WINE_GLAPI *p_glViewportIndexedf)( GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h );
        void       (WINE_GLAPI *p_glViewportIndexedfv)( GLuint index, const GLfloat *v );
        void       (WINE_GLAPI *p_glViewportPositionWScaleNV)( GLuint index, GLfloat xcoeff, GLfloat ycoeff );
        void       (WINE_GLAPI *p_glViewportSwizzleNV)( GLuint index, GLenum swizzlex, GLenum swizzley, GLenum swizzlez, GLenum swizzlew );
        void       (WINE_GLAPI *p_glWaitSemaphoreEXT)( GLuint semaphore, GLuint numBufferBarriers, const GLuint *buffers, GLuint numTextureBarriers, const GLuint *textures, const GLenum *srcLayouts );
        void       (WINE_GLAPI *p_glWaitSemaphoreui64NVX)( GLuint waitGpu, GLsizei fenceObjectCount, const GLuint *semaphoreArray, const GLuint64 *fenceValueArray );
        void       (WINE_GLAPI *p_glWaitSync)( GLsync sync, GLbitfield flags, GLuint64 timeout );
        void       (WINE_GLAPI *p_glWaitVkSemaphoreNV)( GLuint64 vkSemaphore );
        void       (WINE_GLAPI *p_glWeightPathsNV)( GLuint resultPath, GLsizei numPaths, const GLuint *paths, const GLfloat *weights );
        void       (WINE_GLAPI *p_glWeightPointerARB)( GLint size, GLenum type, GLsizei stride, const void *pointer );
        void       (WINE_GLAPI *p_glWeightbvARB)( GLint size, const GLbyte *weights );
        void       (WINE_GLAPI *p_glWeightdvARB)( GLint size, const GLdouble *weights );
        void       (WINE_GLAPI *p_glWeightfvARB)( GLint size, const GLfloat *weights );
        void       (WINE_GLAPI *p_glWeightivARB)( GLint size, const GLint *weights );
        void       (WINE_GLAPI *p_glWeightsvARB)( GLint size, const GLshort *weights );
        void       (WINE_GLAPI *p_glWeightubvARB)( GLint size, const GLubyte *weights );
        void       (WINE_GLAPI *p_glWeightuivARB)( GLint size, const GLuint *weights );
        void       (WINE_GLAPI *p_glWeightusvARB)( GLint size, const GLushort *weights );
        void       (WINE_GLAPI *p_glWindowPos2d)( GLdouble x, GLdouble y );
        void       (WINE_GLAPI *p_glWindowPos2dARB)( GLdouble x, GLdouble y );
        void       (WINE_GLAPI *p_glWindowPos2dMESA)( GLdouble x, GLdouble y );
        void       (WINE_GLAPI *p_glWindowPos2dv)( const GLdouble *v );
        void       (WINE_GLAPI *p_glWindowPos2dvARB)( const GLdouble *v );
        void       (WINE_GLAPI *p_glWindowPos2dvMESA)( const GLdouble *v );
        void       (WINE_GLAPI *p_glWindowPos2f)( GLfloat x, GLfloat y );
        void       (WINE_GLAPI *p_glWindowPos2fARB)( GLfloat x, GLfloat y );
        void       (WINE_GLAPI *p_glWindowPos2fMESA)( GLfloat x, GLfloat y );
        void       (WINE_GLAPI *p_glWindowPos2fv)( const GLfloat *v );
        void       (WINE_GLAPI *p_glWindowPos2fvARB)( const GLfloat *v );
        void       (WINE_GLAPI *p_glWindowPos2fvMESA)( const GLfloat *v );
        void       (WINE_GLAPI *p_glWindowPos2i)( GLint x, GLint y );
        void       (WINE_GLAPI *p_glWindowPos2iARB)( GLint x, GLint y );
        void       (WINE_GLAPI *p_glWindowPos2iMESA)( GLint x, GLint y );
        void       (WINE_GLAPI *p_glWindowPos2iv)( const GLint *v );
        void       (WINE_GLAPI *p_glWindowPos2ivARB)( const GLint *v );
        void       (WINE_GLAPI *p_glWindowPos2ivMESA)( const GLint *v );
        void       (WINE_GLAPI *p_glWindowPos2s)( GLshort x, GLshort y );
        void       (WINE_GLAPI *p_glWindowPos2sARB)( GLshort x, GLshort y );
        void       (WINE_GLAPI *p_glWindowPos2sMESA)( GLshort x, GLshort y );
        void       (WINE_GLAPI *p_glWindowPos2sv)( const GLshort *v );
        void       (WINE_GLAPI *p_glWindowPos2svARB)( const GLshort *v );
        void       (WINE_GLAPI *p_glWindowPos2svMESA)( const GLshort *v );
        void       (WINE_GLAPI *p_glWindowPos3d)( GLdouble x, GLdouble y, GLdouble z );
        void       (WINE_GLAPI *p_glWindowPos3dARB)( GLdouble x, GLdouble y, GLdouble z );
        void       (WINE_GLAPI *p_glWindowPos3dMESA)( GLdouble x, GLdouble y, GLdouble z );
        void       (WINE_GLAPI *p_glWindowPos3dv)( const GLdouble *v );
        void       (WINE_GLAPI *p_glWindowPos3dvARB)( const GLdouble *v );
        void       (WINE_GLAPI *p_glWindowPos3dvMESA)( const GLdouble *v );
        void       (WINE_GLAPI *p_glWindowPos3f)( GLfloat x, GLfloat y, GLfloat z );
        void       (WINE_GLAPI *p_glWindowPos3fARB)( GLfloat x, GLfloat y, GLfloat z );
        void       (WINE_GLAPI *p_glWindowPos3fMESA)( GLfloat x, GLfloat y, GLfloat z );
        void       (WINE_GLAPI *p_glWindowPos3fv)( const GLfloat *v );
        void       (WINE_GLAPI *p_glWindowPos3fvARB)( const GLfloat *v );
        void       (WINE_GLAPI *p_glWindowPos3fvMESA)( const GLfloat *v );
        void       (WINE_GLAPI *p_glWindowPos3i)( GLint x, GLint y, GLint z );
        void       (WINE_GLAPI *p_glWindowPos3iARB)( GLint x, GLint y, GLint z );
        void       (WINE_GLAPI *p_glWindowPos3iMESA)( GLint x, GLint y, GLint z );
        void       (WINE_GLAPI *p_glWindowPos3iv)( const GLint *v );
        void       (WINE_GLAPI *p_glWindowPos3ivARB)( const GLint *v );
        void       (WINE_GLAPI *p_glWindowPos3ivMESA)( const GLint *v );
        void       (WINE_GLAPI *p_glWindowPos3s)( GLshort x, GLshort y, GLshort z );
        void       (WINE_GLAPI *p_glWindowPos3sARB)( GLshort x, GLshort y, GLshort z );
        void       (WINE_GLAPI *p_glWindowPos3sMESA)( GLshort x, GLshort y, GLshort z );
        void       (WINE_GLAPI *p_glWindowPos3sv)( const GLshort *v );
        void       (WINE_GLAPI *p_glWindowPos3svARB)( const GLshort *v );
        void       (WINE_GLAPI *p_glWindowPos3svMESA)( const GLshort *v );
        void       (WINE_GLAPI *p_glWindowPos4dMESA)( GLdouble x, GLdouble y, GLdouble z, GLdouble w );
        void       (WINE_GLAPI *p_glWindowPos4dvMESA)( const GLdouble *v );
        void       (WINE_GLAPI *p_glWindowPos4fMESA)( GLfloat x, GLfloat y, GLfloat z, GLfloat w );
        void       (WINE_GLAPI *p_glWindowPos4fvMESA)( const GLfloat *v );
        void       (WINE_GLAPI *p_glWindowPos4iMESA)( GLint x, GLint y, GLint z, GLint w );
        void       (WINE_GLAPI *p_glWindowPos4ivMESA)( const GLint *v );
        void       (WINE_GLAPI *p_glWindowPos4sMESA)( GLshort x, GLshort y, GLshort z, GLshort w );
        void       (WINE_GLAPI *p_glWindowPos4svMESA)( const GLshort *v );
        void       (WINE_GLAPI *p_glWindowRectanglesEXT)( GLenum mode, GLsizei count, const GLint *box );
        void       (WINE_GLAPI *p_glWriteMaskEXT)( GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW );
        void *     (WINE_GLAPI *p_wglAllocateMemoryNV)( GLsizei size, GLfloat readfreq, GLfloat writefreq, GLfloat priority );
        BOOL       (WINE_GLAPI *p_wglBindTexImageARB)( struct wgl_pbuffer * hPbuffer, int iBuffer );
        BOOL       (WINE_GLAPI *p_wglChoosePixelFormatARB)( HDC hdc, const int *piAttribIList, const FLOAT *pfAttribFList, UINT nMaxFormats, int *piFormats, UINT *nNumFormats );
        struct wgl_context * (WINE_GLAPI *p_wglCreateContextAttribsARB)( HDC hDC, struct wgl_context * hShareContext, const int *attribList );
        struct wgl_pbuffer * (WINE_GLAPI *p_wglCreatePbufferARB)( HDC hDC, int iPixelFormat, int iWidth, int iHeight, const int *piAttribList );
        BOOL       (WINE_GLAPI *p_wglDestroyPbufferARB)( struct wgl_pbuffer * hPbuffer );
        void       (WINE_GLAPI *p_wglFreeMemoryNV)( void *pointer );
        HDC        (WINE_GLAPI *p_wglGetCurrentReadDCARB)(void);
        const char * (WINE_GLAPI *p_wglGetExtensionsStringARB)( HDC hdc );
        const char * (WINE_GLAPI *p_wglGetExtensionsStringEXT)(void);
        HDC        (WINE_GLAPI *p_wglGetPbufferDCARB)( struct wgl_pbuffer * hPbuffer );
        BOOL       (WINE_GLAPI *p_wglGetPixelFormatAttribfvARB)( HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, const int *piAttributes, FLOAT *pfValues );
        BOOL       (WINE_GLAPI *p_wglGetPixelFormatAttribivARB)( HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, const int *piAttributes, int *piValues );
        int        (WINE_GLAPI *p_wglGetSwapIntervalEXT)(void);
        BOOL       (WINE_GLAPI *p_wglMakeContextCurrentARB)( HDC hDrawDC, HDC hReadDC, struct wgl_context * hglrc );
        BOOL       (WINE_GLAPI *p_wglQueryCurrentRendererIntegerWINE)( GLenum attribute, GLuint *value );
        const GLchar * (WINE_GLAPI *p_wglQueryCurrentRendererStringWINE)( GLenum attribute );
        BOOL       (WINE_GLAPI *p_wglQueryPbufferARB)( struct wgl_pbuffer * hPbuffer, int iAttribute, int *piValue );
        BOOL       (WINE_GLAPI *p_wglQueryRendererIntegerWINE)( HDC dc, GLint renderer, GLenum attribute, GLuint *value );
        const GLchar * (WINE_GLAPI *p_wglQueryRendererStringWINE)( HDC dc, GLint renderer, GLenum attribute );
        int        (WINE_GLAPI *p_wglReleasePbufferDCARB)( struct wgl_pbuffer * hPbuffer, HDC hDC );
        BOOL       (WINE_GLAPI *p_wglReleaseTexImageARB)( struct wgl_pbuffer * hPbuffer, int iBuffer );
        BOOL       (WINE_GLAPI *p_wglSetPbufferAttribARB)( struct wgl_pbuffer * hPbuffer, const int *piAttribList );
        BOOL       (WINE_GLAPI *p_wglSetPixelFormatWINE)( HDC hdc, int format );
        BOOL       (WINE_GLAPI *p_wglSwapIntervalEXT)( int interval );
    } ext;
};

#else /* WINE_GLAPI */

BOOL       (WINAPI *p_wglCopyContext)( struct wgl_context * hglrcSrc, struct wgl_context * hglrcDst, UINT mask );
void qemu_wglCopyContext(struct qemu_syscall *call);
struct wgl_context * (WINAPI *p_wglCreateContext)( HDC hDc );
void qemu_wglCreateContext(struct qemu_syscall *call);
BOOL       (WINAPI *p_wglDeleteContext)( struct wgl_context * oldContext );
void qemu_wglDeleteContext(struct qemu_syscall *call);
int        (WINAPI *p_wglDescribePixelFormat)( HDC hdc, int ipfd, UINT cjpfd, PIXELFORMATDESCRIPTOR *ppfd );
void qemu_wglDescribePixelFormat(struct qemu_syscall *call);
int        (WINAPI *p_wglGetPixelFormat)( HDC hdc );
void qemu_wglGetPixelFormat(struct qemu_syscall *call);
PROC       (WINAPI *p_wglGetProcAddress)( LPCSTR lpszProc );
void qemu_wglGetProcAddress(struct qemu_syscall *call);
BOOL       (WINAPI *p_wglMakeCurrent)( HDC hDc, struct wgl_context * newContext );
void qemu_wglMakeCurrent(struct qemu_syscall *call);
BOOL       (WINAPI *p_wglSetPixelFormat)( HDC hdc, int ipfd, const PIXELFORMATDESCRIPTOR *ppfd );
void qemu_wglSetPixelFormat(struct qemu_syscall *call);
BOOL       (WINAPI *p_wglShareLists)( struct wgl_context * hrcSrvShare, struct wgl_context * hrcSrvSource );
void qemu_wglShareLists(struct qemu_syscall *call);
BOOL       (WINAPI *p_wglSwapBuffers)( HDC hdc );
void qemu_wglSwapBuffers(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glAccum)( GLenum op, GLfloat value );
void qemu_glAccum(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glAlphaFunc)( GLenum func, GLfloat ref );
void qemu_glAlphaFunc(struct qemu_syscall *call);
GLboolean  (WINE_GLAPI *p_glAreTexturesResident)( GLsizei n, const GLuint *textures, GLboolean *residences );
void qemu_glAreTexturesResident(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glArrayElement)( GLint i );
void qemu_glArrayElement(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBegin)( GLenum mode );
void qemu_glBegin(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBindTexture)( GLenum target, GLuint texture );
void qemu_glBindTexture(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBitmap)( GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap );
void qemu_glBitmap(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBlendFunc)( GLenum sfactor, GLenum dfactor );
void qemu_glBlendFunc(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCallList)( GLuint list );
void qemu_glCallList(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCallLists)( GLsizei n, GLenum type, const void *lists );
void qemu_glCallLists(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glClear)( GLbitfield mask );
void qemu_glClear(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glClearAccum)( GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha );
void qemu_glClearAccum(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glClearColor)( GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha );
void qemu_glClearColor(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glClearDepth)( GLdouble depth );
void qemu_glClearDepth(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glClearIndex)( GLfloat c );
void qemu_glClearIndex(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glClearStencil)( GLint s );
void qemu_glClearStencil(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glClipPlane)( GLenum plane, const GLdouble *equation );
void qemu_glClipPlane(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glColor3b)( GLbyte red, GLbyte green, GLbyte blue );
void qemu_glColor3b(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glColor3bv)( const GLbyte *v );
void qemu_glColor3bv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glColor3d)( GLdouble red, GLdouble green, GLdouble blue );
void qemu_glColor3d(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glColor3dv)( const GLdouble *v );
void qemu_glColor3dv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glColor3f)( GLfloat red, GLfloat green, GLfloat blue );
void qemu_glColor3f(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glColor3fv)( const GLfloat *v );
void qemu_glColor3fv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glColor3i)( GLint red, GLint green, GLint blue );
void qemu_glColor3i(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glColor3iv)( const GLint *v );
void qemu_glColor3iv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glColor3s)( GLshort red, GLshort green, GLshort blue );
void qemu_glColor3s(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glColor3sv)( const GLshort *v );
void qemu_glColor3sv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glColor3ub)( GLubyte red, GLubyte green, GLubyte blue );
void qemu_glColor3ub(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glColor3ubv)( const GLubyte *v );
void qemu_glColor3ubv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glColor3ui)( GLuint red, GLuint green, GLuint blue );
void qemu_glColor3ui(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glColor3uiv)( const GLuint *v );
void qemu_glColor3uiv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glColor3us)( GLushort red, GLushort green, GLushort blue );
void qemu_glColor3us(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glColor3usv)( const GLushort *v );
void qemu_glColor3usv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glColor4b)( GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha );
void qemu_glColor4b(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glColor4bv)( const GLbyte *v );
void qemu_glColor4bv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glColor4d)( GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha );
void qemu_glColor4d(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glColor4dv)( const GLdouble *v );
void qemu_glColor4dv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glColor4f)( GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha );
void qemu_glColor4f(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glColor4fv)( const GLfloat *v );
void qemu_glColor4fv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glColor4i)( GLint red, GLint green, GLint blue, GLint alpha );
void qemu_glColor4i(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glColor4iv)( const GLint *v );
void qemu_glColor4iv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glColor4s)( GLshort red, GLshort green, GLshort blue, GLshort alpha );
void qemu_glColor4s(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glColor4sv)( const GLshort *v );
void qemu_glColor4sv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glColor4ub)( GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha );
void qemu_glColor4ub(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glColor4ubv)( const GLubyte *v );
void qemu_glColor4ubv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glColor4ui)( GLuint red, GLuint green, GLuint blue, GLuint alpha );
void qemu_glColor4ui(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glColor4uiv)( const GLuint *v );
void qemu_glColor4uiv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glColor4us)( GLushort red, GLushort green, GLushort blue, GLushort alpha );
void qemu_glColor4us(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glColor4usv)( const GLushort *v );
void qemu_glColor4usv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glColorMask)( GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha );
void qemu_glColorMask(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glColorMaterial)( GLenum face, GLenum mode );
void qemu_glColorMaterial(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glColorPointer)( GLint size, GLenum type, GLsizei stride, const void *pointer );
void qemu_glColorPointer(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCopyPixels)( GLint x, GLint y, GLsizei width, GLsizei height, GLenum type );
void qemu_glCopyPixels(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCopyTexImage1D)( GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border );
void qemu_glCopyTexImage1D(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCopyTexImage2D)( GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border );
void qemu_glCopyTexImage2D(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCopyTexSubImage1D)( GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width );
void qemu_glCopyTexSubImage1D(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCopyTexSubImage2D)( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height );
void qemu_glCopyTexSubImage2D(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCullFace)( GLenum mode );
void qemu_glCullFace(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDeleteLists)( GLuint list, GLsizei range );
void qemu_glDeleteLists(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDeleteTextures)( GLsizei n, const GLuint *textures );
void qemu_glDeleteTextures(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDepthFunc)( GLenum func );
void qemu_glDepthFunc(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDepthMask)( GLboolean flag );
void qemu_glDepthMask(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDepthRange)( GLdouble n, GLdouble f );
void qemu_glDepthRange(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDisable)( GLenum cap );
void qemu_glDisable(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDisableClientState)( GLenum array );
void qemu_glDisableClientState(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDrawArrays)( GLenum mode, GLint first, GLsizei count );
void qemu_glDrawArrays(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDrawBuffer)( GLenum buf );
void qemu_glDrawBuffer(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDrawElements)( GLenum mode, GLsizei count, GLenum type, const void *indices );
void qemu_glDrawElements(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDrawPixels)( GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels );
void qemu_glDrawPixels(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glEdgeFlag)( GLboolean flag );
void qemu_glEdgeFlag(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glEdgeFlagPointer)( GLsizei stride, const void *pointer );
void qemu_glEdgeFlagPointer(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glEdgeFlagv)( const GLboolean *flag );
void qemu_glEdgeFlagv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glEnable)( GLenum cap );
void qemu_glEnable(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glEnableClientState)( GLenum array );
void qemu_glEnableClientState(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glEnd)(void);
void qemu_glEnd(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glEndList)(void);
void qemu_glEndList(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glEvalCoord1d)( GLdouble u );
void qemu_glEvalCoord1d(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glEvalCoord1dv)( const GLdouble *u );
void qemu_glEvalCoord1dv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glEvalCoord1f)( GLfloat u );
void qemu_glEvalCoord1f(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glEvalCoord1fv)( const GLfloat *u );
void qemu_glEvalCoord1fv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glEvalCoord2d)( GLdouble u, GLdouble v );
void qemu_glEvalCoord2d(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glEvalCoord2dv)( const GLdouble *u );
void qemu_glEvalCoord2dv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glEvalCoord2f)( GLfloat u, GLfloat v );
void qemu_glEvalCoord2f(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glEvalCoord2fv)( const GLfloat *u );
void qemu_glEvalCoord2fv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glEvalMesh1)( GLenum mode, GLint i1, GLint i2 );
void qemu_glEvalMesh1(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glEvalMesh2)( GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2 );
void qemu_glEvalMesh2(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glEvalPoint1)( GLint i );
void qemu_glEvalPoint1(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glEvalPoint2)( GLint i, GLint j );
void qemu_glEvalPoint2(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glFeedbackBuffer)( GLsizei size, GLenum type, GLfloat *buffer );
void qemu_glFeedbackBuffer(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glFinish)(void);
void qemu_glFinish(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glFlush)(void);
void qemu_glFlush(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glFogf)( GLenum pname, GLfloat param );
void qemu_glFogf(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glFogfv)( GLenum pname, const GLfloat *params );
void qemu_glFogfv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glFogi)( GLenum pname, GLint param );
void qemu_glFogi(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glFogiv)( GLenum pname, const GLint *params );
void qemu_glFogiv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glFrontFace)( GLenum mode );
void qemu_glFrontFace(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glFrustum)( GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar );
void qemu_glFrustum(struct qemu_syscall *call);
GLuint     (WINE_GLAPI *p_glGenLists)( GLsizei range );
void qemu_glGenLists(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGenTextures)( GLsizei n, GLuint *textures );
void qemu_glGenTextures(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetBooleanv)( GLenum pname, GLboolean *data );
void qemu_glGetBooleanv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetClipPlane)( GLenum plane, GLdouble *equation );
void qemu_glGetClipPlane(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetDoublev)( GLenum pname, GLdouble *data );
void qemu_glGetDoublev(struct qemu_syscall *call);
GLenum     (WINE_GLAPI *p_glGetError)(void);
void qemu_glGetError(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetFloatv)( GLenum pname, GLfloat *data );
void qemu_glGetFloatv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetIntegerv)( GLenum pname, GLint *data );
void qemu_glGetIntegerv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetLightfv)( GLenum light, GLenum pname, GLfloat *params );
void qemu_glGetLightfv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetLightiv)( GLenum light, GLenum pname, GLint *params );
void qemu_glGetLightiv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetMapdv)( GLenum target, GLenum query, GLdouble *v );
void qemu_glGetMapdv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetMapfv)( GLenum target, GLenum query, GLfloat *v );
void qemu_glGetMapfv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetMapiv)( GLenum target, GLenum query, GLint *v );
void qemu_glGetMapiv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetMaterialfv)( GLenum face, GLenum pname, GLfloat *params );
void qemu_glGetMaterialfv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetMaterialiv)( GLenum face, GLenum pname, GLint *params );
void qemu_glGetMaterialiv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetPixelMapfv)( GLenum map, GLfloat *values );
void qemu_glGetPixelMapfv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetPixelMapuiv)( GLenum map, GLuint *values );
void qemu_glGetPixelMapuiv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetPixelMapusv)( GLenum map, GLushort *values );
void qemu_glGetPixelMapusv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetPointerv)( GLenum pname, void **params );
void qemu_glGetPointerv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetPolygonStipple)( GLubyte *mask );
void qemu_glGetPolygonStipple(struct qemu_syscall *call);
const GLubyte * (WINE_GLAPI *p_glGetString)( GLenum name );
void qemu_glGetString(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetTexEnvfv)( GLenum target, GLenum pname, GLfloat *params );
void qemu_glGetTexEnvfv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetTexEnviv)( GLenum target, GLenum pname, GLint *params );
void qemu_glGetTexEnviv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetTexGendv)( GLenum coord, GLenum pname, GLdouble *params );
void qemu_glGetTexGendv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetTexGenfv)( GLenum coord, GLenum pname, GLfloat *params );
void qemu_glGetTexGenfv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetTexGeniv)( GLenum coord, GLenum pname, GLint *params );
void qemu_glGetTexGeniv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetTexImage)( GLenum target, GLint level, GLenum format, GLenum type, void *pixels );
void qemu_glGetTexImage(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetTexLevelParameterfv)( GLenum target, GLint level, GLenum pname, GLfloat *params );
void qemu_glGetTexLevelParameterfv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetTexLevelParameteriv)( GLenum target, GLint level, GLenum pname, GLint *params );
void qemu_glGetTexLevelParameteriv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetTexParameterfv)( GLenum target, GLenum pname, GLfloat *params );
void qemu_glGetTexParameterfv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetTexParameteriv)( GLenum target, GLenum pname, GLint *params );
void qemu_glGetTexParameteriv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glHint)( GLenum target, GLenum mode );
void qemu_glHint(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glIndexMask)( GLuint mask );
void qemu_glIndexMask(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glIndexPointer)( GLenum type, GLsizei stride, const void *pointer );
void qemu_glIndexPointer(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glIndexd)( GLdouble c );
void qemu_glIndexd(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glIndexdv)( const GLdouble *c );
void qemu_glIndexdv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glIndexf)( GLfloat c );
void qemu_glIndexf(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glIndexfv)( const GLfloat *c );
void qemu_glIndexfv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glIndexi)( GLint c );
void qemu_glIndexi(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glIndexiv)( const GLint *c );
void qemu_glIndexiv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glIndexs)( GLshort c );
void qemu_glIndexs(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glIndexsv)( const GLshort *c );
void qemu_glIndexsv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glIndexub)( GLubyte c );
void qemu_glIndexub(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glIndexubv)( const GLubyte *c );
void qemu_glIndexubv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glInitNames)(void);
void qemu_glInitNames(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glInterleavedArrays)( GLenum format, GLsizei stride, const void *pointer );
void qemu_glInterleavedArrays(struct qemu_syscall *call);
GLboolean  (WINE_GLAPI *p_glIsEnabled)( GLenum cap );
void qemu_glIsEnabled(struct qemu_syscall *call);
GLboolean  (WINE_GLAPI *p_glIsList)( GLuint list );
void qemu_glIsList(struct qemu_syscall *call);
GLboolean  (WINE_GLAPI *p_glIsTexture)( GLuint texture );
void qemu_glIsTexture(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glLightModelf)( GLenum pname, GLfloat param );
void qemu_glLightModelf(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glLightModelfv)( GLenum pname, const GLfloat *params );
void qemu_glLightModelfv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glLightModeli)( GLenum pname, GLint param );
void qemu_glLightModeli(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glLightModeliv)( GLenum pname, const GLint *params );
void qemu_glLightModeliv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glLightf)( GLenum light, GLenum pname, GLfloat param );
void qemu_glLightf(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glLightfv)( GLenum light, GLenum pname, const GLfloat *params );
void qemu_glLightfv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glLighti)( GLenum light, GLenum pname, GLint param );
void qemu_glLighti(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glLightiv)( GLenum light, GLenum pname, const GLint *params );
void qemu_glLightiv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glLineStipple)( GLint factor, GLushort pattern );
void qemu_glLineStipple(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glLineWidth)( GLfloat width );
void qemu_glLineWidth(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glListBase)( GLuint base );
void qemu_glListBase(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glLoadIdentity)(void);
void qemu_glLoadIdentity(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glLoadMatrixd)( const GLdouble *m );
void qemu_glLoadMatrixd(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glLoadMatrixf)( const GLfloat *m );
void qemu_glLoadMatrixf(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glLoadName)( GLuint name );
void qemu_glLoadName(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glLogicOp)( GLenum opcode );
void qemu_glLogicOp(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMap1d)( GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points );
void qemu_glMap1d(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMap1f)( GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points );
void qemu_glMap1f(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMap2d)( GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points );
void qemu_glMap2d(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMap2f)( GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points );
void qemu_glMap2f(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMapGrid1d)( GLint un, GLdouble u1, GLdouble u2 );
void qemu_glMapGrid1d(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMapGrid1f)( GLint un, GLfloat u1, GLfloat u2 );
void qemu_glMapGrid1f(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMapGrid2d)( GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2 );
void qemu_glMapGrid2d(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMapGrid2f)( GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2 );
void qemu_glMapGrid2f(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMaterialf)( GLenum face, GLenum pname, GLfloat param );
void qemu_glMaterialf(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMaterialfv)( GLenum face, GLenum pname, const GLfloat *params );
void qemu_glMaterialfv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMateriali)( GLenum face, GLenum pname, GLint param );
void qemu_glMateriali(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMaterialiv)( GLenum face, GLenum pname, const GLint *params );
void qemu_glMaterialiv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMatrixMode)( GLenum mode );
void qemu_glMatrixMode(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultMatrixd)( const GLdouble *m );
void qemu_glMultMatrixd(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultMatrixf)( const GLfloat *m );
void qemu_glMultMatrixf(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glNewList)( GLuint list, GLenum mode );
void qemu_glNewList(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glNormal3b)( GLbyte nx, GLbyte ny, GLbyte nz );
void qemu_glNormal3b(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glNormal3bv)( const GLbyte *v );
void qemu_glNormal3bv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glNormal3d)( GLdouble nx, GLdouble ny, GLdouble nz );
void qemu_glNormal3d(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glNormal3dv)( const GLdouble *v );
void qemu_glNormal3dv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glNormal3f)( GLfloat nx, GLfloat ny, GLfloat nz );
void qemu_glNormal3f(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glNormal3fv)( const GLfloat *v );
void qemu_glNormal3fv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glNormal3i)( GLint nx, GLint ny, GLint nz );
void qemu_glNormal3i(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glNormal3iv)( const GLint *v );
void qemu_glNormal3iv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glNormal3s)( GLshort nx, GLshort ny, GLshort nz );
void qemu_glNormal3s(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glNormal3sv)( const GLshort *v );
void qemu_glNormal3sv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glNormalPointer)( GLenum type, GLsizei stride, const void *pointer );
void qemu_glNormalPointer(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glOrtho)( GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar );
void qemu_glOrtho(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPassThrough)( GLfloat token );
void qemu_glPassThrough(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPixelMapfv)( GLenum map, GLsizei mapsize, const GLfloat *values );
void qemu_glPixelMapfv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPixelMapuiv)( GLenum map, GLsizei mapsize, const GLuint *values );
void qemu_glPixelMapuiv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPixelMapusv)( GLenum map, GLsizei mapsize, const GLushort *values );
void qemu_glPixelMapusv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPixelStoref)( GLenum pname, GLfloat param );
void qemu_glPixelStoref(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPixelStorei)( GLenum pname, GLint param );
void qemu_glPixelStorei(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPixelTransferf)( GLenum pname, GLfloat param );
void qemu_glPixelTransferf(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPixelTransferi)( GLenum pname, GLint param );
void qemu_glPixelTransferi(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPixelZoom)( GLfloat xfactor, GLfloat yfactor );
void qemu_glPixelZoom(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPointSize)( GLfloat size );
void qemu_glPointSize(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPolygonMode)( GLenum face, GLenum mode );
void qemu_glPolygonMode(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPolygonOffset)( GLfloat factor, GLfloat units );
void qemu_glPolygonOffset(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPolygonStipple)( const GLubyte *mask );
void qemu_glPolygonStipple(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPopAttrib)(void);
void qemu_glPopAttrib(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPopClientAttrib)(void);
void qemu_glPopClientAttrib(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPopMatrix)(void);
void qemu_glPopMatrix(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPopName)(void);
void qemu_glPopName(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPrioritizeTextures)( GLsizei n, const GLuint *textures, const GLfloat *priorities );
void qemu_glPrioritizeTextures(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPushAttrib)( GLbitfield mask );
void qemu_glPushAttrib(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPushClientAttrib)( GLbitfield mask );
void qemu_glPushClientAttrib(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPushMatrix)(void);
void qemu_glPushMatrix(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPushName)( GLuint name );
void qemu_glPushName(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glRasterPos2d)( GLdouble x, GLdouble y );
void qemu_glRasterPos2d(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glRasterPos2dv)( const GLdouble *v );
void qemu_glRasterPos2dv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glRasterPos2f)( GLfloat x, GLfloat y );
void qemu_glRasterPos2f(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glRasterPos2fv)( const GLfloat *v );
void qemu_glRasterPos2fv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glRasterPos2i)( GLint x, GLint y );
void qemu_glRasterPos2i(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glRasterPos2iv)( const GLint *v );
void qemu_glRasterPos2iv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glRasterPos2s)( GLshort x, GLshort y );
void qemu_glRasterPos2s(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glRasterPos2sv)( const GLshort *v );
void qemu_glRasterPos2sv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glRasterPos3d)( GLdouble x, GLdouble y, GLdouble z );
void qemu_glRasterPos3d(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glRasterPos3dv)( const GLdouble *v );
void qemu_glRasterPos3dv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glRasterPos3f)( GLfloat x, GLfloat y, GLfloat z );
void qemu_glRasterPos3f(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glRasterPos3fv)( const GLfloat *v );
void qemu_glRasterPos3fv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glRasterPos3i)( GLint x, GLint y, GLint z );
void qemu_glRasterPos3i(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glRasterPos3iv)( const GLint *v );
void qemu_glRasterPos3iv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glRasterPos3s)( GLshort x, GLshort y, GLshort z );
void qemu_glRasterPos3s(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glRasterPos3sv)( const GLshort *v );
void qemu_glRasterPos3sv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glRasterPos4d)( GLdouble x, GLdouble y, GLdouble z, GLdouble w );
void qemu_glRasterPos4d(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glRasterPos4dv)( const GLdouble *v );
void qemu_glRasterPos4dv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glRasterPos4f)( GLfloat x, GLfloat y, GLfloat z, GLfloat w );
void qemu_glRasterPos4f(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glRasterPos4fv)( const GLfloat *v );
void qemu_glRasterPos4fv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glRasterPos4i)( GLint x, GLint y, GLint z, GLint w );
void qemu_glRasterPos4i(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glRasterPos4iv)( const GLint *v );
void qemu_glRasterPos4iv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glRasterPos4s)( GLshort x, GLshort y, GLshort z, GLshort w );
void qemu_glRasterPos4s(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glRasterPos4sv)( const GLshort *v );
void qemu_glRasterPos4sv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glReadBuffer)( GLenum src );
void qemu_glReadBuffer(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glReadPixels)( GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels );
void qemu_glReadPixels(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glRectd)( GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2 );
void qemu_glRectd(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glRectdv)( const GLdouble *v1, const GLdouble *v2 );
void qemu_glRectdv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glRectf)( GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2 );
void qemu_glRectf(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glRectfv)( const GLfloat *v1, const GLfloat *v2 );
void qemu_glRectfv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glRecti)( GLint x1, GLint y1, GLint x2, GLint y2 );
void qemu_glRecti(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glRectiv)( const GLint *v1, const GLint *v2 );
void qemu_glRectiv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glRects)( GLshort x1, GLshort y1, GLshort x2, GLshort y2 );
void qemu_glRects(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glRectsv)( const GLshort *v1, const GLshort *v2 );
void qemu_glRectsv(struct qemu_syscall *call);
GLint      (WINE_GLAPI *p_glRenderMode)( GLenum mode );
void qemu_glRenderMode(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glRotated)( GLdouble angle, GLdouble x, GLdouble y, GLdouble z );
void qemu_glRotated(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glRotatef)( GLfloat angle, GLfloat x, GLfloat y, GLfloat z );
void qemu_glRotatef(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glScaled)( GLdouble x, GLdouble y, GLdouble z );
void qemu_glScaled(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glScalef)( GLfloat x, GLfloat y, GLfloat z );
void qemu_glScalef(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glScissor)( GLint x, GLint y, GLsizei width, GLsizei height );
void qemu_glScissor(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glSelectBuffer)( GLsizei size, GLuint *buffer );
void qemu_glSelectBuffer(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glShadeModel)( GLenum mode );
void qemu_glShadeModel(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glStencilFunc)( GLenum func, GLint ref, GLuint mask );
void qemu_glStencilFunc(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glStencilMask)( GLuint mask );
void qemu_glStencilMask(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glStencilOp)( GLenum fail, GLenum zfail, GLenum zpass );
void qemu_glStencilOp(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexCoord1d)( GLdouble s );
void qemu_glTexCoord1d(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexCoord1dv)( const GLdouble *v );
void qemu_glTexCoord1dv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexCoord1f)( GLfloat s );
void qemu_glTexCoord1f(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexCoord1fv)( const GLfloat *v );
void qemu_glTexCoord1fv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexCoord1i)( GLint s );
void qemu_glTexCoord1i(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexCoord1iv)( const GLint *v );
void qemu_glTexCoord1iv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexCoord1s)( GLshort s );
void qemu_glTexCoord1s(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexCoord1sv)( const GLshort *v );
void qemu_glTexCoord1sv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexCoord2d)( GLdouble s, GLdouble t );
void qemu_glTexCoord2d(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexCoord2dv)( const GLdouble *v );
void qemu_glTexCoord2dv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexCoord2f)( GLfloat s, GLfloat t );
void qemu_glTexCoord2f(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexCoord2fv)( const GLfloat *v );
void qemu_glTexCoord2fv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexCoord2i)( GLint s, GLint t );
void qemu_glTexCoord2i(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexCoord2iv)( const GLint *v );
void qemu_glTexCoord2iv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexCoord2s)( GLshort s, GLshort t );
void qemu_glTexCoord2s(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexCoord2sv)( const GLshort *v );
void qemu_glTexCoord2sv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexCoord3d)( GLdouble s, GLdouble t, GLdouble r );
void qemu_glTexCoord3d(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexCoord3dv)( const GLdouble *v );
void qemu_glTexCoord3dv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexCoord3f)( GLfloat s, GLfloat t, GLfloat r );
void qemu_glTexCoord3f(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexCoord3fv)( const GLfloat *v );
void qemu_glTexCoord3fv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexCoord3i)( GLint s, GLint t, GLint r );
void qemu_glTexCoord3i(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexCoord3iv)( const GLint *v );
void qemu_glTexCoord3iv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexCoord3s)( GLshort s, GLshort t, GLshort r );
void qemu_glTexCoord3s(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexCoord3sv)( const GLshort *v );
void qemu_glTexCoord3sv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexCoord4d)( GLdouble s, GLdouble t, GLdouble r, GLdouble q );
void qemu_glTexCoord4d(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexCoord4dv)( const GLdouble *v );
void qemu_glTexCoord4dv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexCoord4f)( GLfloat s, GLfloat t, GLfloat r, GLfloat q );
void qemu_glTexCoord4f(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexCoord4fv)( const GLfloat *v );
void qemu_glTexCoord4fv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexCoord4i)( GLint s, GLint t, GLint r, GLint q );
void qemu_glTexCoord4i(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexCoord4iv)( const GLint *v );
void qemu_glTexCoord4iv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexCoord4s)( GLshort s, GLshort t, GLshort r, GLshort q );
void qemu_glTexCoord4s(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexCoord4sv)( const GLshort *v );
void qemu_glTexCoord4sv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexCoordPointer)( GLint size, GLenum type, GLsizei stride, const void *pointer );
void qemu_glTexCoordPointer(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexEnvf)( GLenum target, GLenum pname, GLfloat param );
void qemu_glTexEnvf(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexEnvfv)( GLenum target, GLenum pname, const GLfloat *params );
void qemu_glTexEnvfv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexEnvi)( GLenum target, GLenum pname, GLint param );
void qemu_glTexEnvi(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexEnviv)( GLenum target, GLenum pname, const GLint *params );
void qemu_glTexEnviv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexGend)( GLenum coord, GLenum pname, GLdouble param );
void qemu_glTexGend(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexGendv)( GLenum coord, GLenum pname, const GLdouble *params );
void qemu_glTexGendv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexGenf)( GLenum coord, GLenum pname, GLfloat param );
void qemu_glTexGenf(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexGenfv)( GLenum coord, GLenum pname, const GLfloat *params );
void qemu_glTexGenfv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexGeni)( GLenum coord, GLenum pname, GLint param );
void qemu_glTexGeni(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexGeniv)( GLenum coord, GLenum pname, const GLint *params );
void qemu_glTexGeniv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexImage1D)( GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels );
void qemu_glTexImage1D(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexImage2D)( GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels );
void qemu_glTexImage2D(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexParameterf)( GLenum target, GLenum pname, GLfloat param );
void qemu_glTexParameterf(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexParameterfv)( GLenum target, GLenum pname, const GLfloat *params );
void qemu_glTexParameterfv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexParameteri)( GLenum target, GLenum pname, GLint param );
void qemu_glTexParameteri(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexParameteriv)( GLenum target, GLenum pname, const GLint *params );
void qemu_glTexParameteriv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexSubImage1D)( GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels );
void qemu_glTexSubImage1D(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexSubImage2D)( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels );
void qemu_glTexSubImage2D(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTranslated)( GLdouble x, GLdouble y, GLdouble z );
void qemu_glTranslated(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTranslatef)( GLfloat x, GLfloat y, GLfloat z );
void qemu_glTranslatef(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertex2d)( GLdouble x, GLdouble y );
void qemu_glVertex2d(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertex2dv)( const GLdouble *v );
void qemu_glVertex2dv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertex2f)( GLfloat x, GLfloat y );
void qemu_glVertex2f(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertex2fv)( const GLfloat *v );
void qemu_glVertex2fv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertex2i)( GLint x, GLint y );
void qemu_glVertex2i(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertex2iv)( const GLint *v );
void qemu_glVertex2iv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertex2s)( GLshort x, GLshort y );
void qemu_glVertex2s(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertex2sv)( const GLshort *v );
void qemu_glVertex2sv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertex3d)( GLdouble x, GLdouble y, GLdouble z );
void qemu_glVertex3d(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertex3dv)( const GLdouble *v );
void qemu_glVertex3dv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertex3f)( GLfloat x, GLfloat y, GLfloat z );
void qemu_glVertex3f(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertex3fv)( const GLfloat *v );
void qemu_glVertex3fv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertex3i)( GLint x, GLint y, GLint z );
void qemu_glVertex3i(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertex3iv)( const GLint *v );
void qemu_glVertex3iv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertex3s)( GLshort x, GLshort y, GLshort z );
void qemu_glVertex3s(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertex3sv)( const GLshort *v );
void qemu_glVertex3sv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertex4d)( GLdouble x, GLdouble y, GLdouble z, GLdouble w );
void qemu_glVertex4d(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertex4dv)( const GLdouble *v );
void qemu_glVertex4dv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertex4f)( GLfloat x, GLfloat y, GLfloat z, GLfloat w );
void qemu_glVertex4f(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertex4fv)( const GLfloat *v );
void qemu_glVertex4fv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertex4i)( GLint x, GLint y, GLint z, GLint w );
void qemu_glVertex4i(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertex4iv)( const GLint *v );
void qemu_glVertex4iv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertex4s)( GLshort x, GLshort y, GLshort z, GLshort w );
void qemu_glVertex4s(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertex4sv)( const GLshort *v );
void qemu_glVertex4sv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexPointer)( GLint size, GLenum type, GLsizei stride, const void *pointer );
void qemu_glVertexPointer(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glViewport)( GLint x, GLint y, GLsizei width, GLsizei height );
void qemu_glViewport(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glAccumxOES)( GLenum op, GLfixed value );
void qemu_glAccumxOES(struct qemu_syscall *call);
GLboolean  (WINE_GLAPI *p_glAcquireKeyedMutexWin32EXT)( GLuint memory, GLuint64 key, GLuint timeout );
void qemu_glAcquireKeyedMutexWin32EXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glActiveProgramEXT)( GLuint program );
void qemu_glActiveProgramEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glActiveShaderProgram)( GLuint pipeline, GLuint program );
void qemu_glActiveShaderProgram(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glActiveStencilFaceEXT)( GLenum face );
void qemu_glActiveStencilFaceEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glActiveTexture)( GLenum texture );
void qemu_glActiveTexture(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glActiveTextureARB)( GLenum texture );
void qemu_glActiveTextureARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glActiveVaryingNV)( GLuint program, const GLchar *name );
void qemu_glActiveVaryingNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glAlphaFragmentOp1ATI)( GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod );
void qemu_glAlphaFragmentOp1ATI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glAlphaFragmentOp2ATI)( GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod );
void qemu_glAlphaFragmentOp2ATI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glAlphaFragmentOp3ATI)( GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod );
void qemu_glAlphaFragmentOp3ATI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glAlphaFuncxOES)( GLenum func, GLfixed ref );
void qemu_glAlphaFuncxOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glAlphaToCoverageDitherControlNV)( GLenum mode );
void qemu_glAlphaToCoverageDitherControlNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glApplyFramebufferAttachmentCMAAINTEL)(void);
void qemu_glApplyFramebufferAttachmentCMAAINTEL(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glApplyTextureEXT)( GLenum mode );
void qemu_glApplyTextureEXT(struct qemu_syscall *call);
GLboolean  (WINE_GLAPI *p_glAreProgramsResidentNV)( GLsizei n, const GLuint *programs, GLboolean *residences );
void qemu_glAreProgramsResidentNV(struct qemu_syscall *call);
GLboolean  (WINE_GLAPI *p_glAreTexturesResidentEXT)( GLsizei n, const GLuint *textures, GLboolean *residences );
void qemu_glAreTexturesResidentEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glArrayElementEXT)( GLint i );
void qemu_glArrayElementEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glArrayObjectATI)( GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset );
void qemu_glArrayObjectATI(struct qemu_syscall *call);
GLuint     (WINE_GLAPI *p_glAsyncCopyBufferSubDataNVX)( GLsizei waitSemaphoreCount, const GLuint *waitSemaphoreArray, const GLuint64 *fenceValueArray, GLuint readGpu, GLbitfield writeGpuMask, GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size, GLsizei signalSemaphoreCount, const GLuint *signalSemaphoreArray, const GLuint64 *signalValueArray );
void qemu_glAsyncCopyBufferSubDataNVX(struct qemu_syscall *call);
GLuint     (WINE_GLAPI *p_glAsyncCopyImageSubDataNVX)( GLsizei waitSemaphoreCount, const GLuint *waitSemaphoreArray, const GLuint64 *waitValueArray, GLuint srcGpu, GLbitfield dstGpuMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth, GLsizei signalSemaphoreCount, const GLuint *signalSemaphoreArray, const GLuint64 *signalValueArray );
void qemu_glAsyncCopyImageSubDataNVX(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glAsyncMarkerSGIX)( GLuint marker );
void qemu_glAsyncMarkerSGIX(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glAttachObjectARB)( GLhandleARB containerObj, GLhandleARB obj );
void qemu_glAttachObjectARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glAttachShader)( GLuint program, GLuint shader );
void qemu_glAttachShader(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBeginConditionalRender)( GLuint id, GLenum mode );
void qemu_glBeginConditionalRender(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBeginConditionalRenderNV)( GLuint id, GLenum mode );
void qemu_glBeginConditionalRenderNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBeginConditionalRenderNVX)( GLuint id );
void qemu_glBeginConditionalRenderNVX(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBeginFragmentShaderATI)(void);
void qemu_glBeginFragmentShaderATI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBeginOcclusionQueryNV)( GLuint id );
void qemu_glBeginOcclusionQueryNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBeginPerfMonitorAMD)( GLuint monitor );
void qemu_glBeginPerfMonitorAMD(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBeginPerfQueryINTEL)( GLuint queryHandle );
void qemu_glBeginPerfQueryINTEL(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBeginQuery)( GLenum target, GLuint id );
void qemu_glBeginQuery(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBeginQueryARB)( GLenum target, GLuint id );
void qemu_glBeginQueryARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBeginQueryIndexed)( GLenum target, GLuint index, GLuint id );
void qemu_glBeginQueryIndexed(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBeginTransformFeedback)( GLenum primitiveMode );
void qemu_glBeginTransformFeedback(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBeginTransformFeedbackEXT)( GLenum primitiveMode );
void qemu_glBeginTransformFeedbackEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBeginTransformFeedbackNV)( GLenum primitiveMode );
void qemu_glBeginTransformFeedbackNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBeginVertexShaderEXT)(void);
void qemu_glBeginVertexShaderEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBeginVideoCaptureNV)( GLuint video_capture_slot );
void qemu_glBeginVideoCaptureNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBindAttribLocation)( GLuint program, GLuint index, const GLchar *name );
void qemu_glBindAttribLocation(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBindAttribLocationARB)( GLhandleARB programObj, GLuint index, const GLcharARB *name );
void qemu_glBindAttribLocationARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBindBuffer)( GLenum target, GLuint buffer );
void qemu_glBindBuffer(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBindBufferARB)( GLenum target, GLuint buffer );
void qemu_glBindBufferARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBindBufferBase)( GLenum target, GLuint index, GLuint buffer );
void qemu_glBindBufferBase(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBindBufferBaseEXT)( GLenum target, GLuint index, GLuint buffer );
void qemu_glBindBufferBaseEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBindBufferBaseNV)( GLenum target, GLuint index, GLuint buffer );
void qemu_glBindBufferBaseNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBindBufferOffsetEXT)( GLenum target, GLuint index, GLuint buffer, GLintptr offset );
void qemu_glBindBufferOffsetEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBindBufferOffsetNV)( GLenum target, GLuint index, GLuint buffer, GLintptr offset );
void qemu_glBindBufferOffsetNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBindBufferRange)( GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size );
void qemu_glBindBufferRange(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBindBufferRangeEXT)( GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size );
void qemu_glBindBufferRangeEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBindBufferRangeNV)( GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size );
void qemu_glBindBufferRangeNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBindBuffersBase)( GLenum target, GLuint first, GLsizei count, const GLuint *buffers );
void qemu_glBindBuffersBase(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBindBuffersRange)( GLenum target, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizeiptr *sizes );
void qemu_glBindBuffersRange(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBindFragDataLocation)( GLuint program, GLuint color, const GLchar *name );
void qemu_glBindFragDataLocation(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBindFragDataLocationEXT)( GLuint program, GLuint color, const GLchar *name );
void qemu_glBindFragDataLocationEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBindFragDataLocationIndexed)( GLuint program, GLuint colorNumber, GLuint index, const GLchar *name );
void qemu_glBindFragDataLocationIndexed(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBindFragmentShaderATI)( GLuint id );
void qemu_glBindFragmentShaderATI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBindFramebuffer)( GLenum target, GLuint framebuffer );
void qemu_glBindFramebuffer(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBindFramebufferEXT)( GLenum target, GLuint framebuffer );
void qemu_glBindFramebufferEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBindImageTexture)( GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format );
void qemu_glBindImageTexture(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBindImageTextureEXT)( GLuint index, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLint format );
void qemu_glBindImageTextureEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBindImageTextures)( GLuint first, GLsizei count, const GLuint *textures );
void qemu_glBindImageTextures(struct qemu_syscall *call);
GLuint     (WINE_GLAPI *p_glBindLightParameterEXT)( GLenum light, GLenum value );
void qemu_glBindLightParameterEXT(struct qemu_syscall *call);
GLuint     (WINE_GLAPI *p_glBindMaterialParameterEXT)( GLenum face, GLenum value );
void qemu_glBindMaterialParameterEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBindMultiTextureEXT)( GLenum texunit, GLenum target, GLuint texture );
void qemu_glBindMultiTextureEXT(struct qemu_syscall *call);
GLuint     (WINE_GLAPI *p_glBindParameterEXT)( GLenum value );
void qemu_glBindParameterEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBindProgramARB)( GLenum target, GLuint program );
void qemu_glBindProgramARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBindProgramNV)( GLenum target, GLuint id );
void qemu_glBindProgramNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBindProgramPipeline)( GLuint pipeline );
void qemu_glBindProgramPipeline(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBindRenderbuffer)( GLenum target, GLuint renderbuffer );
void qemu_glBindRenderbuffer(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBindRenderbufferEXT)( GLenum target, GLuint renderbuffer );
void qemu_glBindRenderbufferEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBindSampler)( GLuint unit, GLuint sampler );
void qemu_glBindSampler(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBindSamplers)( GLuint first, GLsizei count, const GLuint *samplers );
void qemu_glBindSamplers(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBindShadingRateImageNV)( GLuint texture );
void qemu_glBindShadingRateImageNV(struct qemu_syscall *call);
GLuint     (WINE_GLAPI *p_glBindTexGenParameterEXT)( GLenum unit, GLenum coord, GLenum value );
void qemu_glBindTexGenParameterEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBindTextureEXT)( GLenum target, GLuint texture );
void qemu_glBindTextureEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBindTextureUnit)( GLuint unit, GLuint texture );
void qemu_glBindTextureUnit(struct qemu_syscall *call);
GLuint     (WINE_GLAPI *p_glBindTextureUnitParameterEXT)( GLenum unit, GLenum value );
void qemu_glBindTextureUnitParameterEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBindTextures)( GLuint first, GLsizei count, const GLuint *textures );
void qemu_glBindTextures(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBindTransformFeedback)( GLenum target, GLuint id );
void qemu_glBindTransformFeedback(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBindTransformFeedbackNV)( GLenum target, GLuint id );
void qemu_glBindTransformFeedbackNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBindVertexArray)( GLuint array );
void qemu_glBindVertexArray(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBindVertexArrayAPPLE)( GLuint array );
void qemu_glBindVertexArrayAPPLE(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBindVertexBuffer)( GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride );
void qemu_glBindVertexBuffer(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBindVertexBuffers)( GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides );
void qemu_glBindVertexBuffers(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBindVertexShaderEXT)( GLuint id );
void qemu_glBindVertexShaderEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBindVideoCaptureStreamBufferNV)( GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLintptrARB offset );
void qemu_glBindVideoCaptureStreamBufferNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBindVideoCaptureStreamTextureNV)( GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLenum target, GLuint texture );
void qemu_glBindVideoCaptureStreamTextureNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBinormal3bEXT)( GLbyte bx, GLbyte by, GLbyte bz );
void qemu_glBinormal3bEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBinormal3bvEXT)( const GLbyte *v );
void qemu_glBinormal3bvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBinormal3dEXT)( GLdouble bx, GLdouble by, GLdouble bz );
void qemu_glBinormal3dEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBinormal3dvEXT)( const GLdouble *v );
void qemu_glBinormal3dvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBinormal3fEXT)( GLfloat bx, GLfloat by, GLfloat bz );
void qemu_glBinormal3fEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBinormal3fvEXT)( const GLfloat *v );
void qemu_glBinormal3fvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBinormal3iEXT)( GLint bx, GLint by, GLint bz );
void qemu_glBinormal3iEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBinormal3ivEXT)( const GLint *v );
void qemu_glBinormal3ivEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBinormal3sEXT)( GLshort bx, GLshort by, GLshort bz );
void qemu_glBinormal3sEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBinormal3svEXT)( const GLshort *v );
void qemu_glBinormal3svEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBinormalPointerEXT)( GLenum type, GLsizei stride, const void *pointer );
void qemu_glBinormalPointerEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBitmapxOES)( GLsizei width, GLsizei height, GLfixed xorig, GLfixed yorig, GLfixed xmove, GLfixed ymove, const GLubyte *bitmap );
void qemu_glBitmapxOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBlendBarrierKHR)(void);
void qemu_glBlendBarrierKHR(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBlendBarrierNV)(void);
void qemu_glBlendBarrierNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBlendColor)( GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha );
void qemu_glBlendColor(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBlendColorEXT)( GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha );
void qemu_glBlendColorEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBlendColorxOES)( GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha );
void qemu_glBlendColorxOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBlendEquation)( GLenum mode );
void qemu_glBlendEquation(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBlendEquationEXT)( GLenum mode );
void qemu_glBlendEquationEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBlendEquationIndexedAMD)( GLuint buf, GLenum mode );
void qemu_glBlendEquationIndexedAMD(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBlendEquationSeparate)( GLenum modeRGB, GLenum modeAlpha );
void qemu_glBlendEquationSeparate(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBlendEquationSeparateEXT)( GLenum modeRGB, GLenum modeAlpha );
void qemu_glBlendEquationSeparateEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBlendEquationSeparateIndexedAMD)( GLuint buf, GLenum modeRGB, GLenum modeAlpha );
void qemu_glBlendEquationSeparateIndexedAMD(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBlendEquationSeparatei)( GLuint buf, GLenum modeRGB, GLenum modeAlpha );
void qemu_glBlendEquationSeparatei(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBlendEquationSeparateiARB)( GLuint buf, GLenum modeRGB, GLenum modeAlpha );
void qemu_glBlendEquationSeparateiARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBlendEquationi)( GLuint buf, GLenum mode );
void qemu_glBlendEquationi(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBlendEquationiARB)( GLuint buf, GLenum mode );
void qemu_glBlendEquationiARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBlendFuncIndexedAMD)( GLuint buf, GLenum src, GLenum dst );
void qemu_glBlendFuncIndexedAMD(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBlendFuncSeparate)( GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha );
void qemu_glBlendFuncSeparate(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBlendFuncSeparateEXT)( GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha );
void qemu_glBlendFuncSeparateEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBlendFuncSeparateINGR)( GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha );
void qemu_glBlendFuncSeparateINGR(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBlendFuncSeparateIndexedAMD)( GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha );
void qemu_glBlendFuncSeparateIndexedAMD(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBlendFuncSeparatei)( GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha );
void qemu_glBlendFuncSeparatei(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBlendFuncSeparateiARB)( GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha );
void qemu_glBlendFuncSeparateiARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBlendFunci)( GLuint buf, GLenum src, GLenum dst );
void qemu_glBlendFunci(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBlendFunciARB)( GLuint buf, GLenum src, GLenum dst );
void qemu_glBlendFunciARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBlendParameteriNV)( GLenum pname, GLint value );
void qemu_glBlendParameteriNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBlitFramebuffer)( GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter );
void qemu_glBlitFramebuffer(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBlitFramebufferEXT)( GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter );
void qemu_glBlitFramebufferEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBlitNamedFramebuffer)( GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter );
void qemu_glBlitNamedFramebuffer(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBufferAddressRangeNV)( GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length );
void qemu_glBufferAddressRangeNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBufferAttachMemoryNV)( GLenum target, GLuint memory, GLuint64 offset );
void qemu_glBufferAttachMemoryNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBufferData)( GLenum target, GLsizeiptr size, const void *data, GLenum usage );
void qemu_glBufferData(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBufferDataARB)( GLenum target, GLsizeiptrARB size, const void *data, GLenum usage );
void qemu_glBufferDataARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBufferPageCommitmentARB)( GLenum target, GLintptr offset, GLsizeiptr size, GLboolean commit );
void qemu_glBufferPageCommitmentARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBufferParameteriAPPLE)( GLenum target, GLenum pname, GLint param );
void qemu_glBufferParameteriAPPLE(struct qemu_syscall *call);
GLuint     (WINE_GLAPI *p_glBufferRegionEnabled)(void);
void qemu_glBufferRegionEnabled(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBufferStorage)( GLenum target, GLsizeiptr size, const void *data, GLbitfield flags );
void qemu_glBufferStorage(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBufferStorageExternalEXT)( GLenum target, GLintptr offset, GLsizeiptr size, GLeglClientBufferEXT clientBuffer, GLbitfield flags );
void qemu_glBufferStorageExternalEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBufferStorageMemEXT)( GLenum target, GLsizeiptr size, GLuint memory, GLuint64 offset );
void qemu_glBufferStorageMemEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBufferSubData)( GLenum target, GLintptr offset, GLsizeiptr size, const void *data );
void qemu_glBufferSubData(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glBufferSubDataARB)( GLenum target, GLintptrARB offset, GLsizeiptrARB size, const void *data );
void qemu_glBufferSubDataARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCallCommandListNV)( GLuint list );
void qemu_glCallCommandListNV(struct qemu_syscall *call);
GLenum     (WINE_GLAPI *p_glCheckFramebufferStatus)( GLenum target );
void qemu_glCheckFramebufferStatus(struct qemu_syscall *call);
GLenum     (WINE_GLAPI *p_glCheckFramebufferStatusEXT)( GLenum target );
void qemu_glCheckFramebufferStatusEXT(struct qemu_syscall *call);
GLenum     (WINE_GLAPI *p_glCheckNamedFramebufferStatus)( GLuint framebuffer, GLenum target );
void qemu_glCheckNamedFramebufferStatus(struct qemu_syscall *call);
GLenum     (WINE_GLAPI *p_glCheckNamedFramebufferStatusEXT)( GLuint framebuffer, GLenum target );
void qemu_glCheckNamedFramebufferStatusEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glClampColor)( GLenum target, GLenum clamp );
void qemu_glClampColor(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glClampColorARB)( GLenum target, GLenum clamp );
void qemu_glClampColorARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glClearAccumxOES)( GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha );
void qemu_glClearAccumxOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glClearBufferData)( GLenum target, GLenum internalformat, GLenum format, GLenum type, const void *data );
void qemu_glClearBufferData(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glClearBufferSubData)( GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data );
void qemu_glClearBufferSubData(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glClearBufferfi)( GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil );
void qemu_glClearBufferfi(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glClearBufferfv)( GLenum buffer, GLint drawbuffer, const GLfloat *value );
void qemu_glClearBufferfv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glClearBufferiv)( GLenum buffer, GLint drawbuffer, const GLint *value );
void qemu_glClearBufferiv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glClearBufferuiv)( GLenum buffer, GLint drawbuffer, const GLuint *value );
void qemu_glClearBufferuiv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glClearColorIiEXT)( GLint red, GLint green, GLint blue, GLint alpha );
void qemu_glClearColorIiEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glClearColorIuiEXT)( GLuint red, GLuint green, GLuint blue, GLuint alpha );
void qemu_glClearColorIuiEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glClearColorxOES)( GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha );
void qemu_glClearColorxOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glClearDepthdNV)( GLdouble depth );
void qemu_glClearDepthdNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glClearDepthf)( GLfloat d );
void qemu_glClearDepthf(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glClearDepthfOES)( GLclampf depth );
void qemu_glClearDepthfOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glClearDepthxOES)( GLfixed depth );
void qemu_glClearDepthxOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glClearNamedBufferData)( GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data );
void qemu_glClearNamedBufferData(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glClearNamedBufferDataEXT)( GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data );
void qemu_glClearNamedBufferDataEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glClearNamedBufferSubData)( GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data );
void qemu_glClearNamedBufferSubData(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glClearNamedBufferSubDataEXT)( GLuint buffer, GLenum internalformat, GLsizeiptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data );
void qemu_glClearNamedBufferSubDataEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glClearNamedFramebufferfi)( GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil );
void qemu_glClearNamedFramebufferfi(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glClearNamedFramebufferfv)( GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat *value );
void qemu_glClearNamedFramebufferfv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glClearNamedFramebufferiv)( GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint *value );
void qemu_glClearNamedFramebufferiv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glClearNamedFramebufferuiv)( GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint *value );
void qemu_glClearNamedFramebufferuiv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glClearTexImage)( GLuint texture, GLint level, GLenum format, GLenum type, const void *data );
void qemu_glClearTexImage(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glClearTexSubImage)( GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *data );
void qemu_glClearTexSubImage(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glClientActiveTexture)( GLenum texture );
void qemu_glClientActiveTexture(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glClientActiveTextureARB)( GLenum texture );
void qemu_glClientActiveTextureARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glClientActiveVertexStreamATI)( GLenum stream );
void qemu_glClientActiveVertexStreamATI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glClientAttribDefaultEXT)( GLbitfield mask );
void qemu_glClientAttribDefaultEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glClientWaitSemaphoreui64NVX)( GLsizei fenceObjectCount, const GLuint *semaphoreArray, const GLuint64 *fenceValueArray );
void qemu_glClientWaitSemaphoreui64NVX(struct qemu_syscall *call);
GLenum     (WINE_GLAPI *p_glClientWaitSync)( GLsync sync, GLbitfield flags, GLuint64 timeout );
void qemu_glClientWaitSync(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glClipControl)( GLenum origin, GLenum depth );
void qemu_glClipControl(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glClipPlanefOES)( GLenum plane, const GLfloat *equation );
void qemu_glClipPlanefOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glClipPlanexOES)( GLenum plane, const GLfixed *equation );
void qemu_glClipPlanexOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glColor3fVertex3fSUN)( GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z );
void qemu_glColor3fVertex3fSUN(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glColor3fVertex3fvSUN)( const GLfloat *c, const GLfloat *v );
void qemu_glColor3fVertex3fvSUN(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glColor3hNV)( GLhalfNV red, GLhalfNV green, GLhalfNV blue );
void qemu_glColor3hNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glColor3hvNV)( const GLhalfNV *v );
void qemu_glColor3hvNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glColor3xOES)( GLfixed red, GLfixed green, GLfixed blue );
void qemu_glColor3xOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glColor3xvOES)( const GLfixed *components );
void qemu_glColor3xvOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glColor4fNormal3fVertex3fSUN)( GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z );
void qemu_glColor4fNormal3fVertex3fSUN(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glColor4fNormal3fVertex3fvSUN)( const GLfloat *c, const GLfloat *n, const GLfloat *v );
void qemu_glColor4fNormal3fVertex3fvSUN(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glColor4hNV)( GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha );
void qemu_glColor4hNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glColor4hvNV)( const GLhalfNV *v );
void qemu_glColor4hvNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glColor4ubVertex2fSUN)( GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y );
void qemu_glColor4ubVertex2fSUN(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glColor4ubVertex2fvSUN)( const GLubyte *c, const GLfloat *v );
void qemu_glColor4ubVertex2fvSUN(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glColor4ubVertex3fSUN)( GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z );
void qemu_glColor4ubVertex3fSUN(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glColor4ubVertex3fvSUN)( const GLubyte *c, const GLfloat *v );
void qemu_glColor4ubVertex3fvSUN(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glColor4xOES)( GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha );
void qemu_glColor4xOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glColor4xvOES)( const GLfixed *components );
void qemu_glColor4xvOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glColorFormatNV)( GLint size, GLenum type, GLsizei stride );
void qemu_glColorFormatNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glColorFragmentOp1ATI)( GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod );
void qemu_glColorFragmentOp1ATI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glColorFragmentOp2ATI)( GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod );
void qemu_glColorFragmentOp2ATI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glColorFragmentOp3ATI)( GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod );
void qemu_glColorFragmentOp3ATI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glColorMaskIndexedEXT)( GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a );
void qemu_glColorMaskIndexedEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glColorMaski)( GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a );
void qemu_glColorMaski(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glColorP3ui)( GLenum type, GLuint color );
void qemu_glColorP3ui(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glColorP3uiv)( GLenum type, const GLuint *color );
void qemu_glColorP3uiv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glColorP4ui)( GLenum type, GLuint color );
void qemu_glColorP4ui(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glColorP4uiv)( GLenum type, const GLuint *color );
void qemu_glColorP4uiv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glColorPointerEXT)( GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer );
void qemu_glColorPointerEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glColorPointerListIBM)( GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride );
void qemu_glColorPointerListIBM(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glColorPointervINTEL)( GLint size, GLenum type, const void **pointer );
void qemu_glColorPointervINTEL(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glColorSubTable)( GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void *data );
void qemu_glColorSubTable(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glColorSubTableEXT)( GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void *data );
void qemu_glColorSubTableEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glColorTable)( GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *table );
void qemu_glColorTable(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glColorTableEXT)( GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const void *table );
void qemu_glColorTableEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glColorTableParameterfv)( GLenum target, GLenum pname, const GLfloat *params );
void qemu_glColorTableParameterfv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glColorTableParameterfvSGI)( GLenum target, GLenum pname, const GLfloat *params );
void qemu_glColorTableParameterfvSGI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glColorTableParameteriv)( GLenum target, GLenum pname, const GLint *params );
void qemu_glColorTableParameteriv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glColorTableParameterivSGI)( GLenum target, GLenum pname, const GLint *params );
void qemu_glColorTableParameterivSGI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glColorTableSGI)( GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *table );
void qemu_glColorTableSGI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCombinerInputNV)( GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage );
void qemu_glCombinerInputNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCombinerOutputNV)( GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum );
void qemu_glCombinerOutputNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCombinerParameterfNV)( GLenum pname, GLfloat param );
void qemu_glCombinerParameterfNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCombinerParameterfvNV)( GLenum pname, const GLfloat *params );
void qemu_glCombinerParameterfvNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCombinerParameteriNV)( GLenum pname, GLint param );
void qemu_glCombinerParameteriNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCombinerParameterivNV)( GLenum pname, const GLint *params );
void qemu_glCombinerParameterivNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCombinerStageParameterfvNV)( GLenum stage, GLenum pname, const GLfloat *params );
void qemu_glCombinerStageParameterfvNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCommandListSegmentsNV)( GLuint list, GLuint segments );
void qemu_glCommandListSegmentsNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCompileCommandListNV)( GLuint list );
void qemu_glCompileCommandListNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCompileShader)( GLuint shader );
void qemu_glCompileShader(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCompileShaderARB)( GLhandleARB shaderObj );
void qemu_glCompileShaderARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCompileShaderIncludeARB)( GLuint shader, GLsizei count, const GLchar *const*path, const GLint *length );
void qemu_glCompileShaderIncludeARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCompressedMultiTexImage1DEXT)( GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *bits );
void qemu_glCompressedMultiTexImage1DEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCompressedMultiTexImage2DEXT)( GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *bits );
void qemu_glCompressedMultiTexImage2DEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCompressedMultiTexImage3DEXT)( GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *bits );
void qemu_glCompressedMultiTexImage3DEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCompressedMultiTexSubImage1DEXT)( GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *bits );
void qemu_glCompressedMultiTexSubImage1DEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCompressedMultiTexSubImage2DEXT)( GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *bits );
void qemu_glCompressedMultiTexSubImage2DEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCompressedMultiTexSubImage3DEXT)( GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *bits );
void qemu_glCompressedMultiTexSubImage3DEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCompressedTexImage1D)( GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data );
void qemu_glCompressedTexImage1D(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCompressedTexImage1DARB)( GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data );
void qemu_glCompressedTexImage1DARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCompressedTexImage2D)( GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data );
void qemu_glCompressedTexImage2D(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCompressedTexImage2DARB)( GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data );
void qemu_glCompressedTexImage2DARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCompressedTexImage3D)( GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data );
void qemu_glCompressedTexImage3D(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCompressedTexImage3DARB)( GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data );
void qemu_glCompressedTexImage3DARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCompressedTexSubImage1D)( GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data );
void qemu_glCompressedTexSubImage1D(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCompressedTexSubImage1DARB)( GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data );
void qemu_glCompressedTexSubImage1DARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCompressedTexSubImage2D)( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data );
void qemu_glCompressedTexSubImage2D(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCompressedTexSubImage2DARB)( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data );
void qemu_glCompressedTexSubImage2DARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCompressedTexSubImage3D)( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data );
void qemu_glCompressedTexSubImage3D(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCompressedTexSubImage3DARB)( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data );
void qemu_glCompressedTexSubImage3DARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCompressedTextureImage1DEXT)( GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *bits );
void qemu_glCompressedTextureImage1DEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCompressedTextureImage2DEXT)( GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *bits );
void qemu_glCompressedTextureImage2DEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCompressedTextureImage3DEXT)( GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *bits );
void qemu_glCompressedTextureImage3DEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCompressedTextureSubImage1D)( GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data );
void qemu_glCompressedTextureSubImage1D(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCompressedTextureSubImage1DEXT)( GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *bits );
void qemu_glCompressedTextureSubImage1DEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCompressedTextureSubImage2D)( GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data );
void qemu_glCompressedTextureSubImage2D(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCompressedTextureSubImage2DEXT)( GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *bits );
void qemu_glCompressedTextureSubImage2DEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCompressedTextureSubImage3D)( GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data );
void qemu_glCompressedTextureSubImage3D(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCompressedTextureSubImage3DEXT)( GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *bits );
void qemu_glCompressedTextureSubImage3DEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glConservativeRasterParameterfNV)( GLenum pname, GLfloat value );
void qemu_glConservativeRasterParameterfNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glConservativeRasterParameteriNV)( GLenum pname, GLint param );
void qemu_glConservativeRasterParameteriNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glConvolutionFilter1D)( GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *image );
void qemu_glConvolutionFilter1D(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glConvolutionFilter1DEXT)( GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *image );
void qemu_glConvolutionFilter1DEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glConvolutionFilter2D)( GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *image );
void qemu_glConvolutionFilter2D(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glConvolutionFilter2DEXT)( GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *image );
void qemu_glConvolutionFilter2DEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glConvolutionParameterf)( GLenum target, GLenum pname, GLfloat params );
void qemu_glConvolutionParameterf(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glConvolutionParameterfEXT)( GLenum target, GLenum pname, GLfloat params );
void qemu_glConvolutionParameterfEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glConvolutionParameterfv)( GLenum target, GLenum pname, const GLfloat *params );
void qemu_glConvolutionParameterfv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glConvolutionParameterfvEXT)( GLenum target, GLenum pname, const GLfloat *params );
void qemu_glConvolutionParameterfvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glConvolutionParameteri)( GLenum target, GLenum pname, GLint params );
void qemu_glConvolutionParameteri(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glConvolutionParameteriEXT)( GLenum target, GLenum pname, GLint params );
void qemu_glConvolutionParameteriEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glConvolutionParameteriv)( GLenum target, GLenum pname, const GLint *params );
void qemu_glConvolutionParameteriv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glConvolutionParameterivEXT)( GLenum target, GLenum pname, const GLint *params );
void qemu_glConvolutionParameterivEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glConvolutionParameterxOES)( GLenum target, GLenum pname, GLfixed param );
void qemu_glConvolutionParameterxOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glConvolutionParameterxvOES)( GLenum target, GLenum pname, const GLfixed *params );
void qemu_glConvolutionParameterxvOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCopyBufferSubData)( GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size );
void qemu_glCopyBufferSubData(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCopyColorSubTable)( GLenum target, GLsizei start, GLint x, GLint y, GLsizei width );
void qemu_glCopyColorSubTable(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCopyColorSubTableEXT)( GLenum target, GLsizei start, GLint x, GLint y, GLsizei width );
void qemu_glCopyColorSubTableEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCopyColorTable)( GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width );
void qemu_glCopyColorTable(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCopyColorTableSGI)( GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width );
void qemu_glCopyColorTableSGI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCopyConvolutionFilter1D)( GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width );
void qemu_glCopyConvolutionFilter1D(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCopyConvolutionFilter1DEXT)( GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width );
void qemu_glCopyConvolutionFilter1DEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCopyConvolutionFilter2D)( GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height );
void qemu_glCopyConvolutionFilter2D(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCopyConvolutionFilter2DEXT)( GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height );
void qemu_glCopyConvolutionFilter2DEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCopyImageSubData)( GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth );
void qemu_glCopyImageSubData(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCopyImageSubDataNV)( GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth );
void qemu_glCopyImageSubDataNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCopyMultiTexImage1DEXT)( GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border );
void qemu_glCopyMultiTexImage1DEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCopyMultiTexImage2DEXT)( GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border );
void qemu_glCopyMultiTexImage2DEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCopyMultiTexSubImage1DEXT)( GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width );
void qemu_glCopyMultiTexSubImage1DEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCopyMultiTexSubImage2DEXT)( GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height );
void qemu_glCopyMultiTexSubImage2DEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCopyMultiTexSubImage3DEXT)( GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height );
void qemu_glCopyMultiTexSubImage3DEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCopyNamedBufferSubData)( GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size );
void qemu_glCopyNamedBufferSubData(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCopyPathNV)( GLuint resultPath, GLuint srcPath );
void qemu_glCopyPathNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCopyTexImage1DEXT)( GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border );
void qemu_glCopyTexImage1DEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCopyTexImage2DEXT)( GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border );
void qemu_glCopyTexImage2DEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCopyTexSubImage1DEXT)( GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width );
void qemu_glCopyTexSubImage1DEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCopyTexSubImage2DEXT)( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height );
void qemu_glCopyTexSubImage2DEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCopyTexSubImage3D)( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height );
void qemu_glCopyTexSubImage3D(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCopyTexSubImage3DEXT)( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height );
void qemu_glCopyTexSubImage3DEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCopyTextureImage1DEXT)( GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border );
void qemu_glCopyTextureImage1DEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCopyTextureImage2DEXT)( GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border );
void qemu_glCopyTextureImage2DEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCopyTextureSubImage1D)( GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width );
void qemu_glCopyTextureSubImage1D(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCopyTextureSubImage1DEXT)( GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width );
void qemu_glCopyTextureSubImage1DEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCopyTextureSubImage2D)( GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height );
void qemu_glCopyTextureSubImage2D(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCopyTextureSubImage2DEXT)( GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height );
void qemu_glCopyTextureSubImage2DEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCopyTextureSubImage3D)( GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height );
void qemu_glCopyTextureSubImage3D(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCopyTextureSubImage3DEXT)( GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height );
void qemu_glCopyTextureSubImage3DEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCoverFillPathInstancedNV)( GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues );
void qemu_glCoverFillPathInstancedNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCoverFillPathNV)( GLuint path, GLenum coverMode );
void qemu_glCoverFillPathNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCoverStrokePathInstancedNV)( GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues );
void qemu_glCoverStrokePathInstancedNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCoverStrokePathNV)( GLuint path, GLenum coverMode );
void qemu_glCoverStrokePathNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCoverageModulationNV)( GLenum components );
void qemu_glCoverageModulationNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCoverageModulationTableNV)( GLsizei n, const GLfloat *v );
void qemu_glCoverageModulationTableNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCreateBuffers)( GLsizei n, GLuint *buffers );
void qemu_glCreateBuffers(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCreateCommandListsNV)( GLsizei n, GLuint *lists );
void qemu_glCreateCommandListsNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCreateFramebuffers)( GLsizei n, GLuint *framebuffers );
void qemu_glCreateFramebuffers(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCreateMemoryObjectsEXT)( GLsizei n, GLuint *memoryObjects );
void qemu_glCreateMemoryObjectsEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCreatePerfQueryINTEL)( GLuint queryId, GLuint *queryHandle );
void qemu_glCreatePerfQueryINTEL(struct qemu_syscall *call);
GLuint     (WINE_GLAPI *p_glCreateProgram)(void);
void qemu_glCreateProgram(struct qemu_syscall *call);
GLhandleARB (WINE_GLAPI *p_glCreateProgramObjectARB)(void);
void qemu_glCreateProgramObjectARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCreateProgramPipelines)( GLsizei n, GLuint *pipelines );
void qemu_glCreateProgramPipelines(struct qemu_syscall *call);
GLuint     (WINE_GLAPI *p_glCreateProgressFenceNVX)(void);
void qemu_glCreateProgressFenceNVX(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCreateQueries)( GLenum target, GLsizei n, GLuint *ids );
void qemu_glCreateQueries(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCreateRenderbuffers)( GLsizei n, GLuint *renderbuffers );
void qemu_glCreateRenderbuffers(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCreateSamplers)( GLsizei n, GLuint *samplers );
void qemu_glCreateSamplers(struct qemu_syscall *call);
GLuint     (WINE_GLAPI *p_glCreateShader)( GLenum type );
void qemu_glCreateShader(struct qemu_syscall *call);
GLhandleARB (WINE_GLAPI *p_glCreateShaderObjectARB)( GLenum shaderType );
void qemu_glCreateShaderObjectARB(struct qemu_syscall *call);
GLuint     (WINE_GLAPI *p_glCreateShaderProgramEXT)( GLenum type, const GLchar *string );
void qemu_glCreateShaderProgramEXT(struct qemu_syscall *call);
GLuint     (WINE_GLAPI *p_glCreateShaderProgramv)( GLenum type, GLsizei count, const GLchar *const*strings );
void qemu_glCreateShaderProgramv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCreateStatesNV)( GLsizei n, GLuint *states );
void qemu_glCreateStatesNV(struct qemu_syscall *call);
GLsync     (WINE_GLAPI *p_glCreateSyncFromCLeventARB)( struct _cl_context *context, struct _cl_event *event, GLbitfield flags );
void qemu_glCreateSyncFromCLeventARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCreateTextures)( GLenum target, GLsizei n, GLuint *textures );
void qemu_glCreateTextures(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCreateTransformFeedbacks)( GLsizei n, GLuint *ids );
void qemu_glCreateTransformFeedbacks(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCreateVertexArrays)( GLsizei n, GLuint *arrays );
void qemu_glCreateVertexArrays(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCullParameterdvEXT)( GLenum pname, GLdouble *params );
void qemu_glCullParameterdvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCullParameterfvEXT)( GLenum pname, GLfloat *params );
void qemu_glCullParameterfvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glCurrentPaletteMatrixARB)( GLint index );
void qemu_glCurrentPaletteMatrixARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDebugMessageCallback)( GLDEBUGPROC callback, const void *userParam );
void qemu_glDebugMessageCallback(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDebugMessageCallbackAMD)( GLDEBUGPROCAMD callback, void *userParam );
void qemu_glDebugMessageCallbackAMD(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDebugMessageCallbackARB)( GLDEBUGPROCARB callback, const void *userParam );
void qemu_glDebugMessageCallbackARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDebugMessageControl)( GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled );
void qemu_glDebugMessageControl(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDebugMessageControlARB)( GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled );
void qemu_glDebugMessageControlARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDebugMessageEnableAMD)( GLenum category, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled );
void qemu_glDebugMessageEnableAMD(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDebugMessageInsert)( GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf );
void qemu_glDebugMessageInsert(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDebugMessageInsertAMD)( GLenum category, GLenum severity, GLuint id, GLsizei length, const GLchar *buf );
void qemu_glDebugMessageInsertAMD(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDebugMessageInsertARB)( GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf );
void qemu_glDebugMessageInsertARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDeformSGIX)( GLbitfield mask );
void qemu_glDeformSGIX(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDeformationMap3dSGIX)( GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, const GLdouble *points );
void qemu_glDeformationMap3dSGIX(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDeformationMap3fSGIX)( GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, const GLfloat *points );
void qemu_glDeformationMap3fSGIX(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDeleteAsyncMarkersSGIX)( GLuint marker, GLsizei range );
void qemu_glDeleteAsyncMarkersSGIX(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDeleteBufferRegion)( GLenum region );
void qemu_glDeleteBufferRegion(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDeleteBuffers)( GLsizei n, const GLuint *buffers );
void qemu_glDeleteBuffers(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDeleteBuffersARB)( GLsizei n, const GLuint *buffers );
void qemu_glDeleteBuffersARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDeleteCommandListsNV)( GLsizei n, const GLuint *lists );
void qemu_glDeleteCommandListsNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDeleteFencesAPPLE)( GLsizei n, const GLuint *fences );
void qemu_glDeleteFencesAPPLE(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDeleteFencesNV)( GLsizei n, const GLuint *fences );
void qemu_glDeleteFencesNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDeleteFragmentShaderATI)( GLuint id );
void qemu_glDeleteFragmentShaderATI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDeleteFramebuffers)( GLsizei n, const GLuint *framebuffers );
void qemu_glDeleteFramebuffers(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDeleteFramebuffersEXT)( GLsizei n, const GLuint *framebuffers );
void qemu_glDeleteFramebuffersEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDeleteMemoryObjectsEXT)( GLsizei n, const GLuint *memoryObjects );
void qemu_glDeleteMemoryObjectsEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDeleteNamedStringARB)( GLint namelen, const GLchar *name );
void qemu_glDeleteNamedStringARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDeleteNamesAMD)( GLenum identifier, GLuint num, const GLuint *names );
void qemu_glDeleteNamesAMD(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDeleteObjectARB)( GLhandleARB obj );
void qemu_glDeleteObjectARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDeleteObjectBufferATI)( GLuint buffer );
void qemu_glDeleteObjectBufferATI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDeleteOcclusionQueriesNV)( GLsizei n, const GLuint *ids );
void qemu_glDeleteOcclusionQueriesNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDeletePathsNV)( GLuint path, GLsizei range );
void qemu_glDeletePathsNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDeletePerfMonitorsAMD)( GLsizei n, GLuint *monitors );
void qemu_glDeletePerfMonitorsAMD(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDeletePerfQueryINTEL)( GLuint queryHandle );
void qemu_glDeletePerfQueryINTEL(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDeleteProgram)( GLuint program );
void qemu_glDeleteProgram(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDeleteProgramPipelines)( GLsizei n, const GLuint *pipelines );
void qemu_glDeleteProgramPipelines(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDeleteProgramsARB)( GLsizei n, const GLuint *programs );
void qemu_glDeleteProgramsARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDeleteProgramsNV)( GLsizei n, const GLuint *programs );
void qemu_glDeleteProgramsNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDeleteQueries)( GLsizei n, const GLuint *ids );
void qemu_glDeleteQueries(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDeleteQueriesARB)( GLsizei n, const GLuint *ids );
void qemu_glDeleteQueriesARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDeleteQueryResourceTagNV)( GLsizei n, const GLint *tagIds );
void qemu_glDeleteQueryResourceTagNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDeleteRenderbuffers)( GLsizei n, const GLuint *renderbuffers );
void qemu_glDeleteRenderbuffers(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDeleteRenderbuffersEXT)( GLsizei n, const GLuint *renderbuffers );
void qemu_glDeleteRenderbuffersEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDeleteSamplers)( GLsizei count, const GLuint *samplers );
void qemu_glDeleteSamplers(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDeleteSemaphoresEXT)( GLsizei n, const GLuint *semaphores );
void qemu_glDeleteSemaphoresEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDeleteShader)( GLuint shader );
void qemu_glDeleteShader(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDeleteStatesNV)( GLsizei n, const GLuint *states );
void qemu_glDeleteStatesNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDeleteSync)( GLsync sync );
void qemu_glDeleteSync(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDeleteTexturesEXT)( GLsizei n, const GLuint *textures );
void qemu_glDeleteTexturesEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDeleteTransformFeedbacks)( GLsizei n, const GLuint *ids );
void qemu_glDeleteTransformFeedbacks(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDeleteTransformFeedbacksNV)( GLsizei n, const GLuint *ids );
void qemu_glDeleteTransformFeedbacksNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDeleteVertexArrays)( GLsizei n, const GLuint *arrays );
void qemu_glDeleteVertexArrays(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDeleteVertexArraysAPPLE)( GLsizei n, const GLuint *arrays );
void qemu_glDeleteVertexArraysAPPLE(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDeleteVertexShaderEXT)( GLuint id );
void qemu_glDeleteVertexShaderEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDepthBoundsEXT)( GLclampd zmin, GLclampd zmax );
void qemu_glDepthBoundsEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDepthBoundsdNV)( GLdouble zmin, GLdouble zmax );
void qemu_glDepthBoundsdNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDepthRangeArraydvNV)( GLuint first, GLsizei count, const GLdouble *v );
void qemu_glDepthRangeArraydvNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDepthRangeArrayv)( GLuint first, GLsizei count, const GLdouble *v );
void qemu_glDepthRangeArrayv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDepthRangeIndexed)( GLuint index, GLdouble n, GLdouble f );
void qemu_glDepthRangeIndexed(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDepthRangeIndexeddNV)( GLuint index, GLdouble n, GLdouble f );
void qemu_glDepthRangeIndexeddNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDepthRangedNV)( GLdouble zNear, GLdouble zFar );
void qemu_glDepthRangedNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDepthRangef)( GLfloat n, GLfloat f );
void qemu_glDepthRangef(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDepthRangefOES)( GLclampf n, GLclampf f );
void qemu_glDepthRangefOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDepthRangexOES)( GLfixed n, GLfixed f );
void qemu_glDepthRangexOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDetachObjectARB)( GLhandleARB containerObj, GLhandleARB attachedObj );
void qemu_glDetachObjectARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDetachShader)( GLuint program, GLuint shader );
void qemu_glDetachShader(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDetailTexFuncSGIS)( GLenum target, GLsizei n, const GLfloat *points );
void qemu_glDetailTexFuncSGIS(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDisableClientStateIndexedEXT)( GLenum array, GLuint index );
void qemu_glDisableClientStateIndexedEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDisableClientStateiEXT)( GLenum array, GLuint index );
void qemu_glDisableClientStateiEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDisableIndexedEXT)( GLenum target, GLuint index );
void qemu_glDisableIndexedEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDisableVariantClientStateEXT)( GLuint id );
void qemu_glDisableVariantClientStateEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDisableVertexArrayAttrib)( GLuint vaobj, GLuint index );
void qemu_glDisableVertexArrayAttrib(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDisableVertexArrayAttribEXT)( GLuint vaobj, GLuint index );
void qemu_glDisableVertexArrayAttribEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDisableVertexArrayEXT)( GLuint vaobj, GLenum array );
void qemu_glDisableVertexArrayEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDisableVertexAttribAPPLE)( GLuint index, GLenum pname );
void qemu_glDisableVertexAttribAPPLE(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDisableVertexAttribArray)( GLuint index );
void qemu_glDisableVertexAttribArray(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDisableVertexAttribArrayARB)( GLuint index );
void qemu_glDisableVertexAttribArrayARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDisablei)( GLenum target, GLuint index );
void qemu_glDisablei(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDispatchCompute)( GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z );
void qemu_glDispatchCompute(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDispatchComputeGroupSizeARB)( GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z );
void qemu_glDispatchComputeGroupSizeARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDispatchComputeIndirect)( GLintptr indirect );
void qemu_glDispatchComputeIndirect(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDrawArraysEXT)( GLenum mode, GLint first, GLsizei count );
void qemu_glDrawArraysEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDrawArraysIndirect)( GLenum mode, const void *indirect );
void qemu_glDrawArraysIndirect(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDrawArraysInstanced)( GLenum mode, GLint first, GLsizei count, GLsizei instancecount );
void qemu_glDrawArraysInstanced(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDrawArraysInstancedARB)( GLenum mode, GLint first, GLsizei count, GLsizei primcount );
void qemu_glDrawArraysInstancedARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDrawArraysInstancedBaseInstance)( GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance );
void qemu_glDrawArraysInstancedBaseInstance(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDrawArraysInstancedEXT)( GLenum mode, GLint start, GLsizei count, GLsizei primcount );
void qemu_glDrawArraysInstancedEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDrawBufferRegion)( GLenum region, GLint x, GLint y, GLsizei width, GLsizei height, GLint xDest, GLint yDest );
void qemu_glDrawBufferRegion(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDrawBuffers)( GLsizei n, const GLenum *bufs );
void qemu_glDrawBuffers(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDrawBuffersARB)( GLsizei n, const GLenum *bufs );
void qemu_glDrawBuffersARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDrawBuffersATI)( GLsizei n, const GLenum *bufs );
void qemu_glDrawBuffersATI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDrawCommandsAddressNV)( GLenum primitiveMode, const GLuint64 *indirects, const GLsizei *sizes, GLuint count );
void qemu_glDrawCommandsAddressNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDrawCommandsNV)( GLenum primitiveMode, GLuint buffer, const GLintptr *indirects, const GLsizei *sizes, GLuint count );
void qemu_glDrawCommandsNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDrawCommandsStatesAddressNV)( const GLuint64 *indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count );
void qemu_glDrawCommandsStatesAddressNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDrawCommandsStatesNV)( GLuint buffer, const GLintptr *indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count );
void qemu_glDrawCommandsStatesNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDrawElementArrayAPPLE)( GLenum mode, GLint first, GLsizei count );
void qemu_glDrawElementArrayAPPLE(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDrawElementArrayATI)( GLenum mode, GLsizei count );
void qemu_glDrawElementArrayATI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDrawElementsBaseVertex)( GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex );
void qemu_glDrawElementsBaseVertex(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDrawElementsIndirect)( GLenum mode, GLenum type, const void *indirect );
void qemu_glDrawElementsIndirect(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDrawElementsInstanced)( GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount );
void qemu_glDrawElementsInstanced(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDrawElementsInstancedARB)( GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount );
void qemu_glDrawElementsInstancedARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDrawElementsInstancedBaseInstance)( GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance );
void qemu_glDrawElementsInstancedBaseInstance(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDrawElementsInstancedBaseVertex)( GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex );
void qemu_glDrawElementsInstancedBaseVertex(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDrawElementsInstancedBaseVertexBaseInstance)( GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance );
void qemu_glDrawElementsInstancedBaseVertexBaseInstance(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDrawElementsInstancedEXT)( GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount );
void qemu_glDrawElementsInstancedEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDrawMeshArraysSUN)( GLenum mode, GLint first, GLsizei count, GLsizei width );
void qemu_glDrawMeshArraysSUN(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDrawMeshTasksIndirectNV)( GLintptr indirect );
void qemu_glDrawMeshTasksIndirectNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDrawMeshTasksNV)( GLuint first, GLuint count );
void qemu_glDrawMeshTasksNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDrawRangeElementArrayAPPLE)( GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count );
void qemu_glDrawRangeElementArrayAPPLE(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDrawRangeElementArrayATI)( GLenum mode, GLuint start, GLuint end, GLsizei count );
void qemu_glDrawRangeElementArrayATI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDrawRangeElements)( GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices );
void qemu_glDrawRangeElements(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDrawRangeElementsBaseVertex)( GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex );
void qemu_glDrawRangeElementsBaseVertex(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDrawRangeElementsEXT)( GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices );
void qemu_glDrawRangeElementsEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDrawTextureNV)( GLuint texture, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1 );
void qemu_glDrawTextureNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDrawTransformFeedback)( GLenum mode, GLuint id );
void qemu_glDrawTransformFeedback(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDrawTransformFeedbackInstanced)( GLenum mode, GLuint id, GLsizei instancecount );
void qemu_glDrawTransformFeedbackInstanced(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDrawTransformFeedbackNV)( GLenum mode, GLuint id );
void qemu_glDrawTransformFeedbackNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDrawTransformFeedbackStream)( GLenum mode, GLuint id, GLuint stream );
void qemu_glDrawTransformFeedbackStream(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDrawTransformFeedbackStreamInstanced)( GLenum mode, GLuint id, GLuint stream, GLsizei instancecount );
void qemu_glDrawTransformFeedbackStreamInstanced(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glDrawVkImageNV)( GLuint64 vkImage, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1 );
void qemu_glDrawVkImageNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glEGLImageTargetTexStorageEXT)( GLenum target, GLeglImageOES image, const GLint* attrib_list );
void qemu_glEGLImageTargetTexStorageEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glEGLImageTargetTextureStorageEXT)( GLuint texture, GLeglImageOES image, const GLint* attrib_list );
void qemu_glEGLImageTargetTextureStorageEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glEdgeFlagFormatNV)( GLsizei stride );
void qemu_glEdgeFlagFormatNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glEdgeFlagPointerEXT)( GLsizei stride, GLsizei count, const GLboolean *pointer );
void qemu_glEdgeFlagPointerEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glEdgeFlagPointerListIBM)( GLint stride, const GLboolean **pointer, GLint ptrstride );
void qemu_glEdgeFlagPointerListIBM(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glElementPointerAPPLE)( GLenum type, const void *pointer );
void qemu_glElementPointerAPPLE(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glElementPointerATI)( GLenum type, const void *pointer );
void qemu_glElementPointerATI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glEnableClientStateIndexedEXT)( GLenum array, GLuint index );
void qemu_glEnableClientStateIndexedEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glEnableClientStateiEXT)( GLenum array, GLuint index );
void qemu_glEnableClientStateiEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glEnableIndexedEXT)( GLenum target, GLuint index );
void qemu_glEnableIndexedEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glEnableVariantClientStateEXT)( GLuint id );
void qemu_glEnableVariantClientStateEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glEnableVertexArrayAttrib)( GLuint vaobj, GLuint index );
void qemu_glEnableVertexArrayAttrib(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glEnableVertexArrayAttribEXT)( GLuint vaobj, GLuint index );
void qemu_glEnableVertexArrayAttribEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glEnableVertexArrayEXT)( GLuint vaobj, GLenum array );
void qemu_glEnableVertexArrayEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glEnableVertexAttribAPPLE)( GLuint index, GLenum pname );
void qemu_glEnableVertexAttribAPPLE(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glEnableVertexAttribArray)( GLuint index );
void qemu_glEnableVertexAttribArray(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glEnableVertexAttribArrayARB)( GLuint index );
void qemu_glEnableVertexAttribArrayARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glEnablei)( GLenum target, GLuint index );
void qemu_glEnablei(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glEndConditionalRender)(void);
void qemu_glEndConditionalRender(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glEndConditionalRenderNV)(void);
void qemu_glEndConditionalRenderNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glEndConditionalRenderNVX)(void);
void qemu_glEndConditionalRenderNVX(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glEndFragmentShaderATI)(void);
void qemu_glEndFragmentShaderATI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glEndOcclusionQueryNV)(void);
void qemu_glEndOcclusionQueryNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glEndPerfMonitorAMD)( GLuint monitor );
void qemu_glEndPerfMonitorAMD(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glEndPerfQueryINTEL)( GLuint queryHandle );
void qemu_glEndPerfQueryINTEL(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glEndQuery)( GLenum target );
void qemu_glEndQuery(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glEndQueryARB)( GLenum target );
void qemu_glEndQueryARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glEndQueryIndexed)( GLenum target, GLuint index );
void qemu_glEndQueryIndexed(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glEndTransformFeedback)(void);
void qemu_glEndTransformFeedback(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glEndTransformFeedbackEXT)(void);
void qemu_glEndTransformFeedbackEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glEndTransformFeedbackNV)(void);
void qemu_glEndTransformFeedbackNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glEndVertexShaderEXT)(void);
void qemu_glEndVertexShaderEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glEndVideoCaptureNV)( GLuint video_capture_slot );
void qemu_glEndVideoCaptureNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glEvalCoord1xOES)( GLfixed u );
void qemu_glEvalCoord1xOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glEvalCoord1xvOES)( const GLfixed *coords );
void qemu_glEvalCoord1xvOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glEvalCoord2xOES)( GLfixed u, GLfixed v );
void qemu_glEvalCoord2xOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glEvalCoord2xvOES)( const GLfixed *coords );
void qemu_glEvalCoord2xvOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glEvalMapsNV)( GLenum target, GLenum mode );
void qemu_glEvalMapsNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glEvaluateDepthValuesARB)(void);
void qemu_glEvaluateDepthValuesARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glExecuteProgramNV)( GLenum target, GLuint id, const GLfloat *params );
void qemu_glExecuteProgramNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glExtractComponentEXT)( GLuint res, GLuint src, GLuint num );
void qemu_glExtractComponentEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glFeedbackBufferxOES)( GLsizei n, GLenum type, const GLfixed *buffer );
void qemu_glFeedbackBufferxOES(struct qemu_syscall *call);
GLsync     (WINE_GLAPI *p_glFenceSync)( GLenum condition, GLbitfield flags );
void qemu_glFenceSync(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glFinalCombinerInputNV)( GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage );
void qemu_glFinalCombinerInputNV(struct qemu_syscall *call);
GLint      (WINE_GLAPI *p_glFinishAsyncSGIX)( GLuint *markerp );
void qemu_glFinishAsyncSGIX(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glFinishFenceAPPLE)( GLuint fence );
void qemu_glFinishFenceAPPLE(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glFinishFenceNV)( GLuint fence );
void qemu_glFinishFenceNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glFinishObjectAPPLE)( GLenum object, GLint name );
void qemu_glFinishObjectAPPLE(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glFinishTextureSUNX)(void);
void qemu_glFinishTextureSUNX(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glFlushMappedBufferRange)( GLenum target, GLintptr offset, GLsizeiptr length );
void qemu_glFlushMappedBufferRange(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glFlushMappedBufferRangeAPPLE)( GLenum target, GLintptr offset, GLsizeiptr size );
void qemu_glFlushMappedBufferRangeAPPLE(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glFlushMappedNamedBufferRange)( GLuint buffer, GLintptr offset, GLsizeiptr length );
void qemu_glFlushMappedNamedBufferRange(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glFlushMappedNamedBufferRangeEXT)( GLuint buffer, GLintptr offset, GLsizeiptr length );
void qemu_glFlushMappedNamedBufferRangeEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glFlushPixelDataRangeNV)( GLenum target );
void qemu_glFlushPixelDataRangeNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glFlushRasterSGIX)(void);
void qemu_glFlushRasterSGIX(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glFlushStaticDataIBM)( GLenum target );
void qemu_glFlushStaticDataIBM(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glFlushVertexArrayRangeAPPLE)( GLsizei length, void *pointer );
void qemu_glFlushVertexArrayRangeAPPLE(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glFlushVertexArrayRangeNV)(void);
void qemu_glFlushVertexArrayRangeNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glFogCoordFormatNV)( GLenum type, GLsizei stride );
void qemu_glFogCoordFormatNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glFogCoordPointer)( GLenum type, GLsizei stride, const void *pointer );
void qemu_glFogCoordPointer(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glFogCoordPointerEXT)( GLenum type, GLsizei stride, const void *pointer );
void qemu_glFogCoordPointerEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glFogCoordPointerListIBM)( GLenum type, GLint stride, const void **pointer, GLint ptrstride );
void qemu_glFogCoordPointerListIBM(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glFogCoordd)( GLdouble coord );
void qemu_glFogCoordd(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glFogCoorddEXT)( GLdouble coord );
void qemu_glFogCoorddEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glFogCoorddv)( const GLdouble *coord );
void qemu_glFogCoorddv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glFogCoorddvEXT)( const GLdouble *coord );
void qemu_glFogCoorddvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glFogCoordf)( GLfloat coord );
void qemu_glFogCoordf(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glFogCoordfEXT)( GLfloat coord );
void qemu_glFogCoordfEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glFogCoordfv)( const GLfloat *coord );
void qemu_glFogCoordfv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glFogCoordfvEXT)( const GLfloat *coord );
void qemu_glFogCoordfvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glFogCoordhNV)( GLhalfNV fog );
void qemu_glFogCoordhNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glFogCoordhvNV)( const GLhalfNV *fog );
void qemu_glFogCoordhvNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glFogFuncSGIS)( GLsizei n, const GLfloat *points );
void qemu_glFogFuncSGIS(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glFogxOES)( GLenum pname, GLfixed param );
void qemu_glFogxOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glFogxvOES)( GLenum pname, const GLfixed *param );
void qemu_glFogxvOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glFragmentColorMaterialSGIX)( GLenum face, GLenum mode );
void qemu_glFragmentColorMaterialSGIX(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glFragmentCoverageColorNV)( GLuint color );
void qemu_glFragmentCoverageColorNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glFragmentLightModelfSGIX)( GLenum pname, GLfloat param );
void qemu_glFragmentLightModelfSGIX(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glFragmentLightModelfvSGIX)( GLenum pname, const GLfloat *params );
void qemu_glFragmentLightModelfvSGIX(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glFragmentLightModeliSGIX)( GLenum pname, GLint param );
void qemu_glFragmentLightModeliSGIX(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glFragmentLightModelivSGIX)( GLenum pname, const GLint *params );
void qemu_glFragmentLightModelivSGIX(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glFragmentLightfSGIX)( GLenum light, GLenum pname, GLfloat param );
void qemu_glFragmentLightfSGIX(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glFragmentLightfvSGIX)( GLenum light, GLenum pname, const GLfloat *params );
void qemu_glFragmentLightfvSGIX(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glFragmentLightiSGIX)( GLenum light, GLenum pname, GLint param );
void qemu_glFragmentLightiSGIX(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glFragmentLightivSGIX)( GLenum light, GLenum pname, const GLint *params );
void qemu_glFragmentLightivSGIX(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glFragmentMaterialfSGIX)( GLenum face, GLenum pname, GLfloat param );
void qemu_glFragmentMaterialfSGIX(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glFragmentMaterialfvSGIX)( GLenum face, GLenum pname, const GLfloat *params );
void qemu_glFragmentMaterialfvSGIX(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glFragmentMaterialiSGIX)( GLenum face, GLenum pname, GLint param );
void qemu_glFragmentMaterialiSGIX(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glFragmentMaterialivSGIX)( GLenum face, GLenum pname, const GLint *params );
void qemu_glFragmentMaterialivSGIX(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glFrameTerminatorGREMEDY)(void);
void qemu_glFrameTerminatorGREMEDY(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glFrameZoomSGIX)( GLint factor );
void qemu_glFrameZoomSGIX(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glFramebufferDrawBufferEXT)( GLuint framebuffer, GLenum mode );
void qemu_glFramebufferDrawBufferEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glFramebufferDrawBuffersEXT)( GLuint framebuffer, GLsizei n, const GLenum *bufs );
void qemu_glFramebufferDrawBuffersEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glFramebufferFetchBarrierEXT)(void);
void qemu_glFramebufferFetchBarrierEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glFramebufferParameteri)( GLenum target, GLenum pname, GLint param );
void qemu_glFramebufferParameteri(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glFramebufferParameteriMESA)( GLenum target, GLenum pname, GLint param );
void qemu_glFramebufferParameteriMESA(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glFramebufferReadBufferEXT)( GLuint framebuffer, GLenum mode );
void qemu_glFramebufferReadBufferEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glFramebufferRenderbuffer)( GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer );
void qemu_glFramebufferRenderbuffer(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glFramebufferRenderbufferEXT)( GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer );
void qemu_glFramebufferRenderbufferEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glFramebufferSampleLocationsfvARB)( GLenum target, GLuint start, GLsizei count, const GLfloat *v );
void qemu_glFramebufferSampleLocationsfvARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glFramebufferSampleLocationsfvNV)( GLenum target, GLuint start, GLsizei count, const GLfloat *v );
void qemu_glFramebufferSampleLocationsfvNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glFramebufferSamplePositionsfvAMD)( GLenum target, GLuint numsamples, GLuint pixelindex, const GLfloat *values );
void qemu_glFramebufferSamplePositionsfvAMD(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glFramebufferTexture)( GLenum target, GLenum attachment, GLuint texture, GLint level );
void qemu_glFramebufferTexture(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glFramebufferTexture1D)( GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level );
void qemu_glFramebufferTexture1D(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glFramebufferTexture1DEXT)( GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level );
void qemu_glFramebufferTexture1DEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glFramebufferTexture2D)( GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level );
void qemu_glFramebufferTexture2D(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glFramebufferTexture2DEXT)( GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level );
void qemu_glFramebufferTexture2DEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glFramebufferTexture3D)( GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset );
void qemu_glFramebufferTexture3D(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glFramebufferTexture3DEXT)( GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset );
void qemu_glFramebufferTexture3DEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glFramebufferTextureARB)( GLenum target, GLenum attachment, GLuint texture, GLint level );
void qemu_glFramebufferTextureARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glFramebufferTextureEXT)( GLenum target, GLenum attachment, GLuint texture, GLint level );
void qemu_glFramebufferTextureEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glFramebufferTextureFaceARB)( GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face );
void qemu_glFramebufferTextureFaceARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glFramebufferTextureFaceEXT)( GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face );
void qemu_glFramebufferTextureFaceEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glFramebufferTextureLayer)( GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer );
void qemu_glFramebufferTextureLayer(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glFramebufferTextureLayerARB)( GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer );
void qemu_glFramebufferTextureLayerARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glFramebufferTextureLayerEXT)( GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer );
void qemu_glFramebufferTextureLayerEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glFramebufferTextureMultiviewOVR)( GLenum target, GLenum attachment, GLuint texture, GLint level, GLint baseViewIndex, GLsizei numViews );
void qemu_glFramebufferTextureMultiviewOVR(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glFreeObjectBufferATI)( GLuint buffer );
void qemu_glFreeObjectBufferATI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glFrustumfOES)( GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f );
void qemu_glFrustumfOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glFrustumxOES)( GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f );
void qemu_glFrustumxOES(struct qemu_syscall *call);
GLuint     (WINE_GLAPI *p_glGenAsyncMarkersSGIX)( GLsizei range );
void qemu_glGenAsyncMarkersSGIX(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGenBuffers)( GLsizei n, GLuint *buffers );
void qemu_glGenBuffers(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGenBuffersARB)( GLsizei n, GLuint *buffers );
void qemu_glGenBuffersARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGenFencesAPPLE)( GLsizei n, GLuint *fences );
void qemu_glGenFencesAPPLE(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGenFencesNV)( GLsizei n, GLuint *fences );
void qemu_glGenFencesNV(struct qemu_syscall *call);
GLuint     (WINE_GLAPI *p_glGenFragmentShadersATI)( GLuint range );
void qemu_glGenFragmentShadersATI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGenFramebuffers)( GLsizei n, GLuint *framebuffers );
void qemu_glGenFramebuffers(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGenFramebuffersEXT)( GLsizei n, GLuint *framebuffers );
void qemu_glGenFramebuffersEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGenNamesAMD)( GLenum identifier, GLuint num, GLuint *names );
void qemu_glGenNamesAMD(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGenOcclusionQueriesNV)( GLsizei n, GLuint *ids );
void qemu_glGenOcclusionQueriesNV(struct qemu_syscall *call);
GLuint     (WINE_GLAPI *p_glGenPathsNV)( GLsizei range );
void qemu_glGenPathsNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGenPerfMonitorsAMD)( GLsizei n, GLuint *monitors );
void qemu_glGenPerfMonitorsAMD(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGenProgramPipelines)( GLsizei n, GLuint *pipelines );
void qemu_glGenProgramPipelines(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGenProgramsARB)( GLsizei n, GLuint *programs );
void qemu_glGenProgramsARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGenProgramsNV)( GLsizei n, GLuint *programs );
void qemu_glGenProgramsNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGenQueries)( GLsizei n, GLuint *ids );
void qemu_glGenQueries(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGenQueriesARB)( GLsizei n, GLuint *ids );
void qemu_glGenQueriesARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGenQueryResourceTagNV)( GLsizei n, GLint *tagIds );
void qemu_glGenQueryResourceTagNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGenRenderbuffers)( GLsizei n, GLuint *renderbuffers );
void qemu_glGenRenderbuffers(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGenRenderbuffersEXT)( GLsizei n, GLuint *renderbuffers );
void qemu_glGenRenderbuffersEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGenSamplers)( GLsizei count, GLuint *samplers );
void qemu_glGenSamplers(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGenSemaphoresEXT)( GLsizei n, GLuint *semaphores );
void qemu_glGenSemaphoresEXT(struct qemu_syscall *call);
GLuint     (WINE_GLAPI *p_glGenSymbolsEXT)( GLenum datatype, GLenum storagetype, GLenum range, GLuint components );
void qemu_glGenSymbolsEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGenTexturesEXT)( GLsizei n, GLuint *textures );
void qemu_glGenTexturesEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGenTransformFeedbacks)( GLsizei n, GLuint *ids );
void qemu_glGenTransformFeedbacks(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGenTransformFeedbacksNV)( GLsizei n, GLuint *ids );
void qemu_glGenTransformFeedbacksNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGenVertexArrays)( GLsizei n, GLuint *arrays );
void qemu_glGenVertexArrays(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGenVertexArraysAPPLE)( GLsizei n, GLuint *arrays );
void qemu_glGenVertexArraysAPPLE(struct qemu_syscall *call);
GLuint     (WINE_GLAPI *p_glGenVertexShadersEXT)( GLuint range );
void qemu_glGenVertexShadersEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGenerateMipmap)( GLenum target );
void qemu_glGenerateMipmap(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGenerateMipmapEXT)( GLenum target );
void qemu_glGenerateMipmapEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGenerateMultiTexMipmapEXT)( GLenum texunit, GLenum target );
void qemu_glGenerateMultiTexMipmapEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGenerateTextureMipmap)( GLuint texture );
void qemu_glGenerateTextureMipmap(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGenerateTextureMipmapEXT)( GLuint texture, GLenum target );
void qemu_glGenerateTextureMipmapEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetActiveAtomicCounterBufferiv)( GLuint program, GLuint bufferIndex, GLenum pname, GLint *params );
void qemu_glGetActiveAtomicCounterBufferiv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetActiveAttrib)( GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name );
void qemu_glGetActiveAttrib(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetActiveAttribARB)( GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name );
void qemu_glGetActiveAttribARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetActiveSubroutineName)( GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name );
void qemu_glGetActiveSubroutineName(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetActiveSubroutineUniformName)( GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name );
void qemu_glGetActiveSubroutineUniformName(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetActiveSubroutineUniformiv)( GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values );
void qemu_glGetActiveSubroutineUniformiv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetActiveUniform)( GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name );
void qemu_glGetActiveUniform(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetActiveUniformARB)( GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name );
void qemu_glGetActiveUniformARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetActiveUniformBlockName)( GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName );
void qemu_glGetActiveUniformBlockName(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetActiveUniformBlockiv)( GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params );
void qemu_glGetActiveUniformBlockiv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetActiveUniformName)( GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName );
void qemu_glGetActiveUniformName(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetActiveUniformsiv)( GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params );
void qemu_glGetActiveUniformsiv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetActiveVaryingNV)( GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name );
void qemu_glGetActiveVaryingNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetArrayObjectfvATI)( GLenum array, GLenum pname, GLfloat *params );
void qemu_glGetArrayObjectfvATI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetArrayObjectivATI)( GLenum array, GLenum pname, GLint *params );
void qemu_glGetArrayObjectivATI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetAttachedObjectsARB)( GLhandleARB containerObj, GLsizei maxCount, GLsizei *count, GLhandleARB *obj );
void qemu_glGetAttachedObjectsARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetAttachedShaders)( GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders );
void qemu_glGetAttachedShaders(struct qemu_syscall *call);
GLint      (WINE_GLAPI *p_glGetAttribLocation)( GLuint program, const GLchar *name );
void qemu_glGetAttribLocation(struct qemu_syscall *call);
GLint      (WINE_GLAPI *p_glGetAttribLocationARB)( GLhandleARB programObj, const GLcharARB *name );
void qemu_glGetAttribLocationARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetBooleanIndexedvEXT)( GLenum target, GLuint index, GLboolean *data );
void qemu_glGetBooleanIndexedvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetBooleani_v)( GLenum target, GLuint index, GLboolean *data );
void qemu_glGetBooleani_v(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetBufferParameteri64v)( GLenum target, GLenum pname, GLint64 *params );
void qemu_glGetBufferParameteri64v(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetBufferParameteriv)( GLenum target, GLenum pname, GLint *params );
void qemu_glGetBufferParameteriv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetBufferParameterivARB)( GLenum target, GLenum pname, GLint *params );
void qemu_glGetBufferParameterivARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetBufferParameterui64vNV)( GLenum target, GLenum pname, GLuint64EXT *params );
void qemu_glGetBufferParameterui64vNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetBufferPointerv)( GLenum target, GLenum pname, void **params );
void qemu_glGetBufferPointerv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetBufferPointervARB)( GLenum target, GLenum pname, void **params );
void qemu_glGetBufferPointervARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetBufferSubData)( GLenum target, GLintptr offset, GLsizeiptr size, void *data );
void qemu_glGetBufferSubData(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetBufferSubDataARB)( GLenum target, GLintptrARB offset, GLsizeiptrARB size, void *data );
void qemu_glGetBufferSubDataARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetClipPlanefOES)( GLenum plane, GLfloat *equation );
void qemu_glGetClipPlanefOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetClipPlanexOES)( GLenum plane, GLfixed *equation );
void qemu_glGetClipPlanexOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetColorTable)( GLenum target, GLenum format, GLenum type, void *table );
void qemu_glGetColorTable(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetColorTableEXT)( GLenum target, GLenum format, GLenum type, void *data );
void qemu_glGetColorTableEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetColorTableParameterfv)( GLenum target, GLenum pname, GLfloat *params );
void qemu_glGetColorTableParameterfv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetColorTableParameterfvEXT)( GLenum target, GLenum pname, GLfloat *params );
void qemu_glGetColorTableParameterfvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetColorTableParameterfvSGI)( GLenum target, GLenum pname, GLfloat *params );
void qemu_glGetColorTableParameterfvSGI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetColorTableParameteriv)( GLenum target, GLenum pname, GLint *params );
void qemu_glGetColorTableParameteriv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetColorTableParameterivEXT)( GLenum target, GLenum pname, GLint *params );
void qemu_glGetColorTableParameterivEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetColorTableParameterivSGI)( GLenum target, GLenum pname, GLint *params );
void qemu_glGetColorTableParameterivSGI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetColorTableSGI)( GLenum target, GLenum format, GLenum type, void *table );
void qemu_glGetColorTableSGI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetCombinerInputParameterfvNV)( GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat *params );
void qemu_glGetCombinerInputParameterfvNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetCombinerInputParameterivNV)( GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint *params );
void qemu_glGetCombinerInputParameterivNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetCombinerOutputParameterfvNV)( GLenum stage, GLenum portion, GLenum pname, GLfloat *params );
void qemu_glGetCombinerOutputParameterfvNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetCombinerOutputParameterivNV)( GLenum stage, GLenum portion, GLenum pname, GLint *params );
void qemu_glGetCombinerOutputParameterivNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetCombinerStageParameterfvNV)( GLenum stage, GLenum pname, GLfloat *params );
void qemu_glGetCombinerStageParameterfvNV(struct qemu_syscall *call);
GLuint     (WINE_GLAPI *p_glGetCommandHeaderNV)( GLenum tokenID, GLuint size );
void qemu_glGetCommandHeaderNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetCompressedMultiTexImageEXT)( GLenum texunit, GLenum target, GLint lod, void *img );
void qemu_glGetCompressedMultiTexImageEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetCompressedTexImage)( GLenum target, GLint level, void *img );
void qemu_glGetCompressedTexImage(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetCompressedTexImageARB)( GLenum target, GLint level, void *img );
void qemu_glGetCompressedTexImageARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetCompressedTextureImage)( GLuint texture, GLint level, GLsizei bufSize, void *pixels );
void qemu_glGetCompressedTextureImage(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetCompressedTextureImageEXT)( GLuint texture, GLenum target, GLint lod, void *img );
void qemu_glGetCompressedTextureImageEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetCompressedTextureSubImage)( GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void *pixels );
void qemu_glGetCompressedTextureSubImage(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetConvolutionFilter)( GLenum target, GLenum format, GLenum type, void *image );
void qemu_glGetConvolutionFilter(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetConvolutionFilterEXT)( GLenum target, GLenum format, GLenum type, void *image );
void qemu_glGetConvolutionFilterEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetConvolutionParameterfv)( GLenum target, GLenum pname, GLfloat *params );
void qemu_glGetConvolutionParameterfv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetConvolutionParameterfvEXT)( GLenum target, GLenum pname, GLfloat *params );
void qemu_glGetConvolutionParameterfvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetConvolutionParameteriv)( GLenum target, GLenum pname, GLint *params );
void qemu_glGetConvolutionParameteriv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetConvolutionParameterivEXT)( GLenum target, GLenum pname, GLint *params );
void qemu_glGetConvolutionParameterivEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetConvolutionParameterxvOES)( GLenum target, GLenum pname, GLfixed *params );
void qemu_glGetConvolutionParameterxvOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetCoverageModulationTableNV)( GLsizei bufSize, GLfloat *v );
void qemu_glGetCoverageModulationTableNV(struct qemu_syscall *call);
GLuint     (WINE_GLAPI *p_glGetDebugMessageLog)( GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog );
void qemu_glGetDebugMessageLog(struct qemu_syscall *call);
GLuint     (WINE_GLAPI *p_glGetDebugMessageLogAMD)( GLuint count, GLsizei bufSize, GLenum *categories, GLuint *severities, GLuint *ids, GLsizei *lengths, GLchar *message );
void qemu_glGetDebugMessageLogAMD(struct qemu_syscall *call);
GLuint     (WINE_GLAPI *p_glGetDebugMessageLogARB)( GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog );
void qemu_glGetDebugMessageLogARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetDetailTexFuncSGIS)( GLenum target, GLfloat *points );
void qemu_glGetDetailTexFuncSGIS(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetDoubleIndexedvEXT)( GLenum target, GLuint index, GLdouble *data );
void qemu_glGetDoubleIndexedvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetDoublei_v)( GLenum target, GLuint index, GLdouble *data );
void qemu_glGetDoublei_v(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetDoublei_vEXT)( GLenum pname, GLuint index, GLdouble *params );
void qemu_glGetDoublei_vEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetFenceivNV)( GLuint fence, GLenum pname, GLint *params );
void qemu_glGetFenceivNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetFinalCombinerInputParameterfvNV)( GLenum variable, GLenum pname, GLfloat *params );
void qemu_glGetFinalCombinerInputParameterfvNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetFinalCombinerInputParameterivNV)( GLenum variable, GLenum pname, GLint *params );
void qemu_glGetFinalCombinerInputParameterivNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetFirstPerfQueryIdINTEL)( GLuint *queryId );
void qemu_glGetFirstPerfQueryIdINTEL(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetFixedvOES)( GLenum pname, GLfixed *params );
void qemu_glGetFixedvOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetFloatIndexedvEXT)( GLenum target, GLuint index, GLfloat *data );
void qemu_glGetFloatIndexedvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetFloati_v)( GLenum target, GLuint index, GLfloat *data );
void qemu_glGetFloati_v(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetFloati_vEXT)( GLenum pname, GLuint index, GLfloat *params );
void qemu_glGetFloati_vEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetFogFuncSGIS)( GLfloat *points );
void qemu_glGetFogFuncSGIS(struct qemu_syscall *call);
GLint      (WINE_GLAPI *p_glGetFragDataIndex)( GLuint program, const GLchar *name );
void qemu_glGetFragDataIndex(struct qemu_syscall *call);
GLint      (WINE_GLAPI *p_glGetFragDataLocation)( GLuint program, const GLchar *name );
void qemu_glGetFragDataLocation(struct qemu_syscall *call);
GLint      (WINE_GLAPI *p_glGetFragDataLocationEXT)( GLuint program, const GLchar *name );
void qemu_glGetFragDataLocationEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetFragmentLightfvSGIX)( GLenum light, GLenum pname, GLfloat *params );
void qemu_glGetFragmentLightfvSGIX(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetFragmentLightivSGIX)( GLenum light, GLenum pname, GLint *params );
void qemu_glGetFragmentLightivSGIX(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetFragmentMaterialfvSGIX)( GLenum face, GLenum pname, GLfloat *params );
void qemu_glGetFragmentMaterialfvSGIX(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetFragmentMaterialivSGIX)( GLenum face, GLenum pname, GLint *params );
void qemu_glGetFragmentMaterialivSGIX(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetFramebufferAttachmentParameteriv)( GLenum target, GLenum attachment, GLenum pname, GLint *params );
void qemu_glGetFramebufferAttachmentParameteriv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetFramebufferAttachmentParameterivEXT)( GLenum target, GLenum attachment, GLenum pname, GLint *params );
void qemu_glGetFramebufferAttachmentParameterivEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetFramebufferParameterfvAMD)( GLenum target, GLenum pname, GLuint numsamples, GLuint pixelindex, GLsizei size, GLfloat *values );
void qemu_glGetFramebufferParameterfvAMD(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetFramebufferParameteriv)( GLenum target, GLenum pname, GLint *params );
void qemu_glGetFramebufferParameteriv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetFramebufferParameterivEXT)( GLuint framebuffer, GLenum pname, GLint *params );
void qemu_glGetFramebufferParameterivEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetFramebufferParameterivMESA)( GLenum target, GLenum pname, GLint *params );
void qemu_glGetFramebufferParameterivMESA(struct qemu_syscall *call);
GLenum     (WINE_GLAPI *p_glGetGraphicsResetStatus)(void);
void qemu_glGetGraphicsResetStatus(struct qemu_syscall *call);
GLenum     (WINE_GLAPI *p_glGetGraphicsResetStatusARB)(void);
void qemu_glGetGraphicsResetStatusARB(struct qemu_syscall *call);
GLhandleARB (WINE_GLAPI *p_glGetHandleARB)( GLenum pname );
void qemu_glGetHandleARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetHistogram)( GLenum target, GLboolean reset, GLenum format, GLenum type, void *values );
void qemu_glGetHistogram(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetHistogramEXT)( GLenum target, GLboolean reset, GLenum format, GLenum type, void *values );
void qemu_glGetHistogramEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetHistogramParameterfv)( GLenum target, GLenum pname, GLfloat *params );
void qemu_glGetHistogramParameterfv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetHistogramParameterfvEXT)( GLenum target, GLenum pname, GLfloat *params );
void qemu_glGetHistogramParameterfvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetHistogramParameteriv)( GLenum target, GLenum pname, GLint *params );
void qemu_glGetHistogramParameteriv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetHistogramParameterivEXT)( GLenum target, GLenum pname, GLint *params );
void qemu_glGetHistogramParameterivEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetHistogramParameterxvOES)( GLenum target, GLenum pname, GLfixed *params );
void qemu_glGetHistogramParameterxvOES(struct qemu_syscall *call);
GLuint64   (WINE_GLAPI *p_glGetImageHandleARB)( GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format );
void qemu_glGetImageHandleARB(struct qemu_syscall *call);
GLuint64   (WINE_GLAPI *p_glGetImageHandleNV)( GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format );
void qemu_glGetImageHandleNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetImageTransformParameterfvHP)( GLenum target, GLenum pname, GLfloat *params );
void qemu_glGetImageTransformParameterfvHP(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetImageTransformParameterivHP)( GLenum target, GLenum pname, GLint *params );
void qemu_glGetImageTransformParameterivHP(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetInfoLogARB)( GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *infoLog );
void qemu_glGetInfoLogARB(struct qemu_syscall *call);
GLint      (WINE_GLAPI *p_glGetInstrumentsSGIX)(void);
void qemu_glGetInstrumentsSGIX(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetInteger64i_v)( GLenum target, GLuint index, GLint64 *data );
void qemu_glGetInteger64i_v(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetInteger64v)( GLenum pname, GLint64 *data );
void qemu_glGetInteger64v(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetIntegerIndexedvEXT)( GLenum target, GLuint index, GLint *data );
void qemu_glGetIntegerIndexedvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetIntegeri_v)( GLenum target, GLuint index, GLint *data );
void qemu_glGetIntegeri_v(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetIntegerui64i_vNV)( GLenum value, GLuint index, GLuint64EXT *result );
void qemu_glGetIntegerui64i_vNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetIntegerui64vNV)( GLenum value, GLuint64EXT *result );
void qemu_glGetIntegerui64vNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetInternalformatSampleivNV)( GLenum target, GLenum internalformat, GLsizei samples, GLenum pname, GLsizei count, GLint *params );
void qemu_glGetInternalformatSampleivNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetInternalformati64v)( GLenum target, GLenum internalformat, GLenum pname, GLsizei count, GLint64 *params );
void qemu_glGetInternalformati64v(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetInternalformativ)( GLenum target, GLenum internalformat, GLenum pname, GLsizei count, GLint *params );
void qemu_glGetInternalformativ(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetInvariantBooleanvEXT)( GLuint id, GLenum value, GLboolean *data );
void qemu_glGetInvariantBooleanvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetInvariantFloatvEXT)( GLuint id, GLenum value, GLfloat *data );
void qemu_glGetInvariantFloatvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetInvariantIntegervEXT)( GLuint id, GLenum value, GLint *data );
void qemu_glGetInvariantIntegervEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetLightxOES)( GLenum light, GLenum pname, GLfixed *params );
void qemu_glGetLightxOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetListParameterfvSGIX)( GLuint list, GLenum pname, GLfloat *params );
void qemu_glGetListParameterfvSGIX(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetListParameterivSGIX)( GLuint list, GLenum pname, GLint *params );
void qemu_glGetListParameterivSGIX(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetLocalConstantBooleanvEXT)( GLuint id, GLenum value, GLboolean *data );
void qemu_glGetLocalConstantBooleanvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetLocalConstantFloatvEXT)( GLuint id, GLenum value, GLfloat *data );
void qemu_glGetLocalConstantFloatvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetLocalConstantIntegervEXT)( GLuint id, GLenum value, GLint *data );
void qemu_glGetLocalConstantIntegervEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetMapAttribParameterfvNV)( GLenum target, GLuint index, GLenum pname, GLfloat *params );
void qemu_glGetMapAttribParameterfvNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetMapAttribParameterivNV)( GLenum target, GLuint index, GLenum pname, GLint *params );
void qemu_glGetMapAttribParameterivNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetMapControlPointsNV)( GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, void *points );
void qemu_glGetMapControlPointsNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetMapParameterfvNV)( GLenum target, GLenum pname, GLfloat *params );
void qemu_glGetMapParameterfvNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetMapParameterivNV)( GLenum target, GLenum pname, GLint *params );
void qemu_glGetMapParameterivNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetMapxvOES)( GLenum target, GLenum query, GLfixed *v );
void qemu_glGetMapxvOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetMaterialxOES)( GLenum face, GLenum pname, GLfixed param );
void qemu_glGetMaterialxOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetMemoryObjectDetachedResourcesuivNV)( GLuint memory, GLenum pname, GLint first, GLsizei count, GLuint *params );
void qemu_glGetMemoryObjectDetachedResourcesuivNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetMemoryObjectParameterivEXT)( GLuint memoryObject, GLenum pname, GLint *params );
void qemu_glGetMemoryObjectParameterivEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetMinmax)( GLenum target, GLboolean reset, GLenum format, GLenum type, void *values );
void qemu_glGetMinmax(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetMinmaxEXT)( GLenum target, GLboolean reset, GLenum format, GLenum type, void *values );
void qemu_glGetMinmaxEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetMinmaxParameterfv)( GLenum target, GLenum pname, GLfloat *params );
void qemu_glGetMinmaxParameterfv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetMinmaxParameterfvEXT)( GLenum target, GLenum pname, GLfloat *params );
void qemu_glGetMinmaxParameterfvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetMinmaxParameteriv)( GLenum target, GLenum pname, GLint *params );
void qemu_glGetMinmaxParameteriv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetMinmaxParameterivEXT)( GLenum target, GLenum pname, GLint *params );
void qemu_glGetMinmaxParameterivEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetMultiTexEnvfvEXT)( GLenum texunit, GLenum target, GLenum pname, GLfloat *params );
void qemu_glGetMultiTexEnvfvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetMultiTexEnvivEXT)( GLenum texunit, GLenum target, GLenum pname, GLint *params );
void qemu_glGetMultiTexEnvivEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetMultiTexGendvEXT)( GLenum texunit, GLenum coord, GLenum pname, GLdouble *params );
void qemu_glGetMultiTexGendvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetMultiTexGenfvEXT)( GLenum texunit, GLenum coord, GLenum pname, GLfloat *params );
void qemu_glGetMultiTexGenfvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetMultiTexGenivEXT)( GLenum texunit, GLenum coord, GLenum pname, GLint *params );
void qemu_glGetMultiTexGenivEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetMultiTexImageEXT)( GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, void *pixels );
void qemu_glGetMultiTexImageEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetMultiTexLevelParameterfvEXT)( GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat *params );
void qemu_glGetMultiTexLevelParameterfvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetMultiTexLevelParameterivEXT)( GLenum texunit, GLenum target, GLint level, GLenum pname, GLint *params );
void qemu_glGetMultiTexLevelParameterivEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetMultiTexParameterIivEXT)( GLenum texunit, GLenum target, GLenum pname, GLint *params );
void qemu_glGetMultiTexParameterIivEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetMultiTexParameterIuivEXT)( GLenum texunit, GLenum target, GLenum pname, GLuint *params );
void qemu_glGetMultiTexParameterIuivEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetMultiTexParameterfvEXT)( GLenum texunit, GLenum target, GLenum pname, GLfloat *params );
void qemu_glGetMultiTexParameterfvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetMultiTexParameterivEXT)( GLenum texunit, GLenum target, GLenum pname, GLint *params );
void qemu_glGetMultiTexParameterivEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetMultisamplefv)( GLenum pname, GLuint index, GLfloat *val );
void qemu_glGetMultisamplefv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetMultisamplefvNV)( GLenum pname, GLuint index, GLfloat *val );
void qemu_glGetMultisamplefvNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetNamedBufferParameteri64v)( GLuint buffer, GLenum pname, GLint64 *params );
void qemu_glGetNamedBufferParameteri64v(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetNamedBufferParameteriv)( GLuint buffer, GLenum pname, GLint *params );
void qemu_glGetNamedBufferParameteriv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetNamedBufferParameterivEXT)( GLuint buffer, GLenum pname, GLint *params );
void qemu_glGetNamedBufferParameterivEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetNamedBufferParameterui64vNV)( GLuint buffer, GLenum pname, GLuint64EXT *params );
void qemu_glGetNamedBufferParameterui64vNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetNamedBufferPointerv)( GLuint buffer, GLenum pname, void **params );
void qemu_glGetNamedBufferPointerv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetNamedBufferPointervEXT)( GLuint buffer, GLenum pname, void **params );
void qemu_glGetNamedBufferPointervEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetNamedBufferSubData)( GLuint buffer, GLintptr offset, GLsizeiptr size, void *data );
void qemu_glGetNamedBufferSubData(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetNamedBufferSubDataEXT)( GLuint buffer, GLintptr offset, GLsizeiptr size, void *data );
void qemu_glGetNamedBufferSubDataEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetNamedFramebufferAttachmentParameteriv)( GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params );
void qemu_glGetNamedFramebufferAttachmentParameteriv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetNamedFramebufferAttachmentParameterivEXT)( GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params );
void qemu_glGetNamedFramebufferAttachmentParameterivEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetNamedFramebufferParameterfvAMD)( GLuint framebuffer, GLenum pname, GLuint numsamples, GLuint pixelindex, GLsizei size, GLfloat *values );
void qemu_glGetNamedFramebufferParameterfvAMD(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetNamedFramebufferParameteriv)( GLuint framebuffer, GLenum pname, GLint *param );
void qemu_glGetNamedFramebufferParameteriv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetNamedFramebufferParameterivEXT)( GLuint framebuffer, GLenum pname, GLint *params );
void qemu_glGetNamedFramebufferParameterivEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetNamedProgramLocalParameterIivEXT)( GLuint program, GLenum target, GLuint index, GLint *params );
void qemu_glGetNamedProgramLocalParameterIivEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetNamedProgramLocalParameterIuivEXT)( GLuint program, GLenum target, GLuint index, GLuint *params );
void qemu_glGetNamedProgramLocalParameterIuivEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetNamedProgramLocalParameterdvEXT)( GLuint program, GLenum target, GLuint index, GLdouble *params );
void qemu_glGetNamedProgramLocalParameterdvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetNamedProgramLocalParameterfvEXT)( GLuint program, GLenum target, GLuint index, GLfloat *params );
void qemu_glGetNamedProgramLocalParameterfvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetNamedProgramStringEXT)( GLuint program, GLenum target, GLenum pname, void *string );
void qemu_glGetNamedProgramStringEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetNamedProgramivEXT)( GLuint program, GLenum target, GLenum pname, GLint *params );
void qemu_glGetNamedProgramivEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetNamedRenderbufferParameteriv)( GLuint renderbuffer, GLenum pname, GLint *params );
void qemu_glGetNamedRenderbufferParameteriv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetNamedRenderbufferParameterivEXT)( GLuint renderbuffer, GLenum pname, GLint *params );
void qemu_glGetNamedRenderbufferParameterivEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetNamedStringARB)( GLint namelen, const GLchar *name, GLsizei bufSize, GLint *stringlen, GLchar *string );
void qemu_glGetNamedStringARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetNamedStringivARB)( GLint namelen, const GLchar *name, GLenum pname, GLint *params );
void qemu_glGetNamedStringivARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetNextPerfQueryIdINTEL)( GLuint queryId, GLuint *nextQueryId );
void qemu_glGetNextPerfQueryIdINTEL(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetObjectBufferfvATI)( GLuint buffer, GLenum pname, GLfloat *params );
void qemu_glGetObjectBufferfvATI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetObjectBufferivATI)( GLuint buffer, GLenum pname, GLint *params );
void qemu_glGetObjectBufferivATI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetObjectLabel)( GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label );
void qemu_glGetObjectLabel(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetObjectLabelEXT)( GLenum type, GLuint object, GLsizei bufSize, GLsizei *length, GLchar *label );
void qemu_glGetObjectLabelEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetObjectParameterfvARB)( GLhandleARB obj, GLenum pname, GLfloat *params );
void qemu_glGetObjectParameterfvARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetObjectParameterivAPPLE)( GLenum objectType, GLuint name, GLenum pname, GLint *params );
void qemu_glGetObjectParameterivAPPLE(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetObjectParameterivARB)( GLhandleARB obj, GLenum pname, GLint *params );
void qemu_glGetObjectParameterivARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetObjectPtrLabel)( const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label );
void qemu_glGetObjectPtrLabel(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetOcclusionQueryivNV)( GLuint id, GLenum pname, GLint *params );
void qemu_glGetOcclusionQueryivNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetOcclusionQueryuivNV)( GLuint id, GLenum pname, GLuint *params );
void qemu_glGetOcclusionQueryuivNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetPathColorGenfvNV)( GLenum color, GLenum pname, GLfloat *value );
void qemu_glGetPathColorGenfvNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetPathColorGenivNV)( GLenum color, GLenum pname, GLint *value );
void qemu_glGetPathColorGenivNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetPathCommandsNV)( GLuint path, GLubyte *commands );
void qemu_glGetPathCommandsNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetPathCoordsNV)( GLuint path, GLfloat *coords );
void qemu_glGetPathCoordsNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetPathDashArrayNV)( GLuint path, GLfloat *dashArray );
void qemu_glGetPathDashArrayNV(struct qemu_syscall *call);
GLfloat    (WINE_GLAPI *p_glGetPathLengthNV)( GLuint path, GLsizei startSegment, GLsizei numSegments );
void qemu_glGetPathLengthNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetPathMetricRangeNV)( GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat *metrics );
void qemu_glGetPathMetricRangeNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetPathMetricsNV)( GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics );
void qemu_glGetPathMetricsNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetPathParameterfvNV)( GLuint path, GLenum pname, GLfloat *value );
void qemu_glGetPathParameterfvNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetPathParameterivNV)( GLuint path, GLenum pname, GLint *value );
void qemu_glGetPathParameterivNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetPathSpacingNV)( GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing );
void qemu_glGetPathSpacingNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetPathTexGenfvNV)( GLenum texCoordSet, GLenum pname, GLfloat *value );
void qemu_glGetPathTexGenfvNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetPathTexGenivNV)( GLenum texCoordSet, GLenum pname, GLint *value );
void qemu_glGetPathTexGenivNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetPerfCounterInfoINTEL)( GLuint queryId, GLuint counterId, GLuint counterNameLength, GLchar *counterName, GLuint counterDescLength, GLchar *counterDesc, GLuint *counterOffset, GLuint *counterDataSize, GLuint *counterTypeEnum, GLuint *counterDataTypeEnum, GLuint64 *rawCounterMaxValue );
void qemu_glGetPerfCounterInfoINTEL(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetPerfMonitorCounterDataAMD)( GLuint monitor, GLenum pname, GLsizei dataSize, GLuint *data, GLint *bytesWritten );
void qemu_glGetPerfMonitorCounterDataAMD(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetPerfMonitorCounterInfoAMD)( GLuint group, GLuint counter, GLenum pname, void *data );
void qemu_glGetPerfMonitorCounterInfoAMD(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetPerfMonitorCounterStringAMD)( GLuint group, GLuint counter, GLsizei bufSize, GLsizei *length, GLchar *counterString );
void qemu_glGetPerfMonitorCounterStringAMD(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetPerfMonitorCountersAMD)( GLuint group, GLint *numCounters, GLint *maxActiveCounters, GLsizei counterSize, GLuint *counters );
void qemu_glGetPerfMonitorCountersAMD(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetPerfMonitorGroupStringAMD)( GLuint group, GLsizei bufSize, GLsizei *length, GLchar *groupString );
void qemu_glGetPerfMonitorGroupStringAMD(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetPerfMonitorGroupsAMD)( GLint *numGroups, GLsizei groupsSize, GLuint *groups );
void qemu_glGetPerfMonitorGroupsAMD(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetPerfQueryDataINTEL)( GLuint queryHandle, GLuint flags, GLsizei dataSize, void *data, GLuint *bytesWritten );
void qemu_glGetPerfQueryDataINTEL(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetPerfQueryIdByNameINTEL)( GLchar *queryName, GLuint *queryId );
void qemu_glGetPerfQueryIdByNameINTEL(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetPerfQueryInfoINTEL)( GLuint queryId, GLuint queryNameLength, GLchar *queryName, GLuint *dataSize, GLuint *noCounters, GLuint *noInstances, GLuint *capsMask );
void qemu_glGetPerfQueryInfoINTEL(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetPixelMapxv)( GLenum map, GLint size, GLfixed *values );
void qemu_glGetPixelMapxv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetPixelTexGenParameterfvSGIS)( GLenum pname, GLfloat *params );
void qemu_glGetPixelTexGenParameterfvSGIS(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetPixelTexGenParameterivSGIS)( GLenum pname, GLint *params );
void qemu_glGetPixelTexGenParameterivSGIS(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetPixelTransformParameterfvEXT)( GLenum target, GLenum pname, GLfloat *params );
void qemu_glGetPixelTransformParameterfvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetPixelTransformParameterivEXT)( GLenum target, GLenum pname, GLint *params );
void qemu_glGetPixelTransformParameterivEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetPointerIndexedvEXT)( GLenum target, GLuint index, void **data );
void qemu_glGetPointerIndexedvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetPointeri_vEXT)( GLenum pname, GLuint index, void **params );
void qemu_glGetPointeri_vEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetPointervEXT)( GLenum pname, void **params );
void qemu_glGetPointervEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetProgramBinary)( GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary );
void qemu_glGetProgramBinary(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetProgramEnvParameterIivNV)( GLenum target, GLuint index, GLint *params );
void qemu_glGetProgramEnvParameterIivNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetProgramEnvParameterIuivNV)( GLenum target, GLuint index, GLuint *params );
void qemu_glGetProgramEnvParameterIuivNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetProgramEnvParameterdvARB)( GLenum target, GLuint index, GLdouble *params );
void qemu_glGetProgramEnvParameterdvARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetProgramEnvParameterfvARB)( GLenum target, GLuint index, GLfloat *params );
void qemu_glGetProgramEnvParameterfvARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetProgramInfoLog)( GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog );
void qemu_glGetProgramInfoLog(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetProgramInterfaceiv)( GLuint program, GLenum programInterface, GLenum pname, GLint *params );
void qemu_glGetProgramInterfaceiv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetProgramLocalParameterIivNV)( GLenum target, GLuint index, GLint *params );
void qemu_glGetProgramLocalParameterIivNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetProgramLocalParameterIuivNV)( GLenum target, GLuint index, GLuint *params );
void qemu_glGetProgramLocalParameterIuivNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetProgramLocalParameterdvARB)( GLenum target, GLuint index, GLdouble *params );
void qemu_glGetProgramLocalParameterdvARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetProgramLocalParameterfvARB)( GLenum target, GLuint index, GLfloat *params );
void qemu_glGetProgramLocalParameterfvARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetProgramNamedParameterdvNV)( GLuint id, GLsizei len, const GLubyte *name, GLdouble *params );
void qemu_glGetProgramNamedParameterdvNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetProgramNamedParameterfvNV)( GLuint id, GLsizei len, const GLubyte *name, GLfloat *params );
void qemu_glGetProgramNamedParameterfvNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetProgramParameterdvNV)( GLenum target, GLuint index, GLenum pname, GLdouble *params );
void qemu_glGetProgramParameterdvNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetProgramParameterfvNV)( GLenum target, GLuint index, GLenum pname, GLfloat *params );
void qemu_glGetProgramParameterfvNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetProgramPipelineInfoLog)( GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog );
void qemu_glGetProgramPipelineInfoLog(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetProgramPipelineiv)( GLuint pipeline, GLenum pname, GLint *params );
void qemu_glGetProgramPipelineiv(struct qemu_syscall *call);
GLuint     (WINE_GLAPI *p_glGetProgramResourceIndex)( GLuint program, GLenum programInterface, const GLchar *name );
void qemu_glGetProgramResourceIndex(struct qemu_syscall *call);
GLint      (WINE_GLAPI *p_glGetProgramResourceLocation)( GLuint program, GLenum programInterface, const GLchar *name );
void qemu_glGetProgramResourceLocation(struct qemu_syscall *call);
GLint      (WINE_GLAPI *p_glGetProgramResourceLocationIndex)( GLuint program, GLenum programInterface, const GLchar *name );
void qemu_glGetProgramResourceLocationIndex(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetProgramResourceName)( GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name );
void qemu_glGetProgramResourceName(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetProgramResourcefvNV)( GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei count, GLsizei *length, GLfloat *params );
void qemu_glGetProgramResourcefvNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetProgramResourceiv)( GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei count, GLsizei *length, GLint *params );
void qemu_glGetProgramResourceiv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetProgramStageiv)( GLuint program, GLenum shadertype, GLenum pname, GLint *values );
void qemu_glGetProgramStageiv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetProgramStringARB)( GLenum target, GLenum pname, void *string );
void qemu_glGetProgramStringARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetProgramStringNV)( GLuint id, GLenum pname, GLubyte *program );
void qemu_glGetProgramStringNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetProgramSubroutineParameteruivNV)( GLenum target, GLuint index, GLuint *param );
void qemu_glGetProgramSubroutineParameteruivNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetProgramiv)( GLuint program, GLenum pname, GLint *params );
void qemu_glGetProgramiv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetProgramivARB)( GLenum target, GLenum pname, GLint *params );
void qemu_glGetProgramivARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetProgramivNV)( GLuint id, GLenum pname, GLint *params );
void qemu_glGetProgramivNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetQueryBufferObjecti64v)( GLuint id, GLuint buffer, GLenum pname, GLintptr offset );
void qemu_glGetQueryBufferObjecti64v(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetQueryBufferObjectiv)( GLuint id, GLuint buffer, GLenum pname, GLintptr offset );
void qemu_glGetQueryBufferObjectiv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetQueryBufferObjectui64v)( GLuint id, GLuint buffer, GLenum pname, GLintptr offset );
void qemu_glGetQueryBufferObjectui64v(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetQueryBufferObjectuiv)( GLuint id, GLuint buffer, GLenum pname, GLintptr offset );
void qemu_glGetQueryBufferObjectuiv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetQueryIndexediv)( GLenum target, GLuint index, GLenum pname, GLint *params );
void qemu_glGetQueryIndexediv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetQueryObjecti64v)( GLuint id, GLenum pname, GLint64 *params );
void qemu_glGetQueryObjecti64v(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetQueryObjecti64vEXT)( GLuint id, GLenum pname, GLint64 *params );
void qemu_glGetQueryObjecti64vEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetQueryObjectiv)( GLuint id, GLenum pname, GLint *params );
void qemu_glGetQueryObjectiv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetQueryObjectivARB)( GLuint id, GLenum pname, GLint *params );
void qemu_glGetQueryObjectivARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetQueryObjectui64v)( GLuint id, GLenum pname, GLuint64 *params );
void qemu_glGetQueryObjectui64v(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetQueryObjectui64vEXT)( GLuint id, GLenum pname, GLuint64 *params );
void qemu_glGetQueryObjectui64vEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetQueryObjectuiv)( GLuint id, GLenum pname, GLuint *params );
void qemu_glGetQueryObjectuiv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetQueryObjectuivARB)( GLuint id, GLenum pname, GLuint *params );
void qemu_glGetQueryObjectuivARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetQueryiv)( GLenum target, GLenum pname, GLint *params );
void qemu_glGetQueryiv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetQueryivARB)( GLenum target, GLenum pname, GLint *params );
void qemu_glGetQueryivARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetRenderbufferParameteriv)( GLenum target, GLenum pname, GLint *params );
void qemu_glGetRenderbufferParameteriv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetRenderbufferParameterivEXT)( GLenum target, GLenum pname, GLint *params );
void qemu_glGetRenderbufferParameterivEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetSamplerParameterIiv)( GLuint sampler, GLenum pname, GLint *params );
void qemu_glGetSamplerParameterIiv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetSamplerParameterIuiv)( GLuint sampler, GLenum pname, GLuint *params );
void qemu_glGetSamplerParameterIuiv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetSamplerParameterfv)( GLuint sampler, GLenum pname, GLfloat *params );
void qemu_glGetSamplerParameterfv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetSamplerParameteriv)( GLuint sampler, GLenum pname, GLint *params );
void qemu_glGetSamplerParameteriv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetSemaphoreParameterui64vEXT)( GLuint semaphore, GLenum pname, GLuint64 *params );
void qemu_glGetSemaphoreParameterui64vEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetSeparableFilter)( GLenum target, GLenum format, GLenum type, void *row, void *column, void *span );
void qemu_glGetSeparableFilter(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetSeparableFilterEXT)( GLenum target, GLenum format, GLenum type, void *row, void *column, void *span );
void qemu_glGetSeparableFilterEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetShaderInfoLog)( GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog );
void qemu_glGetShaderInfoLog(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetShaderPrecisionFormat)( GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision );
void qemu_glGetShaderPrecisionFormat(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetShaderSource)( GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source );
void qemu_glGetShaderSource(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetShaderSourceARB)( GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *source );
void qemu_glGetShaderSourceARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetShaderiv)( GLuint shader, GLenum pname, GLint *params );
void qemu_glGetShaderiv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetShadingRateImagePaletteNV)( GLuint viewport, GLuint entry, GLenum *rate );
void qemu_glGetShadingRateImagePaletteNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetShadingRateSampleLocationivNV)( GLenum rate, GLuint samples, GLuint index, GLint *location );
void qemu_glGetShadingRateSampleLocationivNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetSharpenTexFuncSGIS)( GLenum target, GLfloat *points );
void qemu_glGetSharpenTexFuncSGIS(struct qemu_syscall *call);
GLushort   (WINE_GLAPI *p_glGetStageIndexNV)( GLenum shadertype );
void qemu_glGetStageIndexNV(struct qemu_syscall *call);
const GLubyte * (WINE_GLAPI *p_glGetStringi)( GLenum name, GLuint index );
void qemu_glGetStringi(struct qemu_syscall *call);
GLuint     (WINE_GLAPI *p_glGetSubroutineIndex)( GLuint program, GLenum shadertype, const GLchar *name );
void qemu_glGetSubroutineIndex(struct qemu_syscall *call);
GLint      (WINE_GLAPI *p_glGetSubroutineUniformLocation)( GLuint program, GLenum shadertype, const GLchar *name );
void qemu_glGetSubroutineUniformLocation(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetSynciv)( GLsync sync, GLenum pname, GLsizei count, GLsizei *length, GLint *values );
void qemu_glGetSynciv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetTexBumpParameterfvATI)( GLenum pname, GLfloat *param );
void qemu_glGetTexBumpParameterfvATI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetTexBumpParameterivATI)( GLenum pname, GLint *param );
void qemu_glGetTexBumpParameterivATI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetTexEnvxvOES)( GLenum target, GLenum pname, GLfixed *params );
void qemu_glGetTexEnvxvOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetTexFilterFuncSGIS)( GLenum target, GLenum filter, GLfloat *weights );
void qemu_glGetTexFilterFuncSGIS(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetTexGenxvOES)( GLenum coord, GLenum pname, GLfixed *params );
void qemu_glGetTexGenxvOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetTexLevelParameterxvOES)( GLenum target, GLint level, GLenum pname, GLfixed *params );
void qemu_glGetTexLevelParameterxvOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetTexParameterIiv)( GLenum target, GLenum pname, GLint *params );
void qemu_glGetTexParameterIiv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetTexParameterIivEXT)( GLenum target, GLenum pname, GLint *params );
void qemu_glGetTexParameterIivEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetTexParameterIuiv)( GLenum target, GLenum pname, GLuint *params );
void qemu_glGetTexParameterIuiv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetTexParameterIuivEXT)( GLenum target, GLenum pname, GLuint *params );
void qemu_glGetTexParameterIuivEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetTexParameterPointervAPPLE)( GLenum target, GLenum pname, void **params );
void qemu_glGetTexParameterPointervAPPLE(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetTexParameterxvOES)( GLenum target, GLenum pname, GLfixed *params );
void qemu_glGetTexParameterxvOES(struct qemu_syscall *call);
GLuint64   (WINE_GLAPI *p_glGetTextureHandleARB)( GLuint texture );
void qemu_glGetTextureHandleARB(struct qemu_syscall *call);
GLuint64   (WINE_GLAPI *p_glGetTextureHandleNV)( GLuint texture );
void qemu_glGetTextureHandleNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetTextureImage)( GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels );
void qemu_glGetTextureImage(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetTextureImageEXT)( GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, void *pixels );
void qemu_glGetTextureImageEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetTextureLevelParameterfv)( GLuint texture, GLint level, GLenum pname, GLfloat *params );
void qemu_glGetTextureLevelParameterfv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetTextureLevelParameterfvEXT)( GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat *params );
void qemu_glGetTextureLevelParameterfvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetTextureLevelParameteriv)( GLuint texture, GLint level, GLenum pname, GLint *params );
void qemu_glGetTextureLevelParameteriv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetTextureLevelParameterivEXT)( GLuint texture, GLenum target, GLint level, GLenum pname, GLint *params );
void qemu_glGetTextureLevelParameterivEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetTextureParameterIiv)( GLuint texture, GLenum pname, GLint *params );
void qemu_glGetTextureParameterIiv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetTextureParameterIivEXT)( GLuint texture, GLenum target, GLenum pname, GLint *params );
void qemu_glGetTextureParameterIivEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetTextureParameterIuiv)( GLuint texture, GLenum pname, GLuint *params );
void qemu_glGetTextureParameterIuiv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetTextureParameterIuivEXT)( GLuint texture, GLenum target, GLenum pname, GLuint *params );
void qemu_glGetTextureParameterIuivEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetTextureParameterfv)( GLuint texture, GLenum pname, GLfloat *params );
void qemu_glGetTextureParameterfv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetTextureParameterfvEXT)( GLuint texture, GLenum target, GLenum pname, GLfloat *params );
void qemu_glGetTextureParameterfvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetTextureParameteriv)( GLuint texture, GLenum pname, GLint *params );
void qemu_glGetTextureParameteriv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetTextureParameterivEXT)( GLuint texture, GLenum target, GLenum pname, GLint *params );
void qemu_glGetTextureParameterivEXT(struct qemu_syscall *call);
GLuint64   (WINE_GLAPI *p_glGetTextureSamplerHandleARB)( GLuint texture, GLuint sampler );
void qemu_glGetTextureSamplerHandleARB(struct qemu_syscall *call);
GLuint64   (WINE_GLAPI *p_glGetTextureSamplerHandleNV)( GLuint texture, GLuint sampler );
void qemu_glGetTextureSamplerHandleNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetTextureSubImage)( GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void *pixels );
void qemu_glGetTextureSubImage(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetTrackMatrixivNV)( GLenum target, GLuint address, GLenum pname, GLint *params );
void qemu_glGetTrackMatrixivNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetTransformFeedbackVarying)( GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name );
void qemu_glGetTransformFeedbackVarying(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetTransformFeedbackVaryingEXT)( GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name );
void qemu_glGetTransformFeedbackVaryingEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetTransformFeedbackVaryingNV)( GLuint program, GLuint index, GLint *location );
void qemu_glGetTransformFeedbackVaryingNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetTransformFeedbacki64_v)( GLuint xfb, GLenum pname, GLuint index, GLint64 *param );
void qemu_glGetTransformFeedbacki64_v(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetTransformFeedbacki_v)( GLuint xfb, GLenum pname, GLuint index, GLint *param );
void qemu_glGetTransformFeedbacki_v(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetTransformFeedbackiv)( GLuint xfb, GLenum pname, GLint *param );
void qemu_glGetTransformFeedbackiv(struct qemu_syscall *call);
GLuint     (WINE_GLAPI *p_glGetUniformBlockIndex)( GLuint program, const GLchar *uniformBlockName );
void qemu_glGetUniformBlockIndex(struct qemu_syscall *call);
GLint      (WINE_GLAPI *p_glGetUniformBufferSizeEXT)( GLuint program, GLint location );
void qemu_glGetUniformBufferSizeEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetUniformIndices)( GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices );
void qemu_glGetUniformIndices(struct qemu_syscall *call);
GLint      (WINE_GLAPI *p_glGetUniformLocation)( GLuint program, const GLchar *name );
void qemu_glGetUniformLocation(struct qemu_syscall *call);
GLint      (WINE_GLAPI *p_glGetUniformLocationARB)( GLhandleARB programObj, const GLcharARB *name );
void qemu_glGetUniformLocationARB(struct qemu_syscall *call);
GLintptr   (WINE_GLAPI *p_glGetUniformOffsetEXT)( GLuint program, GLint location );
void qemu_glGetUniformOffsetEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetUniformSubroutineuiv)( GLenum shadertype, GLint location, GLuint *params );
void qemu_glGetUniformSubroutineuiv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetUniformdv)( GLuint program, GLint location, GLdouble *params );
void qemu_glGetUniformdv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetUniformfv)( GLuint program, GLint location, GLfloat *params );
void qemu_glGetUniformfv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetUniformfvARB)( GLhandleARB programObj, GLint location, GLfloat *params );
void qemu_glGetUniformfvARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetUniformi64vARB)( GLuint program, GLint location, GLint64 *params );
void qemu_glGetUniformi64vARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetUniformi64vNV)( GLuint program, GLint location, GLint64EXT *params );
void qemu_glGetUniformi64vNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetUniformiv)( GLuint program, GLint location, GLint *params );
void qemu_glGetUniformiv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetUniformivARB)( GLhandleARB programObj, GLint location, GLint *params );
void qemu_glGetUniformivARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetUniformui64vARB)( GLuint program, GLint location, GLuint64 *params );
void qemu_glGetUniformui64vARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetUniformui64vNV)( GLuint program, GLint location, GLuint64EXT *params );
void qemu_glGetUniformui64vNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetUniformuiv)( GLuint program, GLint location, GLuint *params );
void qemu_glGetUniformuiv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetUniformuivEXT)( GLuint program, GLint location, GLuint *params );
void qemu_glGetUniformuivEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetUnsignedBytei_vEXT)( GLenum target, GLuint index, GLubyte *data );
void qemu_glGetUnsignedBytei_vEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetUnsignedBytevEXT)( GLenum pname, GLubyte *data );
void qemu_glGetUnsignedBytevEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetVariantArrayObjectfvATI)( GLuint id, GLenum pname, GLfloat *params );
void qemu_glGetVariantArrayObjectfvATI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetVariantArrayObjectivATI)( GLuint id, GLenum pname, GLint *params );
void qemu_glGetVariantArrayObjectivATI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetVariantBooleanvEXT)( GLuint id, GLenum value, GLboolean *data );
void qemu_glGetVariantBooleanvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetVariantFloatvEXT)( GLuint id, GLenum value, GLfloat *data );
void qemu_glGetVariantFloatvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetVariantIntegervEXT)( GLuint id, GLenum value, GLint *data );
void qemu_glGetVariantIntegervEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetVariantPointervEXT)( GLuint id, GLenum value, void **data );
void qemu_glGetVariantPointervEXT(struct qemu_syscall *call);
GLint      (WINE_GLAPI *p_glGetVaryingLocationNV)( GLuint program, const GLchar *name );
void qemu_glGetVaryingLocationNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetVertexArrayIndexed64iv)( GLuint vaobj, GLuint index, GLenum pname, GLint64 *param );
void qemu_glGetVertexArrayIndexed64iv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetVertexArrayIndexediv)( GLuint vaobj, GLuint index, GLenum pname, GLint *param );
void qemu_glGetVertexArrayIndexediv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetVertexArrayIntegeri_vEXT)( GLuint vaobj, GLuint index, GLenum pname, GLint *param );
void qemu_glGetVertexArrayIntegeri_vEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetVertexArrayIntegervEXT)( GLuint vaobj, GLenum pname, GLint *param );
void qemu_glGetVertexArrayIntegervEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetVertexArrayPointeri_vEXT)( GLuint vaobj, GLuint index, GLenum pname, void **param );
void qemu_glGetVertexArrayPointeri_vEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetVertexArrayPointervEXT)( GLuint vaobj, GLenum pname, void **param );
void qemu_glGetVertexArrayPointervEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetVertexArrayiv)( GLuint vaobj, GLenum pname, GLint *param );
void qemu_glGetVertexArrayiv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetVertexAttribArrayObjectfvATI)( GLuint index, GLenum pname, GLfloat *params );
void qemu_glGetVertexAttribArrayObjectfvATI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetVertexAttribArrayObjectivATI)( GLuint index, GLenum pname, GLint *params );
void qemu_glGetVertexAttribArrayObjectivATI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetVertexAttribIiv)( GLuint index, GLenum pname, GLint *params );
void qemu_glGetVertexAttribIiv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetVertexAttribIivEXT)( GLuint index, GLenum pname, GLint *params );
void qemu_glGetVertexAttribIivEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetVertexAttribIuiv)( GLuint index, GLenum pname, GLuint *params );
void qemu_glGetVertexAttribIuiv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetVertexAttribIuivEXT)( GLuint index, GLenum pname, GLuint *params );
void qemu_glGetVertexAttribIuivEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetVertexAttribLdv)( GLuint index, GLenum pname, GLdouble *params );
void qemu_glGetVertexAttribLdv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetVertexAttribLdvEXT)( GLuint index, GLenum pname, GLdouble *params );
void qemu_glGetVertexAttribLdvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetVertexAttribLi64vNV)( GLuint index, GLenum pname, GLint64EXT *params );
void qemu_glGetVertexAttribLi64vNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetVertexAttribLui64vARB)( GLuint index, GLenum pname, GLuint64EXT *params );
void qemu_glGetVertexAttribLui64vARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetVertexAttribLui64vNV)( GLuint index, GLenum pname, GLuint64EXT *params );
void qemu_glGetVertexAttribLui64vNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetVertexAttribPointerv)( GLuint index, GLenum pname, void **pointer );
void qemu_glGetVertexAttribPointerv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetVertexAttribPointervARB)( GLuint index, GLenum pname, void **pointer );
void qemu_glGetVertexAttribPointervARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetVertexAttribPointervNV)( GLuint index, GLenum pname, void **pointer );
void qemu_glGetVertexAttribPointervNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetVertexAttribdv)( GLuint index, GLenum pname, GLdouble *params );
void qemu_glGetVertexAttribdv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetVertexAttribdvARB)( GLuint index, GLenum pname, GLdouble *params );
void qemu_glGetVertexAttribdvARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetVertexAttribdvNV)( GLuint index, GLenum pname, GLdouble *params );
void qemu_glGetVertexAttribdvNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetVertexAttribfv)( GLuint index, GLenum pname, GLfloat *params );
void qemu_glGetVertexAttribfv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetVertexAttribfvARB)( GLuint index, GLenum pname, GLfloat *params );
void qemu_glGetVertexAttribfvARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetVertexAttribfvNV)( GLuint index, GLenum pname, GLfloat *params );
void qemu_glGetVertexAttribfvNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetVertexAttribiv)( GLuint index, GLenum pname, GLint *params );
void qemu_glGetVertexAttribiv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetVertexAttribivARB)( GLuint index, GLenum pname, GLint *params );
void qemu_glGetVertexAttribivARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetVertexAttribivNV)( GLuint index, GLenum pname, GLint *params );
void qemu_glGetVertexAttribivNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetVideoCaptureStreamdvNV)( GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble *params );
void qemu_glGetVideoCaptureStreamdvNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetVideoCaptureStreamfvNV)( GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat *params );
void qemu_glGetVideoCaptureStreamfvNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetVideoCaptureStreamivNV)( GLuint video_capture_slot, GLuint stream, GLenum pname, GLint *params );
void qemu_glGetVideoCaptureStreamivNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetVideoCaptureivNV)( GLuint video_capture_slot, GLenum pname, GLint *params );
void qemu_glGetVideoCaptureivNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetVideoi64vNV)( GLuint video_slot, GLenum pname, GLint64EXT *params );
void qemu_glGetVideoi64vNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetVideoivNV)( GLuint video_slot, GLenum pname, GLint *params );
void qemu_glGetVideoivNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetVideoui64vNV)( GLuint video_slot, GLenum pname, GLuint64EXT *params );
void qemu_glGetVideoui64vNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetVideouivNV)( GLuint video_slot, GLenum pname, GLuint *params );
void qemu_glGetVideouivNV(struct qemu_syscall *call);
GLVULKANPROCNV (WINE_GLAPI *p_glGetVkProcAddrNV)( const GLchar *name );
void qemu_glGetVkProcAddrNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetnColorTable)( GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *table );
void qemu_glGetnColorTable(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetnColorTableARB)( GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *table );
void qemu_glGetnColorTableARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetnCompressedTexImage)( GLenum target, GLint lod, GLsizei bufSize, void *pixels );
void qemu_glGetnCompressedTexImage(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetnCompressedTexImageARB)( GLenum target, GLint lod, GLsizei bufSize, void *img );
void qemu_glGetnCompressedTexImageARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetnConvolutionFilter)( GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *image );
void qemu_glGetnConvolutionFilter(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetnConvolutionFilterARB)( GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *image );
void qemu_glGetnConvolutionFilterARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetnHistogram)( GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values );
void qemu_glGetnHistogram(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetnHistogramARB)( GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values );
void qemu_glGetnHistogramARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetnMapdv)( GLenum target, GLenum query, GLsizei bufSize, GLdouble *v );
void qemu_glGetnMapdv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetnMapdvARB)( GLenum target, GLenum query, GLsizei bufSize, GLdouble *v );
void qemu_glGetnMapdvARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetnMapfv)( GLenum target, GLenum query, GLsizei bufSize, GLfloat *v );
void qemu_glGetnMapfv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetnMapfvARB)( GLenum target, GLenum query, GLsizei bufSize, GLfloat *v );
void qemu_glGetnMapfvARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetnMapiv)( GLenum target, GLenum query, GLsizei bufSize, GLint *v );
void qemu_glGetnMapiv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetnMapivARB)( GLenum target, GLenum query, GLsizei bufSize, GLint *v );
void qemu_glGetnMapivARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetnMinmax)( GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values );
void qemu_glGetnMinmax(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetnMinmaxARB)( GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values );
void qemu_glGetnMinmaxARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetnPixelMapfv)( GLenum map, GLsizei bufSize, GLfloat *values );
void qemu_glGetnPixelMapfv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetnPixelMapfvARB)( GLenum map, GLsizei bufSize, GLfloat *values );
void qemu_glGetnPixelMapfvARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetnPixelMapuiv)( GLenum map, GLsizei bufSize, GLuint *values );
void qemu_glGetnPixelMapuiv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetnPixelMapuivARB)( GLenum map, GLsizei bufSize, GLuint *values );
void qemu_glGetnPixelMapuivARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetnPixelMapusv)( GLenum map, GLsizei bufSize, GLushort *values );
void qemu_glGetnPixelMapusv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetnPixelMapusvARB)( GLenum map, GLsizei bufSize, GLushort *values );
void qemu_glGetnPixelMapusvARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetnPolygonStipple)( GLsizei bufSize, GLubyte *pattern );
void qemu_glGetnPolygonStipple(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetnPolygonStippleARB)( GLsizei bufSize, GLubyte *pattern );
void qemu_glGetnPolygonStippleARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetnSeparableFilter)( GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void *row, GLsizei columnBufSize, void *column, void *span );
void qemu_glGetnSeparableFilter(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetnSeparableFilterARB)( GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void *row, GLsizei columnBufSize, void *column, void *span );
void qemu_glGetnSeparableFilterARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetnTexImage)( GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels );
void qemu_glGetnTexImage(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetnTexImageARB)( GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *img );
void qemu_glGetnTexImageARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetnUniformdv)( GLuint program, GLint location, GLsizei bufSize, GLdouble *params );
void qemu_glGetnUniformdv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetnUniformdvARB)( GLuint program, GLint location, GLsizei bufSize, GLdouble *params );
void qemu_glGetnUniformdvARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetnUniformfv)( GLuint program, GLint location, GLsizei bufSize, GLfloat *params );
void qemu_glGetnUniformfv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetnUniformfvARB)( GLuint program, GLint location, GLsizei bufSize, GLfloat *params );
void qemu_glGetnUniformfvARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetnUniformi64vARB)( GLuint program, GLint location, GLsizei bufSize, GLint64 *params );
void qemu_glGetnUniformi64vARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetnUniformiv)( GLuint program, GLint location, GLsizei bufSize, GLint *params );
void qemu_glGetnUniformiv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetnUniformivARB)( GLuint program, GLint location, GLsizei bufSize, GLint *params );
void qemu_glGetnUniformivARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetnUniformui64vARB)( GLuint program, GLint location, GLsizei bufSize, GLuint64 *params );
void qemu_glGetnUniformui64vARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetnUniformuiv)( GLuint program, GLint location, GLsizei bufSize, GLuint *params );
void qemu_glGetnUniformuiv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGetnUniformuivARB)( GLuint program, GLint location, GLsizei bufSize, GLuint *params );
void qemu_glGetnUniformuivARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGlobalAlphaFactorbSUN)( GLbyte factor );
void qemu_glGlobalAlphaFactorbSUN(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGlobalAlphaFactordSUN)( GLdouble factor );
void qemu_glGlobalAlphaFactordSUN(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGlobalAlphaFactorfSUN)( GLfloat factor );
void qemu_glGlobalAlphaFactorfSUN(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGlobalAlphaFactoriSUN)( GLint factor );
void qemu_glGlobalAlphaFactoriSUN(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGlobalAlphaFactorsSUN)( GLshort factor );
void qemu_glGlobalAlphaFactorsSUN(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGlobalAlphaFactorubSUN)( GLubyte factor );
void qemu_glGlobalAlphaFactorubSUN(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGlobalAlphaFactoruiSUN)( GLuint factor );
void qemu_glGlobalAlphaFactoruiSUN(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glGlobalAlphaFactorusSUN)( GLushort factor );
void qemu_glGlobalAlphaFactorusSUN(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glHintPGI)( GLenum target, GLint mode );
void qemu_glHintPGI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glHistogram)( GLenum target, GLsizei width, GLenum internalformat, GLboolean sink );
void qemu_glHistogram(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glHistogramEXT)( GLenum target, GLsizei width, GLenum internalformat, GLboolean sink );
void qemu_glHistogramEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glIglooInterfaceSGIX)( GLenum pname, const void *params );
void qemu_glIglooInterfaceSGIX(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glImageTransformParameterfHP)( GLenum target, GLenum pname, GLfloat param );
void qemu_glImageTransformParameterfHP(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glImageTransformParameterfvHP)( GLenum target, GLenum pname, const GLfloat *params );
void qemu_glImageTransformParameterfvHP(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glImageTransformParameteriHP)( GLenum target, GLenum pname, GLint param );
void qemu_glImageTransformParameteriHP(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glImageTransformParameterivHP)( GLenum target, GLenum pname, const GLint *params );
void qemu_glImageTransformParameterivHP(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glImportMemoryFdEXT)( GLuint memory, GLuint64 size, GLenum handleType, GLint fd );
void qemu_glImportMemoryFdEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glImportMemoryWin32HandleEXT)( GLuint memory, GLuint64 size, GLenum handleType, void *handle );
void qemu_glImportMemoryWin32HandleEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glImportMemoryWin32NameEXT)( GLuint memory, GLuint64 size, GLenum handleType, const void *name );
void qemu_glImportMemoryWin32NameEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glImportSemaphoreFdEXT)( GLuint semaphore, GLenum handleType, GLint fd );
void qemu_glImportSemaphoreFdEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glImportSemaphoreWin32HandleEXT)( GLuint semaphore, GLenum handleType, void *handle );
void qemu_glImportSemaphoreWin32HandleEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glImportSemaphoreWin32NameEXT)( GLuint semaphore, GLenum handleType, const void *name );
void qemu_glImportSemaphoreWin32NameEXT(struct qemu_syscall *call);
GLsync     (WINE_GLAPI *p_glImportSyncEXT)( GLenum external_sync_type, GLintptr external_sync, GLbitfield flags );
void qemu_glImportSyncEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glIndexFormatNV)( GLenum type, GLsizei stride );
void qemu_glIndexFormatNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glIndexFuncEXT)( GLenum func, GLclampf ref );
void qemu_glIndexFuncEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glIndexMaterialEXT)( GLenum face, GLenum mode );
void qemu_glIndexMaterialEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glIndexPointerEXT)( GLenum type, GLsizei stride, GLsizei count, const void *pointer );
void qemu_glIndexPointerEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glIndexPointerListIBM)( GLenum type, GLint stride, const void **pointer, GLint ptrstride );
void qemu_glIndexPointerListIBM(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glIndexxOES)( GLfixed component );
void qemu_glIndexxOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glIndexxvOES)( const GLfixed *component );
void qemu_glIndexxvOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glInsertComponentEXT)( GLuint res, GLuint src, GLuint num );
void qemu_glInsertComponentEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glInsertEventMarkerEXT)( GLsizei length, const GLchar *marker );
void qemu_glInsertEventMarkerEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glInstrumentsBufferSGIX)( GLsizei size, GLint *buffer );
void qemu_glInstrumentsBufferSGIX(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glInterpolatePathsNV)( GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight );
void qemu_glInterpolatePathsNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glInvalidateBufferData)( GLuint buffer );
void qemu_glInvalidateBufferData(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glInvalidateBufferSubData)( GLuint buffer, GLintptr offset, GLsizeiptr length );
void qemu_glInvalidateBufferSubData(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glInvalidateFramebuffer)( GLenum target, GLsizei numAttachments, const GLenum *attachments );
void qemu_glInvalidateFramebuffer(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glInvalidateNamedFramebufferData)( GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments );
void qemu_glInvalidateNamedFramebufferData(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glInvalidateNamedFramebufferSubData)( GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height );
void qemu_glInvalidateNamedFramebufferSubData(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glInvalidateSubFramebuffer)( GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height );
void qemu_glInvalidateSubFramebuffer(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glInvalidateTexImage)( GLuint texture, GLint level );
void qemu_glInvalidateTexImage(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glInvalidateTexSubImage)( GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth );
void qemu_glInvalidateTexSubImage(struct qemu_syscall *call);
GLboolean  (WINE_GLAPI *p_glIsAsyncMarkerSGIX)( GLuint marker );
void qemu_glIsAsyncMarkerSGIX(struct qemu_syscall *call);
GLboolean  (WINE_GLAPI *p_glIsBuffer)( GLuint buffer );
void qemu_glIsBuffer(struct qemu_syscall *call);
GLboolean  (WINE_GLAPI *p_glIsBufferARB)( GLuint buffer );
void qemu_glIsBufferARB(struct qemu_syscall *call);
GLboolean  (WINE_GLAPI *p_glIsBufferResidentNV)( GLenum target );
void qemu_glIsBufferResidentNV(struct qemu_syscall *call);
GLboolean  (WINE_GLAPI *p_glIsCommandListNV)( GLuint list );
void qemu_glIsCommandListNV(struct qemu_syscall *call);
GLboolean  (WINE_GLAPI *p_glIsEnabledIndexedEXT)( GLenum target, GLuint index );
void qemu_glIsEnabledIndexedEXT(struct qemu_syscall *call);
GLboolean  (WINE_GLAPI *p_glIsEnabledi)( GLenum target, GLuint index );
void qemu_glIsEnabledi(struct qemu_syscall *call);
GLboolean  (WINE_GLAPI *p_glIsFenceAPPLE)( GLuint fence );
void qemu_glIsFenceAPPLE(struct qemu_syscall *call);
GLboolean  (WINE_GLAPI *p_glIsFenceNV)( GLuint fence );
void qemu_glIsFenceNV(struct qemu_syscall *call);
GLboolean  (WINE_GLAPI *p_glIsFramebuffer)( GLuint framebuffer );
void qemu_glIsFramebuffer(struct qemu_syscall *call);
GLboolean  (WINE_GLAPI *p_glIsFramebufferEXT)( GLuint framebuffer );
void qemu_glIsFramebufferEXT(struct qemu_syscall *call);
GLboolean  (WINE_GLAPI *p_glIsImageHandleResidentARB)( GLuint64 handle );
void qemu_glIsImageHandleResidentARB(struct qemu_syscall *call);
GLboolean  (WINE_GLAPI *p_glIsImageHandleResidentNV)( GLuint64 handle );
void qemu_glIsImageHandleResidentNV(struct qemu_syscall *call);
GLboolean  (WINE_GLAPI *p_glIsMemoryObjectEXT)( GLuint memoryObject );
void qemu_glIsMemoryObjectEXT(struct qemu_syscall *call);
GLboolean  (WINE_GLAPI *p_glIsNameAMD)( GLenum identifier, GLuint name );
void qemu_glIsNameAMD(struct qemu_syscall *call);
GLboolean  (WINE_GLAPI *p_glIsNamedBufferResidentNV)( GLuint buffer );
void qemu_glIsNamedBufferResidentNV(struct qemu_syscall *call);
GLboolean  (WINE_GLAPI *p_glIsNamedStringARB)( GLint namelen, const GLchar *name );
void qemu_glIsNamedStringARB(struct qemu_syscall *call);
GLboolean  (WINE_GLAPI *p_glIsObjectBufferATI)( GLuint buffer );
void qemu_glIsObjectBufferATI(struct qemu_syscall *call);
GLboolean  (WINE_GLAPI *p_glIsOcclusionQueryNV)( GLuint id );
void qemu_glIsOcclusionQueryNV(struct qemu_syscall *call);
GLboolean  (WINE_GLAPI *p_glIsPathNV)( GLuint path );
void qemu_glIsPathNV(struct qemu_syscall *call);
GLboolean  (WINE_GLAPI *p_glIsPointInFillPathNV)( GLuint path, GLuint mask, GLfloat x, GLfloat y );
void qemu_glIsPointInFillPathNV(struct qemu_syscall *call);
GLboolean  (WINE_GLAPI *p_glIsPointInStrokePathNV)( GLuint path, GLfloat x, GLfloat y );
void qemu_glIsPointInStrokePathNV(struct qemu_syscall *call);
GLboolean  (WINE_GLAPI *p_glIsProgram)( GLuint program );
void qemu_glIsProgram(struct qemu_syscall *call);
GLboolean  (WINE_GLAPI *p_glIsProgramARB)( GLuint program );
void qemu_glIsProgramARB(struct qemu_syscall *call);
GLboolean  (WINE_GLAPI *p_glIsProgramNV)( GLuint id );
void qemu_glIsProgramNV(struct qemu_syscall *call);
GLboolean  (WINE_GLAPI *p_glIsProgramPipeline)( GLuint pipeline );
void qemu_glIsProgramPipeline(struct qemu_syscall *call);
GLboolean  (WINE_GLAPI *p_glIsQuery)( GLuint id );
void qemu_glIsQuery(struct qemu_syscall *call);
GLboolean  (WINE_GLAPI *p_glIsQueryARB)( GLuint id );
void qemu_glIsQueryARB(struct qemu_syscall *call);
GLboolean  (WINE_GLAPI *p_glIsRenderbuffer)( GLuint renderbuffer );
void qemu_glIsRenderbuffer(struct qemu_syscall *call);
GLboolean  (WINE_GLAPI *p_glIsRenderbufferEXT)( GLuint renderbuffer );
void qemu_glIsRenderbufferEXT(struct qemu_syscall *call);
GLboolean  (WINE_GLAPI *p_glIsSampler)( GLuint sampler );
void qemu_glIsSampler(struct qemu_syscall *call);
GLboolean  (WINE_GLAPI *p_glIsSemaphoreEXT)( GLuint semaphore );
void qemu_glIsSemaphoreEXT(struct qemu_syscall *call);
GLboolean  (WINE_GLAPI *p_glIsShader)( GLuint shader );
void qemu_glIsShader(struct qemu_syscall *call);
GLboolean  (WINE_GLAPI *p_glIsStateNV)( GLuint state );
void qemu_glIsStateNV(struct qemu_syscall *call);
GLboolean  (WINE_GLAPI *p_glIsSync)( GLsync sync );
void qemu_glIsSync(struct qemu_syscall *call);
GLboolean  (WINE_GLAPI *p_glIsTextureEXT)( GLuint texture );
void qemu_glIsTextureEXT(struct qemu_syscall *call);
GLboolean  (WINE_GLAPI *p_glIsTextureHandleResidentARB)( GLuint64 handle );
void qemu_glIsTextureHandleResidentARB(struct qemu_syscall *call);
GLboolean  (WINE_GLAPI *p_glIsTextureHandleResidentNV)( GLuint64 handle );
void qemu_glIsTextureHandleResidentNV(struct qemu_syscall *call);
GLboolean  (WINE_GLAPI *p_glIsTransformFeedback)( GLuint id );
void qemu_glIsTransformFeedback(struct qemu_syscall *call);
GLboolean  (WINE_GLAPI *p_glIsTransformFeedbackNV)( GLuint id );
void qemu_glIsTransformFeedbackNV(struct qemu_syscall *call);
GLboolean  (WINE_GLAPI *p_glIsVariantEnabledEXT)( GLuint id, GLenum cap );
void qemu_glIsVariantEnabledEXT(struct qemu_syscall *call);
GLboolean  (WINE_GLAPI *p_glIsVertexArray)( GLuint array );
void qemu_glIsVertexArray(struct qemu_syscall *call);
GLboolean  (WINE_GLAPI *p_glIsVertexArrayAPPLE)( GLuint array );
void qemu_glIsVertexArrayAPPLE(struct qemu_syscall *call);
GLboolean  (WINE_GLAPI *p_glIsVertexAttribEnabledAPPLE)( GLuint index, GLenum pname );
void qemu_glIsVertexAttribEnabledAPPLE(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glLGPUCopyImageSubDataNVX)( GLuint sourceGpu, GLbitfield destinationGpuMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srxY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth );
void qemu_glLGPUCopyImageSubDataNVX(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glLGPUInterlockNVX)(void);
void qemu_glLGPUInterlockNVX(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glLGPUNamedBufferSubDataNVX)( GLbitfield gpuMask, GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data );
void qemu_glLGPUNamedBufferSubDataNVX(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glLabelObjectEXT)( GLenum type, GLuint object, GLsizei length, const GLchar *label );
void qemu_glLabelObjectEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glLightEnviSGIX)( GLenum pname, GLint param );
void qemu_glLightEnviSGIX(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glLightModelxOES)( GLenum pname, GLfixed param );
void qemu_glLightModelxOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glLightModelxvOES)( GLenum pname, const GLfixed *param );
void qemu_glLightModelxvOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glLightxOES)( GLenum light, GLenum pname, GLfixed param );
void qemu_glLightxOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glLightxvOES)( GLenum light, GLenum pname, const GLfixed *params );
void qemu_glLightxvOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glLineWidthxOES)( GLfixed width );
void qemu_glLineWidthxOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glLinkProgram)( GLuint program );
void qemu_glLinkProgram(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glLinkProgramARB)( GLhandleARB programObj );
void qemu_glLinkProgramARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glListDrawCommandsStatesClientNV)( GLuint list, GLuint segment, const void **indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count );
void qemu_glListDrawCommandsStatesClientNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glListParameterfSGIX)( GLuint list, GLenum pname, GLfloat param );
void qemu_glListParameterfSGIX(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glListParameterfvSGIX)( GLuint list, GLenum pname, const GLfloat *params );
void qemu_glListParameterfvSGIX(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glListParameteriSGIX)( GLuint list, GLenum pname, GLint param );
void qemu_glListParameteriSGIX(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glListParameterivSGIX)( GLuint list, GLenum pname, const GLint *params );
void qemu_glListParameterivSGIX(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glLoadIdentityDeformationMapSGIX)( GLbitfield mask );
void qemu_glLoadIdentityDeformationMapSGIX(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glLoadMatrixxOES)( const GLfixed *m );
void qemu_glLoadMatrixxOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glLoadProgramNV)( GLenum target, GLuint id, GLsizei len, const GLubyte *program );
void qemu_glLoadProgramNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glLoadTransposeMatrixd)( const GLdouble *m );
void qemu_glLoadTransposeMatrixd(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glLoadTransposeMatrixdARB)( const GLdouble *m );
void qemu_glLoadTransposeMatrixdARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glLoadTransposeMatrixf)( const GLfloat *m );
void qemu_glLoadTransposeMatrixf(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glLoadTransposeMatrixfARB)( const GLfloat *m );
void qemu_glLoadTransposeMatrixfARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glLoadTransposeMatrixxOES)( const GLfixed *m );
void qemu_glLoadTransposeMatrixxOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glLockArraysEXT)( GLint first, GLsizei count );
void qemu_glLockArraysEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMTexCoord2fSGIS)( GLenum target, GLfloat s, GLfloat t );
void qemu_glMTexCoord2fSGIS(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMTexCoord2fvSGIS)( GLenum target, GLfloat * v );
void qemu_glMTexCoord2fvSGIS(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMakeBufferNonResidentNV)( GLenum target );
void qemu_glMakeBufferNonResidentNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMakeBufferResidentNV)( GLenum target, GLenum access );
void qemu_glMakeBufferResidentNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMakeImageHandleNonResidentARB)( GLuint64 handle );
void qemu_glMakeImageHandleNonResidentARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMakeImageHandleNonResidentNV)( GLuint64 handle );
void qemu_glMakeImageHandleNonResidentNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMakeImageHandleResidentARB)( GLuint64 handle, GLenum access );
void qemu_glMakeImageHandleResidentARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMakeImageHandleResidentNV)( GLuint64 handle, GLenum access );
void qemu_glMakeImageHandleResidentNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMakeNamedBufferNonResidentNV)( GLuint buffer );
void qemu_glMakeNamedBufferNonResidentNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMakeNamedBufferResidentNV)( GLuint buffer, GLenum access );
void qemu_glMakeNamedBufferResidentNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMakeTextureHandleNonResidentARB)( GLuint64 handle );
void qemu_glMakeTextureHandleNonResidentARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMakeTextureHandleNonResidentNV)( GLuint64 handle );
void qemu_glMakeTextureHandleNonResidentNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMakeTextureHandleResidentARB)( GLuint64 handle );
void qemu_glMakeTextureHandleResidentARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMakeTextureHandleResidentNV)( GLuint64 handle );
void qemu_glMakeTextureHandleResidentNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMap1xOES)( GLenum target, GLfixed u1, GLfixed u2, GLint stride, GLint order, GLfixed points );
void qemu_glMap1xOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMap2xOES)( GLenum target, GLfixed u1, GLfixed u2, GLint ustride, GLint uorder, GLfixed v1, GLfixed v2, GLint vstride, GLint vorder, GLfixed points );
void qemu_glMap2xOES(struct qemu_syscall *call);
void *     (WINE_GLAPI *p_glMapBuffer)( GLenum target, GLenum access );
void qemu_glMapBuffer(struct qemu_syscall *call);
void *     (WINE_GLAPI *p_glMapBufferARB)( GLenum target, GLenum access );
void qemu_glMapBufferARB(struct qemu_syscall *call);
void *     (WINE_GLAPI *p_glMapBufferRange)( GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access );
void qemu_glMapBufferRange(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMapControlPointsNV)( GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const void *points );
void qemu_glMapControlPointsNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMapGrid1xOES)( GLint n, GLfixed u1, GLfixed u2 );
void qemu_glMapGrid1xOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMapGrid2xOES)( GLint n, GLfixed u1, GLfixed u2, GLfixed v1, GLfixed v2 );
void qemu_glMapGrid2xOES(struct qemu_syscall *call);
void *     (WINE_GLAPI *p_glMapNamedBuffer)( GLuint buffer, GLenum access );
void qemu_glMapNamedBuffer(struct qemu_syscall *call);
void *     (WINE_GLAPI *p_glMapNamedBufferEXT)( GLuint buffer, GLenum access );
void qemu_glMapNamedBufferEXT(struct qemu_syscall *call);
void *     (WINE_GLAPI *p_glMapNamedBufferRange)( GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access );
void qemu_glMapNamedBufferRange(struct qemu_syscall *call);
void *     (WINE_GLAPI *p_glMapNamedBufferRangeEXT)( GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access );
void qemu_glMapNamedBufferRangeEXT(struct qemu_syscall *call);
void *     (WINE_GLAPI *p_glMapObjectBufferATI)( GLuint buffer );
void qemu_glMapObjectBufferATI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMapParameterfvNV)( GLenum target, GLenum pname, const GLfloat *params );
void qemu_glMapParameterfvNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMapParameterivNV)( GLenum target, GLenum pname, const GLint *params );
void qemu_glMapParameterivNV(struct qemu_syscall *call);
void *     (WINE_GLAPI *p_glMapTexture2DINTEL)( GLuint texture, GLint level, GLbitfield access, GLint *stride, GLenum *layout );
void qemu_glMapTexture2DINTEL(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMapVertexAttrib1dAPPLE)( GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points );
void qemu_glMapVertexAttrib1dAPPLE(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMapVertexAttrib1fAPPLE)( GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points );
void qemu_glMapVertexAttrib1fAPPLE(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMapVertexAttrib2dAPPLE)( GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points );
void qemu_glMapVertexAttrib2dAPPLE(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMapVertexAttrib2fAPPLE)( GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points );
void qemu_glMapVertexAttrib2fAPPLE(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMaterialxOES)( GLenum face, GLenum pname, GLfixed param );
void qemu_glMaterialxOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMaterialxvOES)( GLenum face, GLenum pname, const GLfixed *param );
void qemu_glMaterialxvOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMatrixFrustumEXT)( GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar );
void qemu_glMatrixFrustumEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMatrixIndexPointerARB)( GLint size, GLenum type, GLsizei stride, const void *pointer );
void qemu_glMatrixIndexPointerARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMatrixIndexubvARB)( GLint size, const GLubyte *indices );
void qemu_glMatrixIndexubvARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMatrixIndexuivARB)( GLint size, const GLuint *indices );
void qemu_glMatrixIndexuivARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMatrixIndexusvARB)( GLint size, const GLushort *indices );
void qemu_glMatrixIndexusvARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMatrixLoad3x2fNV)( GLenum matrixMode, const GLfloat *m );
void qemu_glMatrixLoad3x2fNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMatrixLoad3x3fNV)( GLenum matrixMode, const GLfloat *m );
void qemu_glMatrixLoad3x3fNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMatrixLoadIdentityEXT)( GLenum mode );
void qemu_glMatrixLoadIdentityEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMatrixLoadTranspose3x3fNV)( GLenum matrixMode, const GLfloat *m );
void qemu_glMatrixLoadTranspose3x3fNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMatrixLoadTransposedEXT)( GLenum mode, const GLdouble *m );
void qemu_glMatrixLoadTransposedEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMatrixLoadTransposefEXT)( GLenum mode, const GLfloat *m );
void qemu_glMatrixLoadTransposefEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMatrixLoaddEXT)( GLenum mode, const GLdouble *m );
void qemu_glMatrixLoaddEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMatrixLoadfEXT)( GLenum mode, const GLfloat *m );
void qemu_glMatrixLoadfEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMatrixMult3x2fNV)( GLenum matrixMode, const GLfloat *m );
void qemu_glMatrixMult3x2fNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMatrixMult3x3fNV)( GLenum matrixMode, const GLfloat *m );
void qemu_glMatrixMult3x3fNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMatrixMultTranspose3x3fNV)( GLenum matrixMode, const GLfloat *m );
void qemu_glMatrixMultTranspose3x3fNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMatrixMultTransposedEXT)( GLenum mode, const GLdouble *m );
void qemu_glMatrixMultTransposedEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMatrixMultTransposefEXT)( GLenum mode, const GLfloat *m );
void qemu_glMatrixMultTransposefEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMatrixMultdEXT)( GLenum mode, const GLdouble *m );
void qemu_glMatrixMultdEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMatrixMultfEXT)( GLenum mode, const GLfloat *m );
void qemu_glMatrixMultfEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMatrixOrthoEXT)( GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar );
void qemu_glMatrixOrthoEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMatrixPopEXT)( GLenum mode );
void qemu_glMatrixPopEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMatrixPushEXT)( GLenum mode );
void qemu_glMatrixPushEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMatrixRotatedEXT)( GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z );
void qemu_glMatrixRotatedEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMatrixRotatefEXT)( GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z );
void qemu_glMatrixRotatefEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMatrixScaledEXT)( GLenum mode, GLdouble x, GLdouble y, GLdouble z );
void qemu_glMatrixScaledEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMatrixScalefEXT)( GLenum mode, GLfloat x, GLfloat y, GLfloat z );
void qemu_glMatrixScalefEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMatrixTranslatedEXT)( GLenum mode, GLdouble x, GLdouble y, GLdouble z );
void qemu_glMatrixTranslatedEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMatrixTranslatefEXT)( GLenum mode, GLfloat x, GLfloat y, GLfloat z );
void qemu_glMatrixTranslatefEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMaxShaderCompilerThreadsARB)( GLuint count );
void qemu_glMaxShaderCompilerThreadsARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMaxShaderCompilerThreadsKHR)( GLuint count );
void qemu_glMaxShaderCompilerThreadsKHR(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMemoryBarrier)( GLbitfield barriers );
void qemu_glMemoryBarrier(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMemoryBarrierByRegion)( GLbitfield barriers );
void qemu_glMemoryBarrierByRegion(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMemoryBarrierEXT)( GLbitfield barriers );
void qemu_glMemoryBarrierEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMemoryObjectParameterivEXT)( GLuint memoryObject, GLenum pname, const GLint *params );
void qemu_glMemoryObjectParameterivEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMinSampleShading)( GLfloat value );
void qemu_glMinSampleShading(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMinSampleShadingARB)( GLfloat value );
void qemu_glMinSampleShadingARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMinmax)( GLenum target, GLenum internalformat, GLboolean sink );
void qemu_glMinmax(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMinmaxEXT)( GLenum target, GLenum internalformat, GLboolean sink );
void qemu_glMinmaxEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultMatrixxOES)( const GLfixed *m );
void qemu_glMultMatrixxOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultTransposeMatrixd)( const GLdouble *m );
void qemu_glMultTransposeMatrixd(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultTransposeMatrixdARB)( const GLdouble *m );
void qemu_glMultTransposeMatrixdARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultTransposeMatrixf)( const GLfloat *m );
void qemu_glMultTransposeMatrixf(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultTransposeMatrixfARB)( const GLfloat *m );
void qemu_glMultTransposeMatrixfARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultTransposeMatrixxOES)( const GLfixed *m );
void qemu_glMultTransposeMatrixxOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiDrawArrays)( GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount );
void qemu_glMultiDrawArrays(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiDrawArraysEXT)( GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount );
void qemu_glMultiDrawArraysEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiDrawArraysIndirect)( GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride );
void qemu_glMultiDrawArraysIndirect(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiDrawArraysIndirectAMD)( GLenum mode, const void *indirect, GLsizei primcount, GLsizei stride );
void qemu_glMultiDrawArraysIndirectAMD(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiDrawArraysIndirectBindlessCountNV)( GLenum mode, const void *indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount );
void qemu_glMultiDrawArraysIndirectBindlessCountNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiDrawArraysIndirectBindlessNV)( GLenum mode, const void *indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount );
void qemu_glMultiDrawArraysIndirectBindlessNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiDrawArraysIndirectCount)( GLenum mode, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride );
void qemu_glMultiDrawArraysIndirectCount(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiDrawArraysIndirectCountARB)( GLenum mode, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride );
void qemu_glMultiDrawArraysIndirectCountARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiDrawElementArrayAPPLE)( GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount );
void qemu_glMultiDrawElementArrayAPPLE(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiDrawElements)( GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount );
void qemu_glMultiDrawElements(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiDrawElementsBaseVertex)( GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount, const GLint *basevertex );
void qemu_glMultiDrawElementsBaseVertex(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiDrawElementsEXT)( GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei primcount );
void qemu_glMultiDrawElementsEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiDrawElementsIndirect)( GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride );
void qemu_glMultiDrawElementsIndirect(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiDrawElementsIndirectAMD)( GLenum mode, GLenum type, const void *indirect, GLsizei primcount, GLsizei stride );
void qemu_glMultiDrawElementsIndirectAMD(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiDrawElementsIndirectBindlessCountNV)( GLenum mode, GLenum type, const void *indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount );
void qemu_glMultiDrawElementsIndirectBindlessCountNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiDrawElementsIndirectBindlessNV)( GLenum mode, GLenum type, const void *indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount );
void qemu_glMultiDrawElementsIndirectBindlessNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiDrawElementsIndirectCount)( GLenum mode, GLenum type, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride );
void qemu_glMultiDrawElementsIndirectCount(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiDrawElementsIndirectCountARB)( GLenum mode, GLenum type, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride );
void qemu_glMultiDrawElementsIndirectCountARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiDrawMeshTasksIndirectCountNV)( GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride );
void qemu_glMultiDrawMeshTasksIndirectCountNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiDrawMeshTasksIndirectNV)( GLintptr indirect, GLsizei drawcount, GLsizei stride );
void qemu_glMultiDrawMeshTasksIndirectNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiDrawRangeElementArrayAPPLE)( GLenum mode, GLuint start, GLuint end, const GLint *first, const GLsizei *count, GLsizei primcount );
void qemu_glMultiDrawRangeElementArrayAPPLE(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiModeDrawArraysIBM)( const GLenum *mode, const GLint *first, const GLsizei *count, GLsizei primcount, GLint modestride );
void qemu_glMultiModeDrawArraysIBM(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiModeDrawElementsIBM)( const GLenum *mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei primcount, GLint modestride );
void qemu_glMultiModeDrawElementsIBM(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexBufferEXT)( GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer );
void qemu_glMultiTexBufferEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord1bOES)( GLenum texture, GLbyte s );
void qemu_glMultiTexCoord1bOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord1bvOES)( GLenum texture, const GLbyte *coords );
void qemu_glMultiTexCoord1bvOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord1d)( GLenum target, GLdouble s );
void qemu_glMultiTexCoord1d(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord1dARB)( GLenum target, GLdouble s );
void qemu_glMultiTexCoord1dARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord1dSGIS)( GLenum target, GLdouble s );
void qemu_glMultiTexCoord1dSGIS(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord1dv)( GLenum target, const GLdouble *v );
void qemu_glMultiTexCoord1dv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord1dvARB)( GLenum target, const GLdouble *v );
void qemu_glMultiTexCoord1dvARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord1dvSGIS)( GLenum target, GLdouble * v );
void qemu_glMultiTexCoord1dvSGIS(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord1f)( GLenum target, GLfloat s );
void qemu_glMultiTexCoord1f(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord1fARB)( GLenum target, GLfloat s );
void qemu_glMultiTexCoord1fARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord1fSGIS)( GLenum target, GLfloat s );
void qemu_glMultiTexCoord1fSGIS(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord1fv)( GLenum target, const GLfloat *v );
void qemu_glMultiTexCoord1fv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord1fvARB)( GLenum target, const GLfloat *v );
void qemu_glMultiTexCoord1fvARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord1fvSGIS)( GLenum target, const GLfloat * v );
void qemu_glMultiTexCoord1fvSGIS(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord1hNV)( GLenum target, GLhalfNV s );
void qemu_glMultiTexCoord1hNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord1hvNV)( GLenum target, const GLhalfNV *v );
void qemu_glMultiTexCoord1hvNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord1i)( GLenum target, GLint s );
void qemu_glMultiTexCoord1i(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord1iARB)( GLenum target, GLint s );
void qemu_glMultiTexCoord1iARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord1iSGIS)( GLenum target, GLint s );
void qemu_glMultiTexCoord1iSGIS(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord1iv)( GLenum target, const GLint *v );
void qemu_glMultiTexCoord1iv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord1ivARB)( GLenum target, const GLint *v );
void qemu_glMultiTexCoord1ivARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord1ivSGIS)( GLenum target, GLint * v );
void qemu_glMultiTexCoord1ivSGIS(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord1s)( GLenum target, GLshort s );
void qemu_glMultiTexCoord1s(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord1sARB)( GLenum target, GLshort s );
void qemu_glMultiTexCoord1sARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord1sSGIS)( GLenum target, GLshort s );
void qemu_glMultiTexCoord1sSGIS(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord1sv)( GLenum target, const GLshort *v );
void qemu_glMultiTexCoord1sv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord1svARB)( GLenum target, const GLshort *v );
void qemu_glMultiTexCoord1svARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord1svSGIS)( GLenum target, GLshort * v );
void qemu_glMultiTexCoord1svSGIS(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord1xOES)( GLenum texture, GLfixed s );
void qemu_glMultiTexCoord1xOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord1xvOES)( GLenum texture, const GLfixed *coords );
void qemu_glMultiTexCoord1xvOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord2bOES)( GLenum texture, GLbyte s, GLbyte t );
void qemu_glMultiTexCoord2bOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord2bvOES)( GLenum texture, const GLbyte *coords );
void qemu_glMultiTexCoord2bvOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord2d)( GLenum target, GLdouble s, GLdouble t );
void qemu_glMultiTexCoord2d(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord2dARB)( GLenum target, GLdouble s, GLdouble t );
void qemu_glMultiTexCoord2dARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord2dSGIS)( GLenum target, GLdouble s, GLdouble t );
void qemu_glMultiTexCoord2dSGIS(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord2dv)( GLenum target, const GLdouble *v );
void qemu_glMultiTexCoord2dv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord2dvARB)( GLenum target, const GLdouble *v );
void qemu_glMultiTexCoord2dvARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord2dvSGIS)( GLenum target, GLdouble * v );
void qemu_glMultiTexCoord2dvSGIS(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord2f)( GLenum target, GLfloat s, GLfloat t );
void qemu_glMultiTexCoord2f(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord2fARB)( GLenum target, GLfloat s, GLfloat t );
void qemu_glMultiTexCoord2fARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord2fSGIS)( GLenum target, GLfloat s, GLfloat t );
void qemu_glMultiTexCoord2fSGIS(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord2fv)( GLenum target, const GLfloat *v );
void qemu_glMultiTexCoord2fv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord2fvARB)( GLenum target, const GLfloat *v );
void qemu_glMultiTexCoord2fvARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord2fvSGIS)( GLenum target, GLfloat * v );
void qemu_glMultiTexCoord2fvSGIS(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord2hNV)( GLenum target, GLhalfNV s, GLhalfNV t );
void qemu_glMultiTexCoord2hNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord2hvNV)( GLenum target, const GLhalfNV *v );
void qemu_glMultiTexCoord2hvNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord2i)( GLenum target, GLint s, GLint t );
void qemu_glMultiTexCoord2i(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord2iARB)( GLenum target, GLint s, GLint t );
void qemu_glMultiTexCoord2iARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord2iSGIS)( GLenum target, GLint s, GLint t );
void qemu_glMultiTexCoord2iSGIS(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord2iv)( GLenum target, const GLint *v );
void qemu_glMultiTexCoord2iv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord2ivARB)( GLenum target, const GLint *v );
void qemu_glMultiTexCoord2ivARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord2ivSGIS)( GLenum target, GLint * v );
void qemu_glMultiTexCoord2ivSGIS(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord2s)( GLenum target, GLshort s, GLshort t );
void qemu_glMultiTexCoord2s(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord2sARB)( GLenum target, GLshort s, GLshort t );
void qemu_glMultiTexCoord2sARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord2sSGIS)( GLenum target, GLshort s, GLshort t );
void qemu_glMultiTexCoord2sSGIS(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord2sv)( GLenum target, const GLshort *v );
void qemu_glMultiTexCoord2sv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord2svARB)( GLenum target, const GLshort *v );
void qemu_glMultiTexCoord2svARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord2svSGIS)( GLenum target, GLshort * v );
void qemu_glMultiTexCoord2svSGIS(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord2xOES)( GLenum texture, GLfixed s, GLfixed t );
void qemu_glMultiTexCoord2xOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord2xvOES)( GLenum texture, const GLfixed *coords );
void qemu_glMultiTexCoord2xvOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord3bOES)( GLenum texture, GLbyte s, GLbyte t, GLbyte r );
void qemu_glMultiTexCoord3bOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord3bvOES)( GLenum texture, const GLbyte *coords );
void qemu_glMultiTexCoord3bvOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord3d)( GLenum target, GLdouble s, GLdouble t, GLdouble r );
void qemu_glMultiTexCoord3d(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord3dARB)( GLenum target, GLdouble s, GLdouble t, GLdouble r );
void qemu_glMultiTexCoord3dARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord3dSGIS)( GLenum target, GLdouble s, GLdouble t, GLdouble r );
void qemu_glMultiTexCoord3dSGIS(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord3dv)( GLenum target, const GLdouble *v );
void qemu_glMultiTexCoord3dv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord3dvARB)( GLenum target, const GLdouble *v );
void qemu_glMultiTexCoord3dvARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord3dvSGIS)( GLenum target, GLdouble * v );
void qemu_glMultiTexCoord3dvSGIS(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord3f)( GLenum target, GLfloat s, GLfloat t, GLfloat r );
void qemu_glMultiTexCoord3f(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord3fARB)( GLenum target, GLfloat s, GLfloat t, GLfloat r );
void qemu_glMultiTexCoord3fARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord3fSGIS)( GLenum target, GLfloat s, GLfloat t, GLfloat r );
void qemu_glMultiTexCoord3fSGIS(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord3fv)( GLenum target, const GLfloat *v );
void qemu_glMultiTexCoord3fv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord3fvARB)( GLenum target, const GLfloat *v );
void qemu_glMultiTexCoord3fvARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord3fvSGIS)( GLenum target, GLfloat * v );
void qemu_glMultiTexCoord3fvSGIS(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord3hNV)( GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r );
void qemu_glMultiTexCoord3hNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord3hvNV)( GLenum target, const GLhalfNV *v );
void qemu_glMultiTexCoord3hvNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord3i)( GLenum target, GLint s, GLint t, GLint r );
void qemu_glMultiTexCoord3i(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord3iARB)( GLenum target, GLint s, GLint t, GLint r );
void qemu_glMultiTexCoord3iARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord3iSGIS)( GLenum target, GLint s, GLint t, GLint r );
void qemu_glMultiTexCoord3iSGIS(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord3iv)( GLenum target, const GLint *v );
void qemu_glMultiTexCoord3iv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord3ivARB)( GLenum target, const GLint *v );
void qemu_glMultiTexCoord3ivARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord3ivSGIS)( GLenum target, GLint * v );
void qemu_glMultiTexCoord3ivSGIS(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord3s)( GLenum target, GLshort s, GLshort t, GLshort r );
void qemu_glMultiTexCoord3s(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord3sARB)( GLenum target, GLshort s, GLshort t, GLshort r );
void qemu_glMultiTexCoord3sARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord3sSGIS)( GLenum target, GLshort s, GLshort t, GLshort r );
void qemu_glMultiTexCoord3sSGIS(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord3sv)( GLenum target, const GLshort *v );
void qemu_glMultiTexCoord3sv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord3svARB)( GLenum target, const GLshort *v );
void qemu_glMultiTexCoord3svARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord3svSGIS)( GLenum target, GLshort * v );
void qemu_glMultiTexCoord3svSGIS(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord3xOES)( GLenum texture, GLfixed s, GLfixed t, GLfixed r );
void qemu_glMultiTexCoord3xOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord3xvOES)( GLenum texture, const GLfixed *coords );
void qemu_glMultiTexCoord3xvOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord4bOES)( GLenum texture, GLbyte s, GLbyte t, GLbyte r, GLbyte q );
void qemu_glMultiTexCoord4bOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord4bvOES)( GLenum texture, const GLbyte *coords );
void qemu_glMultiTexCoord4bvOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord4d)( GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q );
void qemu_glMultiTexCoord4d(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord4dARB)( GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q );
void qemu_glMultiTexCoord4dARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord4dSGIS)( GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q );
void qemu_glMultiTexCoord4dSGIS(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord4dv)( GLenum target, const GLdouble *v );
void qemu_glMultiTexCoord4dv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord4dvARB)( GLenum target, const GLdouble *v );
void qemu_glMultiTexCoord4dvARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord4dvSGIS)( GLenum target, GLdouble * v );
void qemu_glMultiTexCoord4dvSGIS(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord4f)( GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q );
void qemu_glMultiTexCoord4f(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord4fARB)( GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q );
void qemu_glMultiTexCoord4fARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord4fSGIS)( GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q );
void qemu_glMultiTexCoord4fSGIS(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord4fv)( GLenum target, const GLfloat *v );
void qemu_glMultiTexCoord4fv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord4fvARB)( GLenum target, const GLfloat *v );
void qemu_glMultiTexCoord4fvARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord4fvSGIS)( GLenum target, GLfloat * v );
void qemu_glMultiTexCoord4fvSGIS(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord4hNV)( GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q );
void qemu_glMultiTexCoord4hNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord4hvNV)( GLenum target, const GLhalfNV *v );
void qemu_glMultiTexCoord4hvNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord4i)( GLenum target, GLint s, GLint t, GLint r, GLint q );
void qemu_glMultiTexCoord4i(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord4iARB)( GLenum target, GLint s, GLint t, GLint r, GLint q );
void qemu_glMultiTexCoord4iARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord4iSGIS)( GLenum target, GLint s, GLint t, GLint r, GLint q );
void qemu_glMultiTexCoord4iSGIS(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord4iv)( GLenum target, const GLint *v );
void qemu_glMultiTexCoord4iv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord4ivARB)( GLenum target, const GLint *v );
void qemu_glMultiTexCoord4ivARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord4ivSGIS)( GLenum target, GLint * v );
void qemu_glMultiTexCoord4ivSGIS(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord4s)( GLenum target, GLshort s, GLshort t, GLshort r, GLshort q );
void qemu_glMultiTexCoord4s(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord4sARB)( GLenum target, GLshort s, GLshort t, GLshort r, GLshort q );
void qemu_glMultiTexCoord4sARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord4sSGIS)( GLenum target, GLshort s, GLshort t, GLshort r, GLshort q );
void qemu_glMultiTexCoord4sSGIS(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord4sv)( GLenum target, const GLshort *v );
void qemu_glMultiTexCoord4sv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord4svARB)( GLenum target, const GLshort *v );
void qemu_glMultiTexCoord4svARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord4svSGIS)( GLenum target, GLshort * v );
void qemu_glMultiTexCoord4svSGIS(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord4xOES)( GLenum texture, GLfixed s, GLfixed t, GLfixed r, GLfixed q );
void qemu_glMultiTexCoord4xOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoord4xvOES)( GLenum texture, const GLfixed *coords );
void qemu_glMultiTexCoord4xvOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoordP1ui)( GLenum texture, GLenum type, GLuint coords );
void qemu_glMultiTexCoordP1ui(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoordP1uiv)( GLenum texture, GLenum type, const GLuint *coords );
void qemu_glMultiTexCoordP1uiv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoordP2ui)( GLenum texture, GLenum type, GLuint coords );
void qemu_glMultiTexCoordP2ui(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoordP2uiv)( GLenum texture, GLenum type, const GLuint *coords );
void qemu_glMultiTexCoordP2uiv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoordP3ui)( GLenum texture, GLenum type, GLuint coords );
void qemu_glMultiTexCoordP3ui(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoordP3uiv)( GLenum texture, GLenum type, const GLuint *coords );
void qemu_glMultiTexCoordP3uiv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoordP4ui)( GLenum texture, GLenum type, GLuint coords );
void qemu_glMultiTexCoordP4ui(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoordP4uiv)( GLenum texture, GLenum type, const GLuint *coords );
void qemu_glMultiTexCoordP4uiv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoordPointerEXT)( GLenum texunit, GLint size, GLenum type, GLsizei stride, const void *pointer );
void qemu_glMultiTexCoordPointerEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexCoordPointerSGIS)( GLenum target, GLint size, GLenum type, GLsizei stride, GLvoid * pointer );
void qemu_glMultiTexCoordPointerSGIS(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexEnvfEXT)( GLenum texunit, GLenum target, GLenum pname, GLfloat param );
void qemu_glMultiTexEnvfEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexEnvfvEXT)( GLenum texunit, GLenum target, GLenum pname, const GLfloat *params );
void qemu_glMultiTexEnvfvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexEnviEXT)( GLenum texunit, GLenum target, GLenum pname, GLint param );
void qemu_glMultiTexEnviEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexEnvivEXT)( GLenum texunit, GLenum target, GLenum pname, const GLint *params );
void qemu_glMultiTexEnvivEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexGendEXT)( GLenum texunit, GLenum coord, GLenum pname, GLdouble param );
void qemu_glMultiTexGendEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexGendvEXT)( GLenum texunit, GLenum coord, GLenum pname, const GLdouble *params );
void qemu_glMultiTexGendvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexGenfEXT)( GLenum texunit, GLenum coord, GLenum pname, GLfloat param );
void qemu_glMultiTexGenfEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexGenfvEXT)( GLenum texunit, GLenum coord, GLenum pname, const GLfloat *params );
void qemu_glMultiTexGenfvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexGeniEXT)( GLenum texunit, GLenum coord, GLenum pname, GLint param );
void qemu_glMultiTexGeniEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexGenivEXT)( GLenum texunit, GLenum coord, GLenum pname, const GLint *params );
void qemu_glMultiTexGenivEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexImage1DEXT)( GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels );
void qemu_glMultiTexImage1DEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexImage2DEXT)( GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels );
void qemu_glMultiTexImage2DEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexImage3DEXT)( GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels );
void qemu_glMultiTexImage3DEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexParameterIivEXT)( GLenum texunit, GLenum target, GLenum pname, const GLint *params );
void qemu_glMultiTexParameterIivEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexParameterIuivEXT)( GLenum texunit, GLenum target, GLenum pname, const GLuint *params );
void qemu_glMultiTexParameterIuivEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexParameterfEXT)( GLenum texunit, GLenum target, GLenum pname, GLfloat param );
void qemu_glMultiTexParameterfEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexParameterfvEXT)( GLenum texunit, GLenum target, GLenum pname, const GLfloat *params );
void qemu_glMultiTexParameterfvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexParameteriEXT)( GLenum texunit, GLenum target, GLenum pname, GLint param );
void qemu_glMultiTexParameteriEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexParameterivEXT)( GLenum texunit, GLenum target, GLenum pname, const GLint *params );
void qemu_glMultiTexParameterivEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexRenderbufferEXT)( GLenum texunit, GLenum target, GLuint renderbuffer );
void qemu_glMultiTexRenderbufferEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexSubImage1DEXT)( GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels );
void qemu_glMultiTexSubImage1DEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexSubImage2DEXT)( GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels );
void qemu_glMultiTexSubImage2DEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMultiTexSubImage3DEXT)( GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels );
void qemu_glMultiTexSubImage3DEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMulticastBarrierNV)(void);
void qemu_glMulticastBarrierNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMulticastBlitFramebufferNV)( GLuint srcGpu, GLuint dstGpu, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter );
void qemu_glMulticastBlitFramebufferNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMulticastBufferSubDataNV)( GLbitfield gpuMask, GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data );
void qemu_glMulticastBufferSubDataNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMulticastCopyBufferSubDataNV)( GLuint readGpu, GLbitfield writeGpuMask, GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size );
void qemu_glMulticastCopyBufferSubDataNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMulticastCopyImageSubDataNV)( GLuint srcGpu, GLbitfield dstGpuMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth );
void qemu_glMulticastCopyImageSubDataNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMulticastFramebufferSampleLocationsfvNV)( GLuint gpu, GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v );
void qemu_glMulticastFramebufferSampleLocationsfvNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMulticastGetQueryObjecti64vNV)( GLuint gpu, GLuint id, GLenum pname, GLint64 *params );
void qemu_glMulticastGetQueryObjecti64vNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMulticastGetQueryObjectivNV)( GLuint gpu, GLuint id, GLenum pname, GLint *params );
void qemu_glMulticastGetQueryObjectivNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMulticastGetQueryObjectui64vNV)( GLuint gpu, GLuint id, GLenum pname, GLuint64 *params );
void qemu_glMulticastGetQueryObjectui64vNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMulticastGetQueryObjectuivNV)( GLuint gpu, GLuint id, GLenum pname, GLuint *params );
void qemu_glMulticastGetQueryObjectuivNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMulticastScissorArrayvNVX)( GLuint gpu, GLuint first, GLsizei count, const GLint *v );
void qemu_glMulticastScissorArrayvNVX(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMulticastViewportArrayvNVX)( GLuint gpu, GLuint first, GLsizei count, const GLfloat *v );
void qemu_glMulticastViewportArrayvNVX(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMulticastViewportPositionWScaleNVX)( GLuint gpu, GLuint index, GLfloat xcoeff, GLfloat ycoeff );
void qemu_glMulticastViewportPositionWScaleNVX(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glMulticastWaitSyncNV)( GLuint signalGpu, GLbitfield waitGpuMask );
void qemu_glMulticastWaitSyncNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glNamedBufferAttachMemoryNV)( GLuint buffer, GLuint memory, GLuint64 offset );
void qemu_glNamedBufferAttachMemoryNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glNamedBufferData)( GLuint buffer, GLsizeiptr size, const void *data, GLenum usage );
void qemu_glNamedBufferData(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glNamedBufferDataEXT)( GLuint buffer, GLsizeiptr size, const void *data, GLenum usage );
void qemu_glNamedBufferDataEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glNamedBufferPageCommitmentARB)( GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit );
void qemu_glNamedBufferPageCommitmentARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glNamedBufferPageCommitmentEXT)( GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit );
void qemu_glNamedBufferPageCommitmentEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glNamedBufferStorage)( GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags );
void qemu_glNamedBufferStorage(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glNamedBufferStorageEXT)( GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags );
void qemu_glNamedBufferStorageEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glNamedBufferStorageExternalEXT)( GLuint buffer, GLintptr offset, GLsizeiptr size, GLeglClientBufferEXT clientBuffer, GLbitfield flags );
void qemu_glNamedBufferStorageExternalEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glNamedBufferStorageMemEXT)( GLuint buffer, GLsizeiptr size, GLuint memory, GLuint64 offset );
void qemu_glNamedBufferStorageMemEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glNamedBufferSubData)( GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data );
void qemu_glNamedBufferSubData(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glNamedBufferSubDataEXT)( GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data );
void qemu_glNamedBufferSubDataEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glNamedCopyBufferSubDataEXT)( GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size );
void qemu_glNamedCopyBufferSubDataEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glNamedFramebufferDrawBuffer)( GLuint framebuffer, GLenum buf );
void qemu_glNamedFramebufferDrawBuffer(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glNamedFramebufferDrawBuffers)( GLuint framebuffer, GLsizei n, const GLenum *bufs );
void qemu_glNamedFramebufferDrawBuffers(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glNamedFramebufferParameteri)( GLuint framebuffer, GLenum pname, GLint param );
void qemu_glNamedFramebufferParameteri(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glNamedFramebufferParameteriEXT)( GLuint framebuffer, GLenum pname, GLint param );
void qemu_glNamedFramebufferParameteriEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glNamedFramebufferReadBuffer)( GLuint framebuffer, GLenum src );
void qemu_glNamedFramebufferReadBuffer(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glNamedFramebufferRenderbuffer)( GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer );
void qemu_glNamedFramebufferRenderbuffer(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glNamedFramebufferRenderbufferEXT)( GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer );
void qemu_glNamedFramebufferRenderbufferEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glNamedFramebufferSampleLocationsfvARB)( GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v );
void qemu_glNamedFramebufferSampleLocationsfvARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glNamedFramebufferSampleLocationsfvNV)( GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v );
void qemu_glNamedFramebufferSampleLocationsfvNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glNamedFramebufferSamplePositionsfvAMD)( GLuint framebuffer, GLuint numsamples, GLuint pixelindex, const GLfloat *values );
void qemu_glNamedFramebufferSamplePositionsfvAMD(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glNamedFramebufferTexture)( GLuint framebuffer, GLenum attachment, GLuint texture, GLint level );
void qemu_glNamedFramebufferTexture(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glNamedFramebufferTexture1DEXT)( GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level );
void qemu_glNamedFramebufferTexture1DEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glNamedFramebufferTexture2DEXT)( GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level );
void qemu_glNamedFramebufferTexture2DEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glNamedFramebufferTexture3DEXT)( GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset );
void qemu_glNamedFramebufferTexture3DEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glNamedFramebufferTextureEXT)( GLuint framebuffer, GLenum attachment, GLuint texture, GLint level );
void qemu_glNamedFramebufferTextureEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glNamedFramebufferTextureFaceEXT)( GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face );
void qemu_glNamedFramebufferTextureFaceEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glNamedFramebufferTextureLayer)( GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer );
void qemu_glNamedFramebufferTextureLayer(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glNamedFramebufferTextureLayerEXT)( GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer );
void qemu_glNamedFramebufferTextureLayerEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glNamedProgramLocalParameter4dEXT)( GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w );
void qemu_glNamedProgramLocalParameter4dEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glNamedProgramLocalParameter4dvEXT)( GLuint program, GLenum target, GLuint index, const GLdouble *params );
void qemu_glNamedProgramLocalParameter4dvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glNamedProgramLocalParameter4fEXT)( GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w );
void qemu_glNamedProgramLocalParameter4fEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glNamedProgramLocalParameter4fvEXT)( GLuint program, GLenum target, GLuint index, const GLfloat *params );
void qemu_glNamedProgramLocalParameter4fvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glNamedProgramLocalParameterI4iEXT)( GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w );
void qemu_glNamedProgramLocalParameterI4iEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glNamedProgramLocalParameterI4ivEXT)( GLuint program, GLenum target, GLuint index, const GLint *params );
void qemu_glNamedProgramLocalParameterI4ivEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glNamedProgramLocalParameterI4uiEXT)( GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w );
void qemu_glNamedProgramLocalParameterI4uiEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glNamedProgramLocalParameterI4uivEXT)( GLuint program, GLenum target, GLuint index, const GLuint *params );
void qemu_glNamedProgramLocalParameterI4uivEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glNamedProgramLocalParameters4fvEXT)( GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat *params );
void qemu_glNamedProgramLocalParameters4fvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glNamedProgramLocalParametersI4ivEXT)( GLuint program, GLenum target, GLuint index, GLsizei count, const GLint *params );
void qemu_glNamedProgramLocalParametersI4ivEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glNamedProgramLocalParametersI4uivEXT)( GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint *params );
void qemu_glNamedProgramLocalParametersI4uivEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glNamedProgramStringEXT)( GLuint program, GLenum target, GLenum format, GLsizei len, const void *string );
void qemu_glNamedProgramStringEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glNamedRenderbufferStorage)( GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height );
void qemu_glNamedRenderbufferStorage(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glNamedRenderbufferStorageEXT)( GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height );
void qemu_glNamedRenderbufferStorageEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glNamedRenderbufferStorageMultisample)( GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height );
void qemu_glNamedRenderbufferStorageMultisample(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glNamedRenderbufferStorageMultisampleAdvancedAMD)( GLuint renderbuffer, GLsizei samples, GLsizei storageSamples, GLenum internalformat, GLsizei width, GLsizei height );
void qemu_glNamedRenderbufferStorageMultisampleAdvancedAMD(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glNamedRenderbufferStorageMultisampleCoverageEXT)( GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height );
void qemu_glNamedRenderbufferStorageMultisampleCoverageEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glNamedRenderbufferStorageMultisampleEXT)( GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height );
void qemu_glNamedRenderbufferStorageMultisampleEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glNamedStringARB)( GLenum type, GLint namelen, const GLchar *name, GLint stringlen, const GLchar *string );
void qemu_glNamedStringARB(struct qemu_syscall *call);
GLuint     (WINE_GLAPI *p_glNewBufferRegion)( GLenum type );
void qemu_glNewBufferRegion(struct qemu_syscall *call);
GLuint     (WINE_GLAPI *p_glNewObjectBufferATI)( GLsizei size, const void *pointer, GLenum usage );
void qemu_glNewObjectBufferATI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glNormal3fVertex3fSUN)( GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z );
void qemu_glNormal3fVertex3fSUN(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glNormal3fVertex3fvSUN)( const GLfloat *n, const GLfloat *v );
void qemu_glNormal3fVertex3fvSUN(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glNormal3hNV)( GLhalfNV nx, GLhalfNV ny, GLhalfNV nz );
void qemu_glNormal3hNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glNormal3hvNV)( const GLhalfNV *v );
void qemu_glNormal3hvNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glNormal3xOES)( GLfixed nx, GLfixed ny, GLfixed nz );
void qemu_glNormal3xOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glNormal3xvOES)( const GLfixed *coords );
void qemu_glNormal3xvOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glNormalFormatNV)( GLenum type, GLsizei stride );
void qemu_glNormalFormatNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glNormalP3ui)( GLenum type, GLuint coords );
void qemu_glNormalP3ui(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glNormalP3uiv)( GLenum type, const GLuint *coords );
void qemu_glNormalP3uiv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glNormalPointerEXT)( GLenum type, GLsizei stride, GLsizei count, const void *pointer );
void qemu_glNormalPointerEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glNormalPointerListIBM)( GLenum type, GLint stride, const void **pointer, GLint ptrstride );
void qemu_glNormalPointerListIBM(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glNormalPointervINTEL)( GLenum type, const void **pointer );
void qemu_glNormalPointervINTEL(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glNormalStream3bATI)( GLenum stream, GLbyte nx, GLbyte ny, GLbyte nz );
void qemu_glNormalStream3bATI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glNormalStream3bvATI)( GLenum stream, const GLbyte *coords );
void qemu_glNormalStream3bvATI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glNormalStream3dATI)( GLenum stream, GLdouble nx, GLdouble ny, GLdouble nz );
void qemu_glNormalStream3dATI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glNormalStream3dvATI)( GLenum stream, const GLdouble *coords );
void qemu_glNormalStream3dvATI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glNormalStream3fATI)( GLenum stream, GLfloat nx, GLfloat ny, GLfloat nz );
void qemu_glNormalStream3fATI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glNormalStream3fvATI)( GLenum stream, const GLfloat *coords );
void qemu_glNormalStream3fvATI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glNormalStream3iATI)( GLenum stream, GLint nx, GLint ny, GLint nz );
void qemu_glNormalStream3iATI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glNormalStream3ivATI)( GLenum stream, const GLint *coords );
void qemu_glNormalStream3ivATI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glNormalStream3sATI)( GLenum stream, GLshort nx, GLshort ny, GLshort nz );
void qemu_glNormalStream3sATI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glNormalStream3svATI)( GLenum stream, const GLshort *coords );
void qemu_glNormalStream3svATI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glObjectLabel)( GLenum identifier, GLuint name, GLsizei length, const GLchar *label );
void qemu_glObjectLabel(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glObjectPtrLabel)( const void *ptr, GLsizei length, const GLchar *label );
void qemu_glObjectPtrLabel(struct qemu_syscall *call);
GLenum     (WINE_GLAPI *p_glObjectPurgeableAPPLE)( GLenum objectType, GLuint name, GLenum option );
void qemu_glObjectPurgeableAPPLE(struct qemu_syscall *call);
GLenum     (WINE_GLAPI *p_glObjectUnpurgeableAPPLE)( GLenum objectType, GLuint name, GLenum option );
void qemu_glObjectUnpurgeableAPPLE(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glOrthofOES)( GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f );
void qemu_glOrthofOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glOrthoxOES)( GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f );
void qemu_glOrthoxOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPNTrianglesfATI)( GLenum pname, GLfloat param );
void qemu_glPNTrianglesfATI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPNTrianglesiATI)( GLenum pname, GLint param );
void qemu_glPNTrianglesiATI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPassTexCoordATI)( GLuint dst, GLuint coord, GLenum swizzle );
void qemu_glPassTexCoordATI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPassThroughxOES)( GLfixed token );
void qemu_glPassThroughxOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPatchParameterfv)( GLenum pname, const GLfloat *values );
void qemu_glPatchParameterfv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPatchParameteri)( GLenum pname, GLint value );
void qemu_glPatchParameteri(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPathColorGenNV)( GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat *coeffs );
void qemu_glPathColorGenNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPathCommandsNV)( GLuint path, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void *coords );
void qemu_glPathCommandsNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPathCoordsNV)( GLuint path, GLsizei numCoords, GLenum coordType, const void *coords );
void qemu_glPathCoordsNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPathCoverDepthFuncNV)( GLenum func );
void qemu_glPathCoverDepthFuncNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPathDashArrayNV)( GLuint path, GLsizei dashCount, const GLfloat *dashArray );
void qemu_glPathDashArrayNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPathFogGenNV)( GLenum genMode );
void qemu_glPathFogGenNV(struct qemu_syscall *call);
GLenum     (WINE_GLAPI *p_glPathGlyphIndexArrayNV)( GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale );
void qemu_glPathGlyphIndexArrayNV(struct qemu_syscall *call);
GLenum     (WINE_GLAPI *p_glPathGlyphIndexRangeNV)( GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint pathParameterTemplate, GLfloat emScale, GLuint baseAndCount[2] );
void qemu_glPathGlyphIndexRangeNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPathGlyphRangeNV)( GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale );
void qemu_glPathGlyphRangeNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPathGlyphsNV)( GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const void *charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale );
void qemu_glPathGlyphsNV(struct qemu_syscall *call);
GLenum     (WINE_GLAPI *p_glPathMemoryGlyphIndexArrayNV)( GLuint firstPathName, GLenum fontTarget, GLsizeiptr fontSize, const void *fontData, GLsizei faceIndex, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale );
void qemu_glPathMemoryGlyphIndexArrayNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPathParameterfNV)( GLuint path, GLenum pname, GLfloat value );
void qemu_glPathParameterfNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPathParameterfvNV)( GLuint path, GLenum pname, const GLfloat *value );
void qemu_glPathParameterfvNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPathParameteriNV)( GLuint path, GLenum pname, GLint value );
void qemu_glPathParameteriNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPathParameterivNV)( GLuint path, GLenum pname, const GLint *value );
void qemu_glPathParameterivNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPathStencilDepthOffsetNV)( GLfloat factor, GLfloat units );
void qemu_glPathStencilDepthOffsetNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPathStencilFuncNV)( GLenum func, GLint ref, GLuint mask );
void qemu_glPathStencilFuncNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPathStringNV)( GLuint path, GLenum format, GLsizei length, const void *pathString );
void qemu_glPathStringNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPathSubCommandsNV)( GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void *coords );
void qemu_glPathSubCommandsNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPathSubCoordsNV)( GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const void *coords );
void qemu_glPathSubCoordsNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPathTexGenNV)( GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat *coeffs );
void qemu_glPathTexGenNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPauseTransformFeedback)(void);
void qemu_glPauseTransformFeedback(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPauseTransformFeedbackNV)(void);
void qemu_glPauseTransformFeedbackNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPixelDataRangeNV)( GLenum target, GLsizei length, const void *pointer );
void qemu_glPixelDataRangeNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPixelMapx)( GLenum map, GLint size, const GLfixed *values );
void qemu_glPixelMapx(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPixelStorex)( GLenum pname, GLfixed param );
void qemu_glPixelStorex(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPixelTexGenParameterfSGIS)( GLenum pname, GLfloat param );
void qemu_glPixelTexGenParameterfSGIS(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPixelTexGenParameterfvSGIS)( GLenum pname, const GLfloat *params );
void qemu_glPixelTexGenParameterfvSGIS(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPixelTexGenParameteriSGIS)( GLenum pname, GLint param );
void qemu_glPixelTexGenParameteriSGIS(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPixelTexGenParameterivSGIS)( GLenum pname, const GLint *params );
void qemu_glPixelTexGenParameterivSGIS(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPixelTexGenSGIX)( GLenum mode );
void qemu_glPixelTexGenSGIX(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPixelTransferxOES)( GLenum pname, GLfixed param );
void qemu_glPixelTransferxOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPixelTransformParameterfEXT)( GLenum target, GLenum pname, GLfloat param );
void qemu_glPixelTransformParameterfEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPixelTransformParameterfvEXT)( GLenum target, GLenum pname, const GLfloat *params );
void qemu_glPixelTransformParameterfvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPixelTransformParameteriEXT)( GLenum target, GLenum pname, GLint param );
void qemu_glPixelTransformParameteriEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPixelTransformParameterivEXT)( GLenum target, GLenum pname, const GLint *params );
void qemu_glPixelTransformParameterivEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPixelZoomxOES)( GLfixed xfactor, GLfixed yfactor );
void qemu_glPixelZoomxOES(struct qemu_syscall *call);
GLboolean  (WINE_GLAPI *p_glPointAlongPathNV)( GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat *x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY );
void qemu_glPointAlongPathNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPointParameterf)( GLenum pname, GLfloat param );
void qemu_glPointParameterf(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPointParameterfARB)( GLenum pname, GLfloat param );
void qemu_glPointParameterfARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPointParameterfEXT)( GLenum pname, GLfloat param );
void qemu_glPointParameterfEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPointParameterfSGIS)( GLenum pname, GLfloat param );
void qemu_glPointParameterfSGIS(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPointParameterfv)( GLenum pname, const GLfloat *params );
void qemu_glPointParameterfv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPointParameterfvARB)( GLenum pname, const GLfloat *params );
void qemu_glPointParameterfvARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPointParameterfvEXT)( GLenum pname, const GLfloat *params );
void qemu_glPointParameterfvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPointParameterfvSGIS)( GLenum pname, const GLfloat *params );
void qemu_glPointParameterfvSGIS(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPointParameteri)( GLenum pname, GLint param );
void qemu_glPointParameteri(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPointParameteriNV)( GLenum pname, GLint param );
void qemu_glPointParameteriNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPointParameteriv)( GLenum pname, const GLint *params );
void qemu_glPointParameteriv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPointParameterivNV)( GLenum pname, const GLint *params );
void qemu_glPointParameterivNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPointParameterxvOES)( GLenum pname, const GLfixed *params );
void qemu_glPointParameterxvOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPointSizexOES)( GLfixed size );
void qemu_glPointSizexOES(struct qemu_syscall *call);
GLint      (WINE_GLAPI *p_glPollAsyncSGIX)( GLuint *markerp );
void qemu_glPollAsyncSGIX(struct qemu_syscall *call);
GLint      (WINE_GLAPI *p_glPollInstrumentsSGIX)( GLint *marker_p );
void qemu_glPollInstrumentsSGIX(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPolygonOffsetClamp)( GLfloat factor, GLfloat units, GLfloat clamp );
void qemu_glPolygonOffsetClamp(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPolygonOffsetClampEXT)( GLfloat factor, GLfloat units, GLfloat clamp );
void qemu_glPolygonOffsetClampEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPolygonOffsetEXT)( GLfloat factor, GLfloat bias );
void qemu_glPolygonOffsetEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPolygonOffsetxOES)( GLfixed factor, GLfixed units );
void qemu_glPolygonOffsetxOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPopDebugGroup)(void);
void qemu_glPopDebugGroup(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPopGroupMarkerEXT)(void);
void qemu_glPopGroupMarkerEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPresentFrameDualFillNV)( GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLenum target1, GLuint fill1, GLenum target2, GLuint fill2, GLenum target3, GLuint fill3 );
void qemu_glPresentFrameDualFillNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPresentFrameKeyedNV)( GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLuint key0, GLenum target1, GLuint fill1, GLuint key1 );
void qemu_glPresentFrameKeyedNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPrimitiveBoundingBoxARB)( GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW );
void qemu_glPrimitiveBoundingBoxARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPrimitiveRestartIndex)( GLuint index );
void qemu_glPrimitiveRestartIndex(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPrimitiveRestartIndexNV)( GLuint index );
void qemu_glPrimitiveRestartIndexNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPrimitiveRestartNV)(void);
void qemu_glPrimitiveRestartNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPrioritizeTexturesEXT)( GLsizei n, const GLuint *textures, const GLclampf *priorities );
void qemu_glPrioritizeTexturesEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPrioritizeTexturesxOES)( GLsizei n, const GLuint *textures, const GLfixed *priorities );
void qemu_glPrioritizeTexturesxOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramBinary)( GLuint program, GLenum binaryFormat, const void *binary, GLsizei length );
void qemu_glProgramBinary(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramBufferParametersIivNV)( GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLint *params );
void qemu_glProgramBufferParametersIivNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramBufferParametersIuivNV)( GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLuint *params );
void qemu_glProgramBufferParametersIuivNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramBufferParametersfvNV)( GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLfloat *params );
void qemu_glProgramBufferParametersfvNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramEnvParameter4dARB)( GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w );
void qemu_glProgramEnvParameter4dARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramEnvParameter4dvARB)( GLenum target, GLuint index, const GLdouble *params );
void qemu_glProgramEnvParameter4dvARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramEnvParameter4fARB)( GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w );
void qemu_glProgramEnvParameter4fARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramEnvParameter4fvARB)( GLenum target, GLuint index, const GLfloat *params );
void qemu_glProgramEnvParameter4fvARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramEnvParameterI4iNV)( GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w );
void qemu_glProgramEnvParameterI4iNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramEnvParameterI4ivNV)( GLenum target, GLuint index, const GLint *params );
void qemu_glProgramEnvParameterI4ivNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramEnvParameterI4uiNV)( GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w );
void qemu_glProgramEnvParameterI4uiNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramEnvParameterI4uivNV)( GLenum target, GLuint index, const GLuint *params );
void qemu_glProgramEnvParameterI4uivNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramEnvParameters4fvEXT)( GLenum target, GLuint index, GLsizei count, const GLfloat *params );
void qemu_glProgramEnvParameters4fvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramEnvParametersI4ivNV)( GLenum target, GLuint index, GLsizei count, const GLint *params );
void qemu_glProgramEnvParametersI4ivNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramEnvParametersI4uivNV)( GLenum target, GLuint index, GLsizei count, const GLuint *params );
void qemu_glProgramEnvParametersI4uivNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramLocalParameter4dARB)( GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w );
void qemu_glProgramLocalParameter4dARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramLocalParameter4dvARB)( GLenum target, GLuint index, const GLdouble *params );
void qemu_glProgramLocalParameter4dvARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramLocalParameter4fARB)( GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w );
void qemu_glProgramLocalParameter4fARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramLocalParameter4fvARB)( GLenum target, GLuint index, const GLfloat *params );
void qemu_glProgramLocalParameter4fvARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramLocalParameterI4iNV)( GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w );
void qemu_glProgramLocalParameterI4iNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramLocalParameterI4ivNV)( GLenum target, GLuint index, const GLint *params );
void qemu_glProgramLocalParameterI4ivNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramLocalParameterI4uiNV)( GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w );
void qemu_glProgramLocalParameterI4uiNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramLocalParameterI4uivNV)( GLenum target, GLuint index, const GLuint *params );
void qemu_glProgramLocalParameterI4uivNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramLocalParameters4fvEXT)( GLenum target, GLuint index, GLsizei count, const GLfloat *params );
void qemu_glProgramLocalParameters4fvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramLocalParametersI4ivNV)( GLenum target, GLuint index, GLsizei count, const GLint *params );
void qemu_glProgramLocalParametersI4ivNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramLocalParametersI4uivNV)( GLenum target, GLuint index, GLsizei count, const GLuint *params );
void qemu_glProgramLocalParametersI4uivNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramNamedParameter4dNV)( GLuint id, GLsizei len, const GLubyte *name, GLdouble x, GLdouble y, GLdouble z, GLdouble w );
void qemu_glProgramNamedParameter4dNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramNamedParameter4dvNV)( GLuint id, GLsizei len, const GLubyte *name, const GLdouble *v );
void qemu_glProgramNamedParameter4dvNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramNamedParameter4fNV)( GLuint id, GLsizei len, const GLubyte *name, GLfloat x, GLfloat y, GLfloat z, GLfloat w );
void qemu_glProgramNamedParameter4fNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramNamedParameter4fvNV)( GLuint id, GLsizei len, const GLubyte *name, const GLfloat *v );
void qemu_glProgramNamedParameter4fvNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramParameter4dNV)( GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w );
void qemu_glProgramParameter4dNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramParameter4dvNV)( GLenum target, GLuint index, const GLdouble *v );
void qemu_glProgramParameter4dvNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramParameter4fNV)( GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w );
void qemu_glProgramParameter4fNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramParameter4fvNV)( GLenum target, GLuint index, const GLfloat *v );
void qemu_glProgramParameter4fvNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramParameteri)( GLuint program, GLenum pname, GLint value );
void qemu_glProgramParameteri(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramParameteriARB)( GLuint program, GLenum pname, GLint value );
void qemu_glProgramParameteriARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramParameteriEXT)( GLuint program, GLenum pname, GLint value );
void qemu_glProgramParameteriEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramParameters4dvNV)( GLenum target, GLuint index, GLsizei count, const GLdouble *v );
void qemu_glProgramParameters4dvNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramParameters4fvNV)( GLenum target, GLuint index, GLsizei count, const GLfloat *v );
void qemu_glProgramParameters4fvNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramPathFragmentInputGenNV)( GLuint program, GLint location, GLenum genMode, GLint components, const GLfloat *coeffs );
void qemu_glProgramPathFragmentInputGenNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramStringARB)( GLenum target, GLenum format, GLsizei len, const void *string );
void qemu_glProgramStringARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramSubroutineParametersuivNV)( GLenum target, GLsizei count, const GLuint *params );
void qemu_glProgramSubroutineParametersuivNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform1d)( GLuint program, GLint location, GLdouble v0 );
void qemu_glProgramUniform1d(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform1dEXT)( GLuint program, GLint location, GLdouble x );
void qemu_glProgramUniform1dEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform1dv)( GLuint program, GLint location, GLsizei count, const GLdouble *value );
void qemu_glProgramUniform1dv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform1dvEXT)( GLuint program, GLint location, GLsizei count, const GLdouble *value );
void qemu_glProgramUniform1dvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform1f)( GLuint program, GLint location, GLfloat v0 );
void qemu_glProgramUniform1f(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform1fEXT)( GLuint program, GLint location, GLfloat v0 );
void qemu_glProgramUniform1fEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform1fv)( GLuint program, GLint location, GLsizei count, const GLfloat *value );
void qemu_glProgramUniform1fv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform1fvEXT)( GLuint program, GLint location, GLsizei count, const GLfloat *value );
void qemu_glProgramUniform1fvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform1i)( GLuint program, GLint location, GLint v0 );
void qemu_glProgramUniform1i(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform1i64ARB)( GLuint program, GLint location, GLint64 x );
void qemu_glProgramUniform1i64ARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform1i64NV)( GLuint program, GLint location, GLint64EXT x );
void qemu_glProgramUniform1i64NV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform1i64vARB)( GLuint program, GLint location, GLsizei count, const GLint64 *value );
void qemu_glProgramUniform1i64vARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform1i64vNV)( GLuint program, GLint location, GLsizei count, const GLint64EXT *value );
void qemu_glProgramUniform1i64vNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform1iEXT)( GLuint program, GLint location, GLint v0 );
void qemu_glProgramUniform1iEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform1iv)( GLuint program, GLint location, GLsizei count, const GLint *value );
void qemu_glProgramUniform1iv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform1ivEXT)( GLuint program, GLint location, GLsizei count, const GLint *value );
void qemu_glProgramUniform1ivEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform1ui)( GLuint program, GLint location, GLuint v0 );
void qemu_glProgramUniform1ui(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform1ui64ARB)( GLuint program, GLint location, GLuint64 x );
void qemu_glProgramUniform1ui64ARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform1ui64NV)( GLuint program, GLint location, GLuint64EXT x );
void qemu_glProgramUniform1ui64NV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform1ui64vARB)( GLuint program, GLint location, GLsizei count, const GLuint64 *value );
void qemu_glProgramUniform1ui64vARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform1ui64vNV)( GLuint program, GLint location, GLsizei count, const GLuint64EXT *value );
void qemu_glProgramUniform1ui64vNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform1uiEXT)( GLuint program, GLint location, GLuint v0 );
void qemu_glProgramUniform1uiEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform1uiv)( GLuint program, GLint location, GLsizei count, const GLuint *value );
void qemu_glProgramUniform1uiv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform1uivEXT)( GLuint program, GLint location, GLsizei count, const GLuint *value );
void qemu_glProgramUniform1uivEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform2d)( GLuint program, GLint location, GLdouble v0, GLdouble v1 );
void qemu_glProgramUniform2d(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform2dEXT)( GLuint program, GLint location, GLdouble x, GLdouble y );
void qemu_glProgramUniform2dEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform2dv)( GLuint program, GLint location, GLsizei count, const GLdouble *value );
void qemu_glProgramUniform2dv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform2dvEXT)( GLuint program, GLint location, GLsizei count, const GLdouble *value );
void qemu_glProgramUniform2dvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform2f)( GLuint program, GLint location, GLfloat v0, GLfloat v1 );
void qemu_glProgramUniform2f(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform2fEXT)( GLuint program, GLint location, GLfloat v0, GLfloat v1 );
void qemu_glProgramUniform2fEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform2fv)( GLuint program, GLint location, GLsizei count, const GLfloat *value );
void qemu_glProgramUniform2fv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform2fvEXT)( GLuint program, GLint location, GLsizei count, const GLfloat *value );
void qemu_glProgramUniform2fvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform2i)( GLuint program, GLint location, GLint v0, GLint v1 );
void qemu_glProgramUniform2i(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform2i64ARB)( GLuint program, GLint location, GLint64 x, GLint64 y );
void qemu_glProgramUniform2i64ARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform2i64NV)( GLuint program, GLint location, GLint64EXT x, GLint64EXT y );
void qemu_glProgramUniform2i64NV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform2i64vARB)( GLuint program, GLint location, GLsizei count, const GLint64 *value );
void qemu_glProgramUniform2i64vARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform2i64vNV)( GLuint program, GLint location, GLsizei count, const GLint64EXT *value );
void qemu_glProgramUniform2i64vNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform2iEXT)( GLuint program, GLint location, GLint v0, GLint v1 );
void qemu_glProgramUniform2iEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform2iv)( GLuint program, GLint location, GLsizei count, const GLint *value );
void qemu_glProgramUniform2iv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform2ivEXT)( GLuint program, GLint location, GLsizei count, const GLint *value );
void qemu_glProgramUniform2ivEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform2ui)( GLuint program, GLint location, GLuint v0, GLuint v1 );
void qemu_glProgramUniform2ui(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform2ui64ARB)( GLuint program, GLint location, GLuint64 x, GLuint64 y );
void qemu_glProgramUniform2ui64ARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform2ui64NV)( GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y );
void qemu_glProgramUniform2ui64NV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform2ui64vARB)( GLuint program, GLint location, GLsizei count, const GLuint64 *value );
void qemu_glProgramUniform2ui64vARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform2ui64vNV)( GLuint program, GLint location, GLsizei count, const GLuint64EXT *value );
void qemu_glProgramUniform2ui64vNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform2uiEXT)( GLuint program, GLint location, GLuint v0, GLuint v1 );
void qemu_glProgramUniform2uiEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform2uiv)( GLuint program, GLint location, GLsizei count, const GLuint *value );
void qemu_glProgramUniform2uiv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform2uivEXT)( GLuint program, GLint location, GLsizei count, const GLuint *value );
void qemu_glProgramUniform2uivEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform3d)( GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2 );
void qemu_glProgramUniform3d(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform3dEXT)( GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z );
void qemu_glProgramUniform3dEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform3dv)( GLuint program, GLint location, GLsizei count, const GLdouble *value );
void qemu_glProgramUniform3dv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform3dvEXT)( GLuint program, GLint location, GLsizei count, const GLdouble *value );
void qemu_glProgramUniform3dvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform3f)( GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2 );
void qemu_glProgramUniform3f(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform3fEXT)( GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2 );
void qemu_glProgramUniform3fEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform3fv)( GLuint program, GLint location, GLsizei count, const GLfloat *value );
void qemu_glProgramUniform3fv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform3fvEXT)( GLuint program, GLint location, GLsizei count, const GLfloat *value );
void qemu_glProgramUniform3fvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform3i)( GLuint program, GLint location, GLint v0, GLint v1, GLint v2 );
void qemu_glProgramUniform3i(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform3i64ARB)( GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z );
void qemu_glProgramUniform3i64ARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform3i64NV)( GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z );
void qemu_glProgramUniform3i64NV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform3i64vARB)( GLuint program, GLint location, GLsizei count, const GLint64 *value );
void qemu_glProgramUniform3i64vARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform3i64vNV)( GLuint program, GLint location, GLsizei count, const GLint64EXT *value );
void qemu_glProgramUniform3i64vNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform3iEXT)( GLuint program, GLint location, GLint v0, GLint v1, GLint v2 );
void qemu_glProgramUniform3iEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform3iv)( GLuint program, GLint location, GLsizei count, const GLint *value );
void qemu_glProgramUniform3iv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform3ivEXT)( GLuint program, GLint location, GLsizei count, const GLint *value );
void qemu_glProgramUniform3ivEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform3ui)( GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2 );
void qemu_glProgramUniform3ui(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform3ui64ARB)( GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z );
void qemu_glProgramUniform3ui64ARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform3ui64NV)( GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z );
void qemu_glProgramUniform3ui64NV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform3ui64vARB)( GLuint program, GLint location, GLsizei count, const GLuint64 *value );
void qemu_glProgramUniform3ui64vARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform3ui64vNV)( GLuint program, GLint location, GLsizei count, const GLuint64EXT *value );
void qemu_glProgramUniform3ui64vNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform3uiEXT)( GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2 );
void qemu_glProgramUniform3uiEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform3uiv)( GLuint program, GLint location, GLsizei count, const GLuint *value );
void qemu_glProgramUniform3uiv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform3uivEXT)( GLuint program, GLint location, GLsizei count, const GLuint *value );
void qemu_glProgramUniform3uivEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform4d)( GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3 );
void qemu_glProgramUniform4d(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform4dEXT)( GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w );
void qemu_glProgramUniform4dEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform4dv)( GLuint program, GLint location, GLsizei count, const GLdouble *value );
void qemu_glProgramUniform4dv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform4dvEXT)( GLuint program, GLint location, GLsizei count, const GLdouble *value );
void qemu_glProgramUniform4dvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform4f)( GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3 );
void qemu_glProgramUniform4f(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform4fEXT)( GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3 );
void qemu_glProgramUniform4fEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform4fv)( GLuint program, GLint location, GLsizei count, const GLfloat *value );
void qemu_glProgramUniform4fv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform4fvEXT)( GLuint program, GLint location, GLsizei count, const GLfloat *value );
void qemu_glProgramUniform4fvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform4i)( GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3 );
void qemu_glProgramUniform4i(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform4i64ARB)( GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w );
void qemu_glProgramUniform4i64ARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform4i64NV)( GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w );
void qemu_glProgramUniform4i64NV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform4i64vARB)( GLuint program, GLint location, GLsizei count, const GLint64 *value );
void qemu_glProgramUniform4i64vARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform4i64vNV)( GLuint program, GLint location, GLsizei count, const GLint64EXT *value );
void qemu_glProgramUniform4i64vNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform4iEXT)( GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3 );
void qemu_glProgramUniform4iEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform4iv)( GLuint program, GLint location, GLsizei count, const GLint *value );
void qemu_glProgramUniform4iv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform4ivEXT)( GLuint program, GLint location, GLsizei count, const GLint *value );
void qemu_glProgramUniform4ivEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform4ui)( GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3 );
void qemu_glProgramUniform4ui(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform4ui64ARB)( GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w );
void qemu_glProgramUniform4ui64ARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform4ui64NV)( GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w );
void qemu_glProgramUniform4ui64NV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform4ui64vARB)( GLuint program, GLint location, GLsizei count, const GLuint64 *value );
void qemu_glProgramUniform4ui64vARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform4ui64vNV)( GLuint program, GLint location, GLsizei count, const GLuint64EXT *value );
void qemu_glProgramUniform4ui64vNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform4uiEXT)( GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3 );
void qemu_glProgramUniform4uiEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform4uiv)( GLuint program, GLint location, GLsizei count, const GLuint *value );
void qemu_glProgramUniform4uiv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniform4uivEXT)( GLuint program, GLint location, GLsizei count, const GLuint *value );
void qemu_glProgramUniform4uivEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniformHandleui64ARB)( GLuint program, GLint location, GLuint64 value );
void qemu_glProgramUniformHandleui64ARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniformHandleui64NV)( GLuint program, GLint location, GLuint64 value );
void qemu_glProgramUniformHandleui64NV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniformHandleui64vARB)( GLuint program, GLint location, GLsizei count, const GLuint64 *values );
void qemu_glProgramUniformHandleui64vARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniformHandleui64vNV)( GLuint program, GLint location, GLsizei count, const GLuint64 *values );
void qemu_glProgramUniformHandleui64vNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniformMatrix2dv)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
void qemu_glProgramUniformMatrix2dv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniformMatrix2dvEXT)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
void qemu_glProgramUniformMatrix2dvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniformMatrix2fv)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
void qemu_glProgramUniformMatrix2fv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniformMatrix2fvEXT)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
void qemu_glProgramUniformMatrix2fvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniformMatrix2x3dv)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
void qemu_glProgramUniformMatrix2x3dv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniformMatrix2x3dvEXT)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
void qemu_glProgramUniformMatrix2x3dvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniformMatrix2x3fv)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
void qemu_glProgramUniformMatrix2x3fv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniformMatrix2x3fvEXT)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
void qemu_glProgramUniformMatrix2x3fvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniformMatrix2x4dv)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
void qemu_glProgramUniformMatrix2x4dv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniformMatrix2x4dvEXT)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
void qemu_glProgramUniformMatrix2x4dvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniformMatrix2x4fv)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
void qemu_glProgramUniformMatrix2x4fv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniformMatrix2x4fvEXT)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
void qemu_glProgramUniformMatrix2x4fvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniformMatrix3dv)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
void qemu_glProgramUniformMatrix3dv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniformMatrix3dvEXT)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
void qemu_glProgramUniformMatrix3dvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniformMatrix3fv)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
void qemu_glProgramUniformMatrix3fv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniformMatrix3fvEXT)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
void qemu_glProgramUniformMatrix3fvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniformMatrix3x2dv)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
void qemu_glProgramUniformMatrix3x2dv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniformMatrix3x2dvEXT)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
void qemu_glProgramUniformMatrix3x2dvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniformMatrix3x2fv)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
void qemu_glProgramUniformMatrix3x2fv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniformMatrix3x2fvEXT)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
void qemu_glProgramUniformMatrix3x2fvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniformMatrix3x4dv)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
void qemu_glProgramUniformMatrix3x4dv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniformMatrix3x4dvEXT)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
void qemu_glProgramUniformMatrix3x4dvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniformMatrix3x4fv)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
void qemu_glProgramUniformMatrix3x4fv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniformMatrix3x4fvEXT)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
void qemu_glProgramUniformMatrix3x4fvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniformMatrix4dv)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
void qemu_glProgramUniformMatrix4dv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniformMatrix4dvEXT)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
void qemu_glProgramUniformMatrix4dvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniformMatrix4fv)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
void qemu_glProgramUniformMatrix4fv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniformMatrix4fvEXT)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
void qemu_glProgramUniformMatrix4fvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniformMatrix4x2dv)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
void qemu_glProgramUniformMatrix4x2dv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniformMatrix4x2dvEXT)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
void qemu_glProgramUniformMatrix4x2dvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniformMatrix4x2fv)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
void qemu_glProgramUniformMatrix4x2fv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniformMatrix4x2fvEXT)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
void qemu_glProgramUniformMatrix4x2fvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniformMatrix4x3dv)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
void qemu_glProgramUniformMatrix4x3dv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniformMatrix4x3dvEXT)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
void qemu_glProgramUniformMatrix4x3dvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniformMatrix4x3fv)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
void qemu_glProgramUniformMatrix4x3fv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniformMatrix4x3fvEXT)( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
void qemu_glProgramUniformMatrix4x3fvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniformui64NV)( GLuint program, GLint location, GLuint64EXT value );
void qemu_glProgramUniformui64NV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramUniformui64vNV)( GLuint program, GLint location, GLsizei count, const GLuint64EXT *value );
void qemu_glProgramUniformui64vNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProgramVertexLimitNV)( GLenum target, GLint limit );
void qemu_glProgramVertexLimitNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProvokingVertex)( GLenum mode );
void qemu_glProvokingVertex(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glProvokingVertexEXT)( GLenum mode );
void qemu_glProvokingVertexEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPushClientAttribDefaultEXT)( GLbitfield mask );
void qemu_glPushClientAttribDefaultEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPushDebugGroup)( GLenum source, GLuint id, GLsizei length, const GLchar *message );
void qemu_glPushDebugGroup(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glPushGroupMarkerEXT)( GLsizei length, const GLchar *marker );
void qemu_glPushGroupMarkerEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glQueryCounter)( GLuint id, GLenum target );
void qemu_glQueryCounter(struct qemu_syscall *call);
GLbitfield (WINE_GLAPI *p_glQueryMatrixxOES)( GLfixed *mantissa, GLint *exponent );
void qemu_glQueryMatrixxOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glQueryObjectParameteruiAMD)( GLenum target, GLuint id, GLenum pname, GLuint param );
void qemu_glQueryObjectParameteruiAMD(struct qemu_syscall *call);
GLint      (WINE_GLAPI *p_glQueryResourceNV)( GLenum queryType, GLint tagId, GLuint count, GLint *buffer );
void qemu_glQueryResourceNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glQueryResourceTagNV)( GLint tagId, const GLchar *tagString );
void qemu_glQueryResourceTagNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glRasterPos2xOES)( GLfixed x, GLfixed y );
void qemu_glRasterPos2xOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glRasterPos2xvOES)( const GLfixed *coords );
void qemu_glRasterPos2xvOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glRasterPos3xOES)( GLfixed x, GLfixed y, GLfixed z );
void qemu_glRasterPos3xOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glRasterPos3xvOES)( const GLfixed *coords );
void qemu_glRasterPos3xvOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glRasterPos4xOES)( GLfixed x, GLfixed y, GLfixed z, GLfixed w );
void qemu_glRasterPos4xOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glRasterPos4xvOES)( const GLfixed *coords );
void qemu_glRasterPos4xvOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glRasterSamplesEXT)( GLuint samples, GLboolean fixedsamplelocations );
void qemu_glRasterSamplesEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glReadBufferRegion)( GLenum region, GLint x, GLint y, GLsizei width, GLsizei height );
void qemu_glReadBufferRegion(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glReadInstrumentsSGIX)( GLint marker );
void qemu_glReadInstrumentsSGIX(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glReadnPixels)( GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data );
void qemu_glReadnPixels(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glReadnPixelsARB)( GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data );
void qemu_glReadnPixelsARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glRectxOES)( GLfixed x1, GLfixed y1, GLfixed x2, GLfixed y2 );
void qemu_glRectxOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glRectxvOES)( const GLfixed *v1, const GLfixed *v2 );
void qemu_glRectxvOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glReferencePlaneSGIX)( const GLdouble *equation );
void qemu_glReferencePlaneSGIX(struct qemu_syscall *call);
GLboolean  (WINE_GLAPI *p_glReleaseKeyedMutexWin32EXT)( GLuint memory, GLuint64 key );
void qemu_glReleaseKeyedMutexWin32EXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glReleaseShaderCompiler)(void);
void qemu_glReleaseShaderCompiler(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glRenderGpuMaskNV)( GLbitfield mask );
void qemu_glRenderGpuMaskNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glRenderbufferStorage)( GLenum target, GLenum internalformat, GLsizei width, GLsizei height );
void qemu_glRenderbufferStorage(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glRenderbufferStorageEXT)( GLenum target, GLenum internalformat, GLsizei width, GLsizei height );
void qemu_glRenderbufferStorageEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glRenderbufferStorageMultisample)( GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height );
void qemu_glRenderbufferStorageMultisample(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glRenderbufferStorageMultisampleAdvancedAMD)( GLenum target, GLsizei samples, GLsizei storageSamples, GLenum internalformat, GLsizei width, GLsizei height );
void qemu_glRenderbufferStorageMultisampleAdvancedAMD(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glRenderbufferStorageMultisampleCoverageNV)( GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height );
void qemu_glRenderbufferStorageMultisampleCoverageNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glRenderbufferStorageMultisampleEXT)( GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height );
void qemu_glRenderbufferStorageMultisampleEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glReplacementCodePointerSUN)( GLenum type, GLsizei stride, const void **pointer );
void qemu_glReplacementCodePointerSUN(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glReplacementCodeubSUN)( GLubyte code );
void qemu_glReplacementCodeubSUN(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glReplacementCodeubvSUN)( const GLubyte *code );
void qemu_glReplacementCodeubvSUN(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glReplacementCodeuiColor3fVertex3fSUN)( GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z );
void qemu_glReplacementCodeuiColor3fVertex3fSUN(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glReplacementCodeuiColor3fVertex3fvSUN)( const GLuint *rc, const GLfloat *c, const GLfloat *v );
void qemu_glReplacementCodeuiColor3fVertex3fvSUN(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glReplacementCodeuiColor4fNormal3fVertex3fSUN)( GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z );
void qemu_glReplacementCodeuiColor4fNormal3fVertex3fSUN(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glReplacementCodeuiColor4fNormal3fVertex3fvSUN)( const GLuint *rc, const GLfloat *c, const GLfloat *n, const GLfloat *v );
void qemu_glReplacementCodeuiColor4fNormal3fVertex3fvSUN(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glReplacementCodeuiColor4ubVertex3fSUN)( GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z );
void qemu_glReplacementCodeuiColor4ubVertex3fSUN(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glReplacementCodeuiColor4ubVertex3fvSUN)( const GLuint *rc, const GLubyte *c, const GLfloat *v );
void qemu_glReplacementCodeuiColor4ubVertex3fvSUN(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glReplacementCodeuiNormal3fVertex3fSUN)( GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z );
void qemu_glReplacementCodeuiNormal3fVertex3fSUN(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glReplacementCodeuiNormal3fVertex3fvSUN)( const GLuint *rc, const GLfloat *n, const GLfloat *v );
void qemu_glReplacementCodeuiNormal3fVertex3fvSUN(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glReplacementCodeuiSUN)( GLuint code );
void qemu_glReplacementCodeuiSUN(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN)( GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z );
void qemu_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN)( const GLuint *rc, const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v );
void qemu_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN)( GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z );
void qemu_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN)( const GLuint *rc, const GLfloat *tc, const GLfloat *n, const GLfloat *v );
void qemu_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glReplacementCodeuiTexCoord2fVertex3fSUN)( GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z );
void qemu_glReplacementCodeuiTexCoord2fVertex3fSUN(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glReplacementCodeuiTexCoord2fVertex3fvSUN)( const GLuint *rc, const GLfloat *tc, const GLfloat *v );
void qemu_glReplacementCodeuiTexCoord2fVertex3fvSUN(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glReplacementCodeuiVertex3fSUN)( GLuint rc, GLfloat x, GLfloat y, GLfloat z );
void qemu_glReplacementCodeuiVertex3fSUN(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glReplacementCodeuiVertex3fvSUN)( const GLuint *rc, const GLfloat *v );
void qemu_glReplacementCodeuiVertex3fvSUN(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glReplacementCodeuivSUN)( const GLuint *code );
void qemu_glReplacementCodeuivSUN(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glReplacementCodeusSUN)( GLushort code );
void qemu_glReplacementCodeusSUN(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glReplacementCodeusvSUN)( const GLushort *code );
void qemu_glReplacementCodeusvSUN(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glRequestResidentProgramsNV)( GLsizei n, const GLuint *programs );
void qemu_glRequestResidentProgramsNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glResetHistogram)( GLenum target );
void qemu_glResetHistogram(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glResetHistogramEXT)( GLenum target );
void qemu_glResetHistogramEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glResetMemoryObjectParameterNV)( GLuint memory, GLenum pname );
void qemu_glResetMemoryObjectParameterNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glResetMinmax)( GLenum target );
void qemu_glResetMinmax(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glResetMinmaxEXT)( GLenum target );
void qemu_glResetMinmaxEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glResizeBuffersMESA)(void);
void qemu_glResizeBuffersMESA(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glResolveDepthValuesNV)(void);
void qemu_glResolveDepthValuesNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glResumeTransformFeedback)(void);
void qemu_glResumeTransformFeedback(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glResumeTransformFeedbackNV)(void);
void qemu_glResumeTransformFeedbackNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glRotatexOES)( GLfixed angle, GLfixed x, GLfixed y, GLfixed z );
void qemu_glRotatexOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glSampleCoverage)( GLfloat value, GLboolean invert );
void qemu_glSampleCoverage(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glSampleCoverageARB)( GLfloat value, GLboolean invert );
void qemu_glSampleCoverageARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glSampleMapATI)( GLuint dst, GLuint interp, GLenum swizzle );
void qemu_glSampleMapATI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glSampleMaskEXT)( GLclampf value, GLboolean invert );
void qemu_glSampleMaskEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glSampleMaskIndexedNV)( GLuint index, GLbitfield mask );
void qemu_glSampleMaskIndexedNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glSampleMaskSGIS)( GLclampf value, GLboolean invert );
void qemu_glSampleMaskSGIS(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glSampleMaski)( GLuint maskNumber, GLbitfield mask );
void qemu_glSampleMaski(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glSamplePatternEXT)( GLenum pattern );
void qemu_glSamplePatternEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glSamplePatternSGIS)( GLenum pattern );
void qemu_glSamplePatternSGIS(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glSamplerParameterIiv)( GLuint sampler, GLenum pname, const GLint *param );
void qemu_glSamplerParameterIiv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glSamplerParameterIuiv)( GLuint sampler, GLenum pname, const GLuint *param );
void qemu_glSamplerParameterIuiv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glSamplerParameterf)( GLuint sampler, GLenum pname, GLfloat param );
void qemu_glSamplerParameterf(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glSamplerParameterfv)( GLuint sampler, GLenum pname, const GLfloat *param );
void qemu_glSamplerParameterfv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glSamplerParameteri)( GLuint sampler, GLenum pname, GLint param );
void qemu_glSamplerParameteri(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glSamplerParameteriv)( GLuint sampler, GLenum pname, const GLint *param );
void qemu_glSamplerParameteriv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glScalexOES)( GLfixed x, GLfixed y, GLfixed z );
void qemu_glScalexOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glScissorArrayv)( GLuint first, GLsizei count, const GLint *v );
void qemu_glScissorArrayv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glScissorExclusiveArrayvNV)( GLuint first, GLsizei count, const GLint *v );
void qemu_glScissorExclusiveArrayvNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glScissorExclusiveNV)( GLint x, GLint y, GLsizei width, GLsizei height );
void qemu_glScissorExclusiveNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glScissorIndexed)( GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height );
void qemu_glScissorIndexed(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glScissorIndexedv)( GLuint index, const GLint *v );
void qemu_glScissorIndexedv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glSecondaryColor3b)( GLbyte red, GLbyte green, GLbyte blue );
void qemu_glSecondaryColor3b(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glSecondaryColor3bEXT)( GLbyte red, GLbyte green, GLbyte blue );
void qemu_glSecondaryColor3bEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glSecondaryColor3bv)( const GLbyte *v );
void qemu_glSecondaryColor3bv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glSecondaryColor3bvEXT)( const GLbyte *v );
void qemu_glSecondaryColor3bvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glSecondaryColor3d)( GLdouble red, GLdouble green, GLdouble blue );
void qemu_glSecondaryColor3d(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glSecondaryColor3dEXT)( GLdouble red, GLdouble green, GLdouble blue );
void qemu_glSecondaryColor3dEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glSecondaryColor3dv)( const GLdouble *v );
void qemu_glSecondaryColor3dv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glSecondaryColor3dvEXT)( const GLdouble *v );
void qemu_glSecondaryColor3dvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glSecondaryColor3f)( GLfloat red, GLfloat green, GLfloat blue );
void qemu_glSecondaryColor3f(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glSecondaryColor3fEXT)( GLfloat red, GLfloat green, GLfloat blue );
void qemu_glSecondaryColor3fEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glSecondaryColor3fv)( const GLfloat *v );
void qemu_glSecondaryColor3fv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glSecondaryColor3fvEXT)( const GLfloat *v );
void qemu_glSecondaryColor3fvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glSecondaryColor3hNV)( GLhalfNV red, GLhalfNV green, GLhalfNV blue );
void qemu_glSecondaryColor3hNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glSecondaryColor3hvNV)( const GLhalfNV *v );
void qemu_glSecondaryColor3hvNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glSecondaryColor3i)( GLint red, GLint green, GLint blue );
void qemu_glSecondaryColor3i(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glSecondaryColor3iEXT)( GLint red, GLint green, GLint blue );
void qemu_glSecondaryColor3iEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glSecondaryColor3iv)( const GLint *v );
void qemu_glSecondaryColor3iv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glSecondaryColor3ivEXT)( const GLint *v );
void qemu_glSecondaryColor3ivEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glSecondaryColor3s)( GLshort red, GLshort green, GLshort blue );
void qemu_glSecondaryColor3s(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glSecondaryColor3sEXT)( GLshort red, GLshort green, GLshort blue );
void qemu_glSecondaryColor3sEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glSecondaryColor3sv)( const GLshort *v );
void qemu_glSecondaryColor3sv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glSecondaryColor3svEXT)( const GLshort *v );
void qemu_glSecondaryColor3svEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glSecondaryColor3ub)( GLubyte red, GLubyte green, GLubyte blue );
void qemu_glSecondaryColor3ub(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glSecondaryColor3ubEXT)( GLubyte red, GLubyte green, GLubyte blue );
void qemu_glSecondaryColor3ubEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glSecondaryColor3ubv)( const GLubyte *v );
void qemu_glSecondaryColor3ubv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glSecondaryColor3ubvEXT)( const GLubyte *v );
void qemu_glSecondaryColor3ubvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glSecondaryColor3ui)( GLuint red, GLuint green, GLuint blue );
void qemu_glSecondaryColor3ui(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glSecondaryColor3uiEXT)( GLuint red, GLuint green, GLuint blue );
void qemu_glSecondaryColor3uiEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glSecondaryColor3uiv)( const GLuint *v );
void qemu_glSecondaryColor3uiv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glSecondaryColor3uivEXT)( const GLuint *v );
void qemu_glSecondaryColor3uivEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glSecondaryColor3us)( GLushort red, GLushort green, GLushort blue );
void qemu_glSecondaryColor3us(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glSecondaryColor3usEXT)( GLushort red, GLushort green, GLushort blue );
void qemu_glSecondaryColor3usEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glSecondaryColor3usv)( const GLushort *v );
void qemu_glSecondaryColor3usv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glSecondaryColor3usvEXT)( const GLushort *v );
void qemu_glSecondaryColor3usvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glSecondaryColorFormatNV)( GLint size, GLenum type, GLsizei stride );
void qemu_glSecondaryColorFormatNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glSecondaryColorP3ui)( GLenum type, GLuint color );
void qemu_glSecondaryColorP3ui(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glSecondaryColorP3uiv)( GLenum type, const GLuint *color );
void qemu_glSecondaryColorP3uiv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glSecondaryColorPointer)( GLint size, GLenum type, GLsizei stride, const void *pointer );
void qemu_glSecondaryColorPointer(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glSecondaryColorPointerEXT)( GLint size, GLenum type, GLsizei stride, const void *pointer );
void qemu_glSecondaryColorPointerEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glSecondaryColorPointerListIBM)( GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride );
void qemu_glSecondaryColorPointerListIBM(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glSelectPerfMonitorCountersAMD)( GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint *counterList );
void qemu_glSelectPerfMonitorCountersAMD(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glSelectTextureCoordSetSGIS)( GLenum target );
void qemu_glSelectTextureCoordSetSGIS(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glSelectTextureSGIS)( GLenum target );
void qemu_glSelectTextureSGIS(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glSemaphoreParameterui64vEXT)( GLuint semaphore, GLenum pname, const GLuint64 *params );
void qemu_glSemaphoreParameterui64vEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glSeparableFilter2D)( GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *row, const void *column );
void qemu_glSeparableFilter2D(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glSeparableFilter2DEXT)( GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *row, const void *column );
void qemu_glSeparableFilter2DEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glSetFenceAPPLE)( GLuint fence );
void qemu_glSetFenceAPPLE(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glSetFenceNV)( GLuint fence, GLenum condition );
void qemu_glSetFenceNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glSetFragmentShaderConstantATI)( GLuint dst, const GLfloat *value );
void qemu_glSetFragmentShaderConstantATI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glSetInvariantEXT)( GLuint id, GLenum type, const void *addr );
void qemu_glSetInvariantEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glSetLocalConstantEXT)( GLuint id, GLenum type, const void *addr );
void qemu_glSetLocalConstantEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glSetMultisamplefvAMD)( GLenum pname, GLuint index, const GLfloat *val );
void qemu_glSetMultisamplefvAMD(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glShaderBinary)( GLsizei count, const GLuint *shaders, GLenum binaryformat, const void *binary, GLsizei length );
void qemu_glShaderBinary(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glShaderOp1EXT)( GLenum op, GLuint res, GLuint arg1 );
void qemu_glShaderOp1EXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glShaderOp2EXT)( GLenum op, GLuint res, GLuint arg1, GLuint arg2 );
void qemu_glShaderOp2EXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glShaderOp3EXT)( GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3 );
void qemu_glShaderOp3EXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glShaderSource)( GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length );
void qemu_glShaderSource(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glShaderSourceARB)( GLhandleARB shaderObj, GLsizei count, const GLcharARB **string, const GLint *length );
void qemu_glShaderSourceARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glShaderStorageBlockBinding)( GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding );
void qemu_glShaderStorageBlockBinding(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glShadingRateImageBarrierNV)( GLboolean synchronize );
void qemu_glShadingRateImageBarrierNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glShadingRateImagePaletteNV)( GLuint viewport, GLuint first, GLsizei count, const GLenum *rates );
void qemu_glShadingRateImagePaletteNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glShadingRateSampleOrderCustomNV)( GLenum rate, GLuint samples, const GLint *locations );
void qemu_glShadingRateSampleOrderCustomNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glShadingRateSampleOrderNV)( GLenum order );
void qemu_glShadingRateSampleOrderNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glSharpenTexFuncSGIS)( GLenum target, GLsizei n, const GLfloat *points );
void qemu_glSharpenTexFuncSGIS(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glSignalSemaphoreEXT)( GLuint semaphore, GLuint numBufferBarriers, const GLuint *buffers, GLuint numTextureBarriers, const GLuint *textures, const GLenum *dstLayouts );
void qemu_glSignalSemaphoreEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glSignalSemaphoreui64NVX)( GLuint signalGpu, GLsizei fenceObjectCount, const GLuint *semaphoreArray, const GLuint64 *fenceValueArray );
void qemu_glSignalSemaphoreui64NVX(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glSignalVkFenceNV)( GLuint64 vkFence );
void qemu_glSignalVkFenceNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glSignalVkSemaphoreNV)( GLuint64 vkSemaphore );
void qemu_glSignalVkSemaphoreNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glSpecializeShader)( GLuint shader, const GLchar *pEntryPoint, GLuint numSpecializationConstants, const GLuint *pConstantIndex, const GLuint *pConstantValue );
void qemu_glSpecializeShader(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glSpecializeShaderARB)( GLuint shader, const GLchar *pEntryPoint, GLuint numSpecializationConstants, const GLuint *pConstantIndex, const GLuint *pConstantValue );
void qemu_glSpecializeShaderARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glSpriteParameterfSGIX)( GLenum pname, GLfloat param );
void qemu_glSpriteParameterfSGIX(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glSpriteParameterfvSGIX)( GLenum pname, const GLfloat *params );
void qemu_glSpriteParameterfvSGIX(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glSpriteParameteriSGIX)( GLenum pname, GLint param );
void qemu_glSpriteParameteriSGIX(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glSpriteParameterivSGIX)( GLenum pname, const GLint *params );
void qemu_glSpriteParameterivSGIX(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glStartInstrumentsSGIX)(void);
void qemu_glStartInstrumentsSGIX(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glStateCaptureNV)( GLuint state, GLenum mode );
void qemu_glStateCaptureNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glStencilClearTagEXT)( GLsizei stencilTagBits, GLuint stencilClearTag );
void qemu_glStencilClearTagEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glStencilFillPathInstancedNV)( GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues );
void qemu_glStencilFillPathInstancedNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glStencilFillPathNV)( GLuint path, GLenum fillMode, GLuint mask );
void qemu_glStencilFillPathNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glStencilFuncSeparate)( GLenum face, GLenum func, GLint ref, GLuint mask );
void qemu_glStencilFuncSeparate(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glStencilFuncSeparateATI)( GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask );
void qemu_glStencilFuncSeparateATI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glStencilMaskSeparate)( GLenum face, GLuint mask );
void qemu_glStencilMaskSeparate(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glStencilOpSeparate)( GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass );
void qemu_glStencilOpSeparate(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glStencilOpSeparateATI)( GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass );
void qemu_glStencilOpSeparateATI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glStencilOpValueAMD)( GLenum face, GLuint value );
void qemu_glStencilOpValueAMD(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glStencilStrokePathInstancedNV)( GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues );
void qemu_glStencilStrokePathInstancedNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glStencilStrokePathNV)( GLuint path, GLint reference, GLuint mask );
void qemu_glStencilStrokePathNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glStencilThenCoverFillPathInstancedNV)( GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues );
void qemu_glStencilThenCoverFillPathInstancedNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glStencilThenCoverFillPathNV)( GLuint path, GLenum fillMode, GLuint mask, GLenum coverMode );
void qemu_glStencilThenCoverFillPathNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glStencilThenCoverStrokePathInstancedNV)( GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues );
void qemu_glStencilThenCoverStrokePathInstancedNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glStencilThenCoverStrokePathNV)( GLuint path, GLint reference, GLuint mask, GLenum coverMode );
void qemu_glStencilThenCoverStrokePathNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glStopInstrumentsSGIX)( GLint marker );
void qemu_glStopInstrumentsSGIX(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glStringMarkerGREMEDY)( GLsizei len, const void *string );
void qemu_glStringMarkerGREMEDY(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glSubpixelPrecisionBiasNV)( GLuint xbits, GLuint ybits );
void qemu_glSubpixelPrecisionBiasNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glSwizzleEXT)( GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW );
void qemu_glSwizzleEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glSyncTextureINTEL)( GLuint texture );
void qemu_glSyncTextureINTEL(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTagSampleBufferSGIX)(void);
void qemu_glTagSampleBufferSGIX(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTangent3bEXT)( GLbyte tx, GLbyte ty, GLbyte tz );
void qemu_glTangent3bEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTangent3bvEXT)( const GLbyte *v );
void qemu_glTangent3bvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTangent3dEXT)( GLdouble tx, GLdouble ty, GLdouble tz );
void qemu_glTangent3dEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTangent3dvEXT)( const GLdouble *v );
void qemu_glTangent3dvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTangent3fEXT)( GLfloat tx, GLfloat ty, GLfloat tz );
void qemu_glTangent3fEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTangent3fvEXT)( const GLfloat *v );
void qemu_glTangent3fvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTangent3iEXT)( GLint tx, GLint ty, GLint tz );
void qemu_glTangent3iEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTangent3ivEXT)( const GLint *v );
void qemu_glTangent3ivEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTangent3sEXT)( GLshort tx, GLshort ty, GLshort tz );
void qemu_glTangent3sEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTangent3svEXT)( const GLshort *v );
void qemu_glTangent3svEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTangentPointerEXT)( GLenum type, GLsizei stride, const void *pointer );
void qemu_glTangentPointerEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTbufferMask3DFX)( GLuint mask );
void qemu_glTbufferMask3DFX(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTessellationFactorAMD)( GLfloat factor );
void qemu_glTessellationFactorAMD(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTessellationModeAMD)( GLenum mode );
void qemu_glTessellationModeAMD(struct qemu_syscall *call);
GLboolean  (WINE_GLAPI *p_glTestFenceAPPLE)( GLuint fence );
void qemu_glTestFenceAPPLE(struct qemu_syscall *call);
GLboolean  (WINE_GLAPI *p_glTestFenceNV)( GLuint fence );
void qemu_glTestFenceNV(struct qemu_syscall *call);
GLboolean  (WINE_GLAPI *p_glTestObjectAPPLE)( GLenum object, GLuint name );
void qemu_glTestObjectAPPLE(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexAttachMemoryNV)( GLenum target, GLuint memory, GLuint64 offset );
void qemu_glTexAttachMemoryNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexBuffer)( GLenum target, GLenum internalformat, GLuint buffer );
void qemu_glTexBuffer(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexBufferARB)( GLenum target, GLenum internalformat, GLuint buffer );
void qemu_glTexBufferARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexBufferEXT)( GLenum target, GLenum internalformat, GLuint buffer );
void qemu_glTexBufferEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexBufferRange)( GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size );
void qemu_glTexBufferRange(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexBumpParameterfvATI)( GLenum pname, const GLfloat *param );
void qemu_glTexBumpParameterfvATI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexBumpParameterivATI)( GLenum pname, const GLint *param );
void qemu_glTexBumpParameterivATI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexCoord1bOES)( GLbyte s );
void qemu_glTexCoord1bOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexCoord1bvOES)( const GLbyte *coords );
void qemu_glTexCoord1bvOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexCoord1hNV)( GLhalfNV s );
void qemu_glTexCoord1hNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexCoord1hvNV)( const GLhalfNV *v );
void qemu_glTexCoord1hvNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexCoord1xOES)( GLfixed s );
void qemu_glTexCoord1xOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexCoord1xvOES)( const GLfixed *coords );
void qemu_glTexCoord1xvOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexCoord2bOES)( GLbyte s, GLbyte t );
void qemu_glTexCoord2bOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexCoord2bvOES)( const GLbyte *coords );
void qemu_glTexCoord2bvOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexCoord2fColor3fVertex3fSUN)( GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z );
void qemu_glTexCoord2fColor3fVertex3fSUN(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexCoord2fColor3fVertex3fvSUN)( const GLfloat *tc, const GLfloat *c, const GLfloat *v );
void qemu_glTexCoord2fColor3fVertex3fvSUN(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexCoord2fColor4fNormal3fVertex3fSUN)( GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z );
void qemu_glTexCoord2fColor4fNormal3fVertex3fSUN(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexCoord2fColor4fNormal3fVertex3fvSUN)( const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v );
void qemu_glTexCoord2fColor4fNormal3fVertex3fvSUN(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexCoord2fColor4ubVertex3fSUN)( GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z );
void qemu_glTexCoord2fColor4ubVertex3fSUN(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexCoord2fColor4ubVertex3fvSUN)( const GLfloat *tc, const GLubyte *c, const GLfloat *v );
void qemu_glTexCoord2fColor4ubVertex3fvSUN(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexCoord2fNormal3fVertex3fSUN)( GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z );
void qemu_glTexCoord2fNormal3fVertex3fSUN(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexCoord2fNormal3fVertex3fvSUN)( const GLfloat *tc, const GLfloat *n, const GLfloat *v );
void qemu_glTexCoord2fNormal3fVertex3fvSUN(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexCoord2fVertex3fSUN)( GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z );
void qemu_glTexCoord2fVertex3fSUN(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexCoord2fVertex3fvSUN)( const GLfloat *tc, const GLfloat *v );
void qemu_glTexCoord2fVertex3fvSUN(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexCoord2hNV)( GLhalfNV s, GLhalfNV t );
void qemu_glTexCoord2hNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexCoord2hvNV)( const GLhalfNV *v );
void qemu_glTexCoord2hvNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexCoord2xOES)( GLfixed s, GLfixed t );
void qemu_glTexCoord2xOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexCoord2xvOES)( const GLfixed *coords );
void qemu_glTexCoord2xvOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexCoord3bOES)( GLbyte s, GLbyte t, GLbyte r );
void qemu_glTexCoord3bOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexCoord3bvOES)( const GLbyte *coords );
void qemu_glTexCoord3bvOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexCoord3hNV)( GLhalfNV s, GLhalfNV t, GLhalfNV r );
void qemu_glTexCoord3hNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexCoord3hvNV)( const GLhalfNV *v );
void qemu_glTexCoord3hvNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexCoord3xOES)( GLfixed s, GLfixed t, GLfixed r );
void qemu_glTexCoord3xOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexCoord3xvOES)( const GLfixed *coords );
void qemu_glTexCoord3xvOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexCoord4bOES)( GLbyte s, GLbyte t, GLbyte r, GLbyte q );
void qemu_glTexCoord4bOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexCoord4bvOES)( const GLbyte *coords );
void qemu_glTexCoord4bvOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexCoord4fColor4fNormal3fVertex4fSUN)( GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w );
void qemu_glTexCoord4fColor4fNormal3fVertex4fSUN(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexCoord4fColor4fNormal3fVertex4fvSUN)( const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v );
void qemu_glTexCoord4fColor4fNormal3fVertex4fvSUN(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexCoord4fVertex4fSUN)( GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w );
void qemu_glTexCoord4fVertex4fSUN(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexCoord4fVertex4fvSUN)( const GLfloat *tc, const GLfloat *v );
void qemu_glTexCoord4fVertex4fvSUN(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexCoord4hNV)( GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q );
void qemu_glTexCoord4hNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexCoord4hvNV)( const GLhalfNV *v );
void qemu_glTexCoord4hvNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexCoord4xOES)( GLfixed s, GLfixed t, GLfixed r, GLfixed q );
void qemu_glTexCoord4xOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexCoord4xvOES)( const GLfixed *coords );
void qemu_glTexCoord4xvOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexCoordFormatNV)( GLint size, GLenum type, GLsizei stride );
void qemu_glTexCoordFormatNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexCoordP1ui)( GLenum type, GLuint coords );
void qemu_glTexCoordP1ui(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexCoordP1uiv)( GLenum type, const GLuint *coords );
void qemu_glTexCoordP1uiv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexCoordP2ui)( GLenum type, GLuint coords );
void qemu_glTexCoordP2ui(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexCoordP2uiv)( GLenum type, const GLuint *coords );
void qemu_glTexCoordP2uiv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexCoordP3ui)( GLenum type, GLuint coords );
void qemu_glTexCoordP3ui(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexCoordP3uiv)( GLenum type, const GLuint *coords );
void qemu_glTexCoordP3uiv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexCoordP4ui)( GLenum type, GLuint coords );
void qemu_glTexCoordP4ui(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexCoordP4uiv)( GLenum type, const GLuint *coords );
void qemu_glTexCoordP4uiv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexCoordPointerEXT)( GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer );
void qemu_glTexCoordPointerEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexCoordPointerListIBM)( GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride );
void qemu_glTexCoordPointerListIBM(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexCoordPointervINTEL)( GLint size, GLenum type, const void **pointer );
void qemu_glTexCoordPointervINTEL(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexEnvxOES)( GLenum target, GLenum pname, GLfixed param );
void qemu_glTexEnvxOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexEnvxvOES)( GLenum target, GLenum pname, const GLfixed *params );
void qemu_glTexEnvxvOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexFilterFuncSGIS)( GLenum target, GLenum filter, GLsizei n, const GLfloat *weights );
void qemu_glTexFilterFuncSGIS(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexGenxOES)( GLenum coord, GLenum pname, GLfixed param );
void qemu_glTexGenxOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexGenxvOES)( GLenum coord, GLenum pname, const GLfixed *params );
void qemu_glTexGenxvOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexImage2DMultisample)( GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations );
void qemu_glTexImage2DMultisample(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexImage2DMultisampleCoverageNV)( GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations );
void qemu_glTexImage2DMultisampleCoverageNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexImage3D)( GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels );
void qemu_glTexImage3D(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexImage3DEXT)( GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels );
void qemu_glTexImage3DEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexImage3DMultisample)( GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations );
void qemu_glTexImage3DMultisample(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexImage3DMultisampleCoverageNV)( GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations );
void qemu_glTexImage3DMultisampleCoverageNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexImage4DSGIS)( GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, const void *pixels );
void qemu_glTexImage4DSGIS(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexPageCommitmentARB)( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit );
void qemu_glTexPageCommitmentARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexParameterIiv)( GLenum target, GLenum pname, const GLint *params );
void qemu_glTexParameterIiv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexParameterIivEXT)( GLenum target, GLenum pname, const GLint *params );
void qemu_glTexParameterIivEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexParameterIuiv)( GLenum target, GLenum pname, const GLuint *params );
void qemu_glTexParameterIuiv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexParameterIuivEXT)( GLenum target, GLenum pname, const GLuint *params );
void qemu_glTexParameterIuivEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexParameterxOES)( GLenum target, GLenum pname, GLfixed param );
void qemu_glTexParameterxOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexParameterxvOES)( GLenum target, GLenum pname, const GLfixed *params );
void qemu_glTexParameterxvOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexRenderbufferNV)( GLenum target, GLuint renderbuffer );
void qemu_glTexRenderbufferNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexStorage1D)( GLenum target, GLsizei levels, GLenum internalformat, GLsizei width );
void qemu_glTexStorage1D(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexStorage2D)( GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height );
void qemu_glTexStorage2D(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexStorage2DMultisample)( GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations );
void qemu_glTexStorage2DMultisample(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexStorage3D)( GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth );
void qemu_glTexStorage3D(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexStorage3DMultisample)( GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations );
void qemu_glTexStorage3DMultisample(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexStorageMem1DEXT)( GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLuint memory, GLuint64 offset );
void qemu_glTexStorageMem1DEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexStorageMem2DEXT)( GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset );
void qemu_glTexStorageMem2DEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexStorageMem2DMultisampleEXT)( GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset );
void qemu_glTexStorageMem2DMultisampleEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexStorageMem3DEXT)( GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset );
void qemu_glTexStorageMem3DEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexStorageMem3DMultisampleEXT)( GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset );
void qemu_glTexStorageMem3DMultisampleEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexStorageSparseAMD)( GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags );
void qemu_glTexStorageSparseAMD(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexSubImage1DEXT)( GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels );
void qemu_glTexSubImage1DEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexSubImage2DEXT)( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels );
void qemu_glTexSubImage2DEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexSubImage3D)( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels );
void qemu_glTexSubImage3D(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexSubImage3DEXT)( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels );
void qemu_glTexSubImage3DEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexSubImage4DSGIS)( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, const void *pixels );
void qemu_glTexSubImage4DSGIS(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTextureAttachMemoryNV)( GLuint texture, GLuint memory, GLuint64 offset );
void qemu_glTextureAttachMemoryNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTextureBarrier)(void);
void qemu_glTextureBarrier(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTextureBarrierNV)(void);
void qemu_glTextureBarrierNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTextureBuffer)( GLuint texture, GLenum internalformat, GLuint buffer );
void qemu_glTextureBuffer(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTextureBufferEXT)( GLuint texture, GLenum target, GLenum internalformat, GLuint buffer );
void qemu_glTextureBufferEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTextureBufferRange)( GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size );
void qemu_glTextureBufferRange(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTextureBufferRangeEXT)( GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size );
void qemu_glTextureBufferRangeEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTextureColorMaskSGIS)( GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha );
void qemu_glTextureColorMaskSGIS(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTextureImage1DEXT)( GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels );
void qemu_glTextureImage1DEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTextureImage2DEXT)( GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels );
void qemu_glTextureImage2DEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTextureImage2DMultisampleCoverageNV)( GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations );
void qemu_glTextureImage2DMultisampleCoverageNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTextureImage2DMultisampleNV)( GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations );
void qemu_glTextureImage2DMultisampleNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTextureImage3DEXT)( GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels );
void qemu_glTextureImage3DEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTextureImage3DMultisampleCoverageNV)( GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations );
void qemu_glTextureImage3DMultisampleCoverageNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTextureImage3DMultisampleNV)( GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations );
void qemu_glTextureImage3DMultisampleNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTextureLightEXT)( GLenum pname );
void qemu_glTextureLightEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTextureMaterialEXT)( GLenum face, GLenum mode );
void qemu_glTextureMaterialEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTextureNormalEXT)( GLenum mode );
void qemu_glTextureNormalEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTexturePageCommitmentEXT)( GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit );
void qemu_glTexturePageCommitmentEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTextureParameterIiv)( GLuint texture, GLenum pname, const GLint *params );
void qemu_glTextureParameterIiv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTextureParameterIivEXT)( GLuint texture, GLenum target, GLenum pname, const GLint *params );
void qemu_glTextureParameterIivEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTextureParameterIuiv)( GLuint texture, GLenum pname, const GLuint *params );
void qemu_glTextureParameterIuiv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTextureParameterIuivEXT)( GLuint texture, GLenum target, GLenum pname, const GLuint *params );
void qemu_glTextureParameterIuivEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTextureParameterf)( GLuint texture, GLenum pname, GLfloat param );
void qemu_glTextureParameterf(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTextureParameterfEXT)( GLuint texture, GLenum target, GLenum pname, GLfloat param );
void qemu_glTextureParameterfEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTextureParameterfv)( GLuint texture, GLenum pname, const GLfloat *param );
void qemu_glTextureParameterfv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTextureParameterfvEXT)( GLuint texture, GLenum target, GLenum pname, const GLfloat *params );
void qemu_glTextureParameterfvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTextureParameteri)( GLuint texture, GLenum pname, GLint param );
void qemu_glTextureParameteri(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTextureParameteriEXT)( GLuint texture, GLenum target, GLenum pname, GLint param );
void qemu_glTextureParameteriEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTextureParameteriv)( GLuint texture, GLenum pname, const GLint *param );
void qemu_glTextureParameteriv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTextureParameterivEXT)( GLuint texture, GLenum target, GLenum pname, const GLint *params );
void qemu_glTextureParameterivEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTextureRangeAPPLE)( GLenum target, GLsizei length, const void *pointer );
void qemu_glTextureRangeAPPLE(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTextureRenderbufferEXT)( GLuint texture, GLenum target, GLuint renderbuffer );
void qemu_glTextureRenderbufferEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTextureStorage1D)( GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width );
void qemu_glTextureStorage1D(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTextureStorage1DEXT)( GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width );
void qemu_glTextureStorage1DEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTextureStorage2D)( GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height );
void qemu_glTextureStorage2D(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTextureStorage2DEXT)( GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height );
void qemu_glTextureStorage2DEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTextureStorage2DMultisample)( GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations );
void qemu_glTextureStorage2DMultisample(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTextureStorage2DMultisampleEXT)( GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations );
void qemu_glTextureStorage2DMultisampleEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTextureStorage3D)( GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth );
void qemu_glTextureStorage3D(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTextureStorage3DEXT)( GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth );
void qemu_glTextureStorage3DEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTextureStorage3DMultisample)( GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations );
void qemu_glTextureStorage3DMultisample(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTextureStorage3DMultisampleEXT)( GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations );
void qemu_glTextureStorage3DMultisampleEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTextureStorageMem1DEXT)( GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLuint memory, GLuint64 offset );
void qemu_glTextureStorageMem1DEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTextureStorageMem2DEXT)( GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset );
void qemu_glTextureStorageMem2DEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTextureStorageMem2DMultisampleEXT)( GLuint texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset );
void qemu_glTextureStorageMem2DMultisampleEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTextureStorageMem3DEXT)( GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset );
void qemu_glTextureStorageMem3DEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTextureStorageMem3DMultisampleEXT)( GLuint texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset );
void qemu_glTextureStorageMem3DMultisampleEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTextureStorageSparseAMD)( GLuint texture, GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags );
void qemu_glTextureStorageSparseAMD(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTextureSubImage1D)( GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels );
void qemu_glTextureSubImage1D(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTextureSubImage1DEXT)( GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels );
void qemu_glTextureSubImage1DEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTextureSubImage2D)( GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels );
void qemu_glTextureSubImage2D(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTextureSubImage2DEXT)( GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels );
void qemu_glTextureSubImage2DEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTextureSubImage3D)( GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels );
void qemu_glTextureSubImage3D(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTextureSubImage3DEXT)( GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels );
void qemu_glTextureSubImage3DEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTextureView)( GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers );
void qemu_glTextureView(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTrackMatrixNV)( GLenum target, GLuint address, GLenum matrix, GLenum transform );
void qemu_glTrackMatrixNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTransformFeedbackAttribsNV)( GLsizei count, const GLint *attribs, GLenum bufferMode );
void qemu_glTransformFeedbackAttribsNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTransformFeedbackBufferBase)( GLuint xfb, GLuint index, GLuint buffer );
void qemu_glTransformFeedbackBufferBase(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTransformFeedbackBufferRange)( GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size );
void qemu_glTransformFeedbackBufferRange(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTransformFeedbackStreamAttribsNV)( GLsizei count, const GLint *attribs, GLsizei nbuffers, const GLint *bufstreams, GLenum bufferMode );
void qemu_glTransformFeedbackStreamAttribsNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTransformFeedbackVaryings)( GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode );
void qemu_glTransformFeedbackVaryings(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTransformFeedbackVaryingsEXT)( GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode );
void qemu_glTransformFeedbackVaryingsEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTransformFeedbackVaryingsNV)( GLuint program, GLsizei count, const GLint *locations, GLenum bufferMode );
void qemu_glTransformFeedbackVaryingsNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTransformPathNV)( GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat *transformValues );
void qemu_glTransformPathNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glTranslatexOES)( GLfixed x, GLfixed y, GLfixed z );
void qemu_glTranslatexOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniform1d)( GLint location, GLdouble x );
void qemu_glUniform1d(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniform1dv)( GLint location, GLsizei count, const GLdouble *value );
void qemu_glUniform1dv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniform1f)( GLint location, GLfloat v0 );
void qemu_glUniform1f(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniform1fARB)( GLint location, GLfloat v0 );
void qemu_glUniform1fARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniform1fv)( GLint location, GLsizei count, const GLfloat *value );
void qemu_glUniform1fv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniform1fvARB)( GLint location, GLsizei count, const GLfloat *value );
void qemu_glUniform1fvARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniform1i)( GLint location, GLint v0 );
void qemu_glUniform1i(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniform1i64ARB)( GLint location, GLint64 x );
void qemu_glUniform1i64ARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniform1i64NV)( GLint location, GLint64EXT x );
void qemu_glUniform1i64NV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniform1i64vARB)( GLint location, GLsizei count, const GLint64 *value );
void qemu_glUniform1i64vARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniform1i64vNV)( GLint location, GLsizei count, const GLint64EXT *value );
void qemu_glUniform1i64vNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniform1iARB)( GLint location, GLint v0 );
void qemu_glUniform1iARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniform1iv)( GLint location, GLsizei count, const GLint *value );
void qemu_glUniform1iv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniform1ivARB)( GLint location, GLsizei count, const GLint *value );
void qemu_glUniform1ivARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniform1ui)( GLint location, GLuint v0 );
void qemu_glUniform1ui(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniform1ui64ARB)( GLint location, GLuint64 x );
void qemu_glUniform1ui64ARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniform1ui64NV)( GLint location, GLuint64EXT x );
void qemu_glUniform1ui64NV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniform1ui64vARB)( GLint location, GLsizei count, const GLuint64 *value );
void qemu_glUniform1ui64vARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniform1ui64vNV)( GLint location, GLsizei count, const GLuint64EXT *value );
void qemu_glUniform1ui64vNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniform1uiEXT)( GLint location, GLuint v0 );
void qemu_glUniform1uiEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniform1uiv)( GLint location, GLsizei count, const GLuint *value );
void qemu_glUniform1uiv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniform1uivEXT)( GLint location, GLsizei count, const GLuint *value );
void qemu_glUniform1uivEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniform2d)( GLint location, GLdouble x, GLdouble y );
void qemu_glUniform2d(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniform2dv)( GLint location, GLsizei count, const GLdouble *value );
void qemu_glUniform2dv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniform2f)( GLint location, GLfloat v0, GLfloat v1 );
void qemu_glUniform2f(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniform2fARB)( GLint location, GLfloat v0, GLfloat v1 );
void qemu_glUniform2fARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniform2fv)( GLint location, GLsizei count, const GLfloat *value );
void qemu_glUniform2fv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniform2fvARB)( GLint location, GLsizei count, const GLfloat *value );
void qemu_glUniform2fvARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniform2i)( GLint location, GLint v0, GLint v1 );
void qemu_glUniform2i(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniform2i64ARB)( GLint location, GLint64 x, GLint64 y );
void qemu_glUniform2i64ARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniform2i64NV)( GLint location, GLint64EXT x, GLint64EXT y );
void qemu_glUniform2i64NV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniform2i64vARB)( GLint location, GLsizei count, const GLint64 *value );
void qemu_glUniform2i64vARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniform2i64vNV)( GLint location, GLsizei count, const GLint64EXT *value );
void qemu_glUniform2i64vNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniform2iARB)( GLint location, GLint v0, GLint v1 );
void qemu_glUniform2iARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniform2iv)( GLint location, GLsizei count, const GLint *value );
void qemu_glUniform2iv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniform2ivARB)( GLint location, GLsizei count, const GLint *value );
void qemu_glUniform2ivARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniform2ui)( GLint location, GLuint v0, GLuint v1 );
void qemu_glUniform2ui(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniform2ui64ARB)( GLint location, GLuint64 x, GLuint64 y );
void qemu_glUniform2ui64ARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniform2ui64NV)( GLint location, GLuint64EXT x, GLuint64EXT y );
void qemu_glUniform2ui64NV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniform2ui64vARB)( GLint location, GLsizei count, const GLuint64 *value );
void qemu_glUniform2ui64vARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniform2ui64vNV)( GLint location, GLsizei count, const GLuint64EXT *value );
void qemu_glUniform2ui64vNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniform2uiEXT)( GLint location, GLuint v0, GLuint v1 );
void qemu_glUniform2uiEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniform2uiv)( GLint location, GLsizei count, const GLuint *value );
void qemu_glUniform2uiv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniform2uivEXT)( GLint location, GLsizei count, const GLuint *value );
void qemu_glUniform2uivEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniform3d)( GLint location, GLdouble x, GLdouble y, GLdouble z );
void qemu_glUniform3d(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniform3dv)( GLint location, GLsizei count, const GLdouble *value );
void qemu_glUniform3dv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniform3f)( GLint location, GLfloat v0, GLfloat v1, GLfloat v2 );
void qemu_glUniform3f(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniform3fARB)( GLint location, GLfloat v0, GLfloat v1, GLfloat v2 );
void qemu_glUniform3fARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniform3fv)( GLint location, GLsizei count, const GLfloat *value );
void qemu_glUniform3fv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniform3fvARB)( GLint location, GLsizei count, const GLfloat *value );
void qemu_glUniform3fvARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniform3i)( GLint location, GLint v0, GLint v1, GLint v2 );
void qemu_glUniform3i(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniform3i64ARB)( GLint location, GLint64 x, GLint64 y, GLint64 z );
void qemu_glUniform3i64ARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniform3i64NV)( GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z );
void qemu_glUniform3i64NV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniform3i64vARB)( GLint location, GLsizei count, const GLint64 *value );
void qemu_glUniform3i64vARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniform3i64vNV)( GLint location, GLsizei count, const GLint64EXT *value );
void qemu_glUniform3i64vNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniform3iARB)( GLint location, GLint v0, GLint v1, GLint v2 );
void qemu_glUniform3iARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniform3iv)( GLint location, GLsizei count, const GLint *value );
void qemu_glUniform3iv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniform3ivARB)( GLint location, GLsizei count, const GLint *value );
void qemu_glUniform3ivARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniform3ui)( GLint location, GLuint v0, GLuint v1, GLuint v2 );
void qemu_glUniform3ui(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniform3ui64ARB)( GLint location, GLuint64 x, GLuint64 y, GLuint64 z );
void qemu_glUniform3ui64ARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniform3ui64NV)( GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z );
void qemu_glUniform3ui64NV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniform3ui64vARB)( GLint location, GLsizei count, const GLuint64 *value );
void qemu_glUniform3ui64vARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniform3ui64vNV)( GLint location, GLsizei count, const GLuint64EXT *value );
void qemu_glUniform3ui64vNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniform3uiEXT)( GLint location, GLuint v0, GLuint v1, GLuint v2 );
void qemu_glUniform3uiEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniform3uiv)( GLint location, GLsizei count, const GLuint *value );
void qemu_glUniform3uiv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniform3uivEXT)( GLint location, GLsizei count, const GLuint *value );
void qemu_glUniform3uivEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniform4d)( GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w );
void qemu_glUniform4d(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniform4dv)( GLint location, GLsizei count, const GLdouble *value );
void qemu_glUniform4dv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniform4f)( GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3 );
void qemu_glUniform4f(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniform4fARB)( GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3 );
void qemu_glUniform4fARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniform4fv)( GLint location, GLsizei count, const GLfloat *value );
void qemu_glUniform4fv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniform4fvARB)( GLint location, GLsizei count, const GLfloat *value );
void qemu_glUniform4fvARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniform4i)( GLint location, GLint v0, GLint v1, GLint v2, GLint v3 );
void qemu_glUniform4i(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniform4i64ARB)( GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w );
void qemu_glUniform4i64ARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniform4i64NV)( GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w );
void qemu_glUniform4i64NV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniform4i64vARB)( GLint location, GLsizei count, const GLint64 *value );
void qemu_glUniform4i64vARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniform4i64vNV)( GLint location, GLsizei count, const GLint64EXT *value );
void qemu_glUniform4i64vNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniform4iARB)( GLint location, GLint v0, GLint v1, GLint v2, GLint v3 );
void qemu_glUniform4iARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniform4iv)( GLint location, GLsizei count, const GLint *value );
void qemu_glUniform4iv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniform4ivARB)( GLint location, GLsizei count, const GLint *value );
void qemu_glUniform4ivARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniform4ui)( GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3 );
void qemu_glUniform4ui(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniform4ui64ARB)( GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w );
void qemu_glUniform4ui64ARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniform4ui64NV)( GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w );
void qemu_glUniform4ui64NV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniform4ui64vARB)( GLint location, GLsizei count, const GLuint64 *value );
void qemu_glUniform4ui64vARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniform4ui64vNV)( GLint location, GLsizei count, const GLuint64EXT *value );
void qemu_glUniform4ui64vNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniform4uiEXT)( GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3 );
void qemu_glUniform4uiEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniform4uiv)( GLint location, GLsizei count, const GLuint *value );
void qemu_glUniform4uiv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniform4uivEXT)( GLint location, GLsizei count, const GLuint *value );
void qemu_glUniform4uivEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniformBlockBinding)( GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding );
void qemu_glUniformBlockBinding(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniformBufferEXT)( GLuint program, GLint location, GLuint buffer );
void qemu_glUniformBufferEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniformHandleui64ARB)( GLint location, GLuint64 value );
void qemu_glUniformHandleui64ARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniformHandleui64NV)( GLint location, GLuint64 value );
void qemu_glUniformHandleui64NV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniformHandleui64vARB)( GLint location, GLsizei count, const GLuint64 *value );
void qemu_glUniformHandleui64vARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniformHandleui64vNV)( GLint location, GLsizei count, const GLuint64 *value );
void qemu_glUniformHandleui64vNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniformMatrix2dv)( GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
void qemu_glUniformMatrix2dv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniformMatrix2fv)( GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
void qemu_glUniformMatrix2fv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniformMatrix2fvARB)( GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
void qemu_glUniformMatrix2fvARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniformMatrix2x3dv)( GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
void qemu_glUniformMatrix2x3dv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniformMatrix2x3fv)( GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
void qemu_glUniformMatrix2x3fv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniformMatrix2x4dv)( GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
void qemu_glUniformMatrix2x4dv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniformMatrix2x4fv)( GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
void qemu_glUniformMatrix2x4fv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniformMatrix3dv)( GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
void qemu_glUniformMatrix3dv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniformMatrix3fv)( GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
void qemu_glUniformMatrix3fv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniformMatrix3fvARB)( GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
void qemu_glUniformMatrix3fvARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniformMatrix3x2dv)( GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
void qemu_glUniformMatrix3x2dv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniformMatrix3x2fv)( GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
void qemu_glUniformMatrix3x2fv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniformMatrix3x4dv)( GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
void qemu_glUniformMatrix3x4dv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniformMatrix3x4fv)( GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
void qemu_glUniformMatrix3x4fv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniformMatrix4dv)( GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
void qemu_glUniformMatrix4dv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniformMatrix4fv)( GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
void qemu_glUniformMatrix4fv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniformMatrix4fvARB)( GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
void qemu_glUniformMatrix4fvARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniformMatrix4x2dv)( GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
void qemu_glUniformMatrix4x2dv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniformMatrix4x2fv)( GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
void qemu_glUniformMatrix4x2fv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniformMatrix4x3dv)( GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
void qemu_glUniformMatrix4x3dv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniformMatrix4x3fv)( GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
void qemu_glUniformMatrix4x3fv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniformSubroutinesuiv)( GLenum shadertype, GLsizei count, const GLuint *indices );
void qemu_glUniformSubroutinesuiv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniformui64NV)( GLint location, GLuint64EXT value );
void qemu_glUniformui64NV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUniformui64vNV)( GLint location, GLsizei count, const GLuint64EXT *value );
void qemu_glUniformui64vNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUnlockArraysEXT)(void);
void qemu_glUnlockArraysEXT(struct qemu_syscall *call);
GLboolean  (WINE_GLAPI *p_glUnmapBuffer)( GLenum target );
void qemu_glUnmapBuffer(struct qemu_syscall *call);
GLboolean  (WINE_GLAPI *p_glUnmapBufferARB)( GLenum target );
void qemu_glUnmapBufferARB(struct qemu_syscall *call);
GLboolean  (WINE_GLAPI *p_glUnmapNamedBuffer)( GLuint buffer );
void qemu_glUnmapNamedBuffer(struct qemu_syscall *call);
GLboolean  (WINE_GLAPI *p_glUnmapNamedBufferEXT)( GLuint buffer );
void qemu_glUnmapNamedBufferEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUnmapObjectBufferATI)( GLuint buffer );
void qemu_glUnmapObjectBufferATI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUnmapTexture2DINTEL)( GLuint texture, GLint level );
void qemu_glUnmapTexture2DINTEL(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUpdateObjectBufferATI)( GLuint buffer, GLuint offset, GLsizei size, const void *pointer, GLenum preserve );
void qemu_glUpdateObjectBufferATI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUploadGpuMaskNVX)( GLbitfield mask );
void qemu_glUploadGpuMaskNVX(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUseProgram)( GLuint program );
void qemu_glUseProgram(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUseProgramObjectARB)( GLhandleARB programObj );
void qemu_glUseProgramObjectARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUseProgramStages)( GLuint pipeline, GLbitfield stages, GLuint program );
void qemu_glUseProgramStages(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glUseShaderProgramEXT)( GLenum type, GLuint program );
void qemu_glUseShaderProgramEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVDPAUFiniNV)(void);
void qemu_glVDPAUFiniNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVDPAUGetSurfaceivNV)( GLvdpauSurfaceNV surface, GLenum pname, GLsizei count, GLsizei *length, GLint *values );
void qemu_glVDPAUGetSurfaceivNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVDPAUInitNV)( const void *vdpDevice, const void *getProcAddress );
void qemu_glVDPAUInitNV(struct qemu_syscall *call);
GLboolean  (WINE_GLAPI *p_glVDPAUIsSurfaceNV)( GLvdpauSurfaceNV surface );
void qemu_glVDPAUIsSurfaceNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVDPAUMapSurfacesNV)( GLsizei numSurfaces, const GLvdpauSurfaceNV *surfaces );
void qemu_glVDPAUMapSurfacesNV(struct qemu_syscall *call);
GLvdpauSurfaceNV (WINE_GLAPI *p_glVDPAURegisterOutputSurfaceNV)( const void *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames );
void qemu_glVDPAURegisterOutputSurfaceNV(struct qemu_syscall *call);
GLvdpauSurfaceNV (WINE_GLAPI *p_glVDPAURegisterVideoSurfaceNV)( const void *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames );
void qemu_glVDPAURegisterVideoSurfaceNV(struct qemu_syscall *call);
GLvdpauSurfaceNV (WINE_GLAPI *p_glVDPAURegisterVideoSurfaceWithPictureStructureNV)( const void *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames, GLboolean isFrameStructure );
void qemu_glVDPAURegisterVideoSurfaceWithPictureStructureNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVDPAUSurfaceAccessNV)( GLvdpauSurfaceNV surface, GLenum access );
void qemu_glVDPAUSurfaceAccessNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVDPAUUnmapSurfacesNV)( GLsizei numSurface, const GLvdpauSurfaceNV *surfaces );
void qemu_glVDPAUUnmapSurfacesNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVDPAUUnregisterSurfaceNV)( GLvdpauSurfaceNV surface );
void qemu_glVDPAUUnregisterSurfaceNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glValidateProgram)( GLuint program );
void qemu_glValidateProgram(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glValidateProgramARB)( GLhandleARB programObj );
void qemu_glValidateProgramARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glValidateProgramPipeline)( GLuint pipeline );
void qemu_glValidateProgramPipeline(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVariantArrayObjectATI)( GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset );
void qemu_glVariantArrayObjectATI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVariantPointerEXT)( GLuint id, GLenum type, GLuint stride, const void *addr );
void qemu_glVariantPointerEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVariantbvEXT)( GLuint id, const GLbyte *addr );
void qemu_glVariantbvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVariantdvEXT)( GLuint id, const GLdouble *addr );
void qemu_glVariantdvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVariantfvEXT)( GLuint id, const GLfloat *addr );
void qemu_glVariantfvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVariantivEXT)( GLuint id, const GLint *addr );
void qemu_glVariantivEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVariantsvEXT)( GLuint id, const GLshort *addr );
void qemu_glVariantsvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVariantubvEXT)( GLuint id, const GLubyte *addr );
void qemu_glVariantubvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVariantuivEXT)( GLuint id, const GLuint *addr );
void qemu_glVariantuivEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVariantusvEXT)( GLuint id, const GLushort *addr );
void qemu_glVariantusvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertex2bOES)( GLbyte x, GLbyte y );
void qemu_glVertex2bOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertex2bvOES)( const GLbyte *coords );
void qemu_glVertex2bvOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertex2hNV)( GLhalfNV x, GLhalfNV y );
void qemu_glVertex2hNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertex2hvNV)( const GLhalfNV *v );
void qemu_glVertex2hvNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertex2xOES)( GLfixed x );
void qemu_glVertex2xOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertex2xvOES)( const GLfixed *coords );
void qemu_glVertex2xvOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertex3bOES)( GLbyte x, GLbyte y, GLbyte z );
void qemu_glVertex3bOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertex3bvOES)( const GLbyte *coords );
void qemu_glVertex3bvOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertex3hNV)( GLhalfNV x, GLhalfNV y, GLhalfNV z );
void qemu_glVertex3hNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertex3hvNV)( const GLhalfNV *v );
void qemu_glVertex3hvNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertex3xOES)( GLfixed x, GLfixed y );
void qemu_glVertex3xOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertex3xvOES)( const GLfixed *coords );
void qemu_glVertex3xvOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertex4bOES)( GLbyte x, GLbyte y, GLbyte z, GLbyte w );
void qemu_glVertex4bOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertex4bvOES)( const GLbyte *coords );
void qemu_glVertex4bvOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertex4hNV)( GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w );
void qemu_glVertex4hNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertex4hvNV)( const GLhalfNV *v );
void qemu_glVertex4hvNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertex4xOES)( GLfixed x, GLfixed y, GLfixed z );
void qemu_glVertex4xOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertex4xvOES)( const GLfixed *coords );
void qemu_glVertex4xvOES(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexArrayAttribBinding)( GLuint vaobj, GLuint attribindex, GLuint bindingindex );
void qemu_glVertexArrayAttribBinding(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexArrayAttribFormat)( GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset );
void qemu_glVertexArrayAttribFormat(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexArrayAttribIFormat)( GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset );
void qemu_glVertexArrayAttribIFormat(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexArrayAttribLFormat)( GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset );
void qemu_glVertexArrayAttribLFormat(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexArrayBindVertexBufferEXT)( GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride );
void qemu_glVertexArrayBindVertexBufferEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexArrayBindingDivisor)( GLuint vaobj, GLuint bindingindex, GLuint divisor );
void qemu_glVertexArrayBindingDivisor(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexArrayColorOffsetEXT)( GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset );
void qemu_glVertexArrayColorOffsetEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexArrayEdgeFlagOffsetEXT)( GLuint vaobj, GLuint buffer, GLsizei stride, GLintptr offset );
void qemu_glVertexArrayEdgeFlagOffsetEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexArrayElementBuffer)( GLuint vaobj, GLuint buffer );
void qemu_glVertexArrayElementBuffer(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexArrayFogCoordOffsetEXT)( GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset );
void qemu_glVertexArrayFogCoordOffsetEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexArrayIndexOffsetEXT)( GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset );
void qemu_glVertexArrayIndexOffsetEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexArrayMultiTexCoordOffsetEXT)( GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, GLintptr offset );
void qemu_glVertexArrayMultiTexCoordOffsetEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexArrayNormalOffsetEXT)( GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset );
void qemu_glVertexArrayNormalOffsetEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexArrayParameteriAPPLE)( GLenum pname, GLint param );
void qemu_glVertexArrayParameteriAPPLE(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexArrayRangeAPPLE)( GLsizei length, void *pointer );
void qemu_glVertexArrayRangeAPPLE(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexArrayRangeNV)( GLsizei length, const void *pointer );
void qemu_glVertexArrayRangeNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexArraySecondaryColorOffsetEXT)( GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset );
void qemu_glVertexArraySecondaryColorOffsetEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexArrayTexCoordOffsetEXT)( GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset );
void qemu_glVertexArrayTexCoordOffsetEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexArrayVertexAttribBindingEXT)( GLuint vaobj, GLuint attribindex, GLuint bindingindex );
void qemu_glVertexArrayVertexAttribBindingEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexArrayVertexAttribDivisorEXT)( GLuint vaobj, GLuint index, GLuint divisor );
void qemu_glVertexArrayVertexAttribDivisorEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexArrayVertexAttribFormatEXT)( GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset );
void qemu_glVertexArrayVertexAttribFormatEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexArrayVertexAttribIFormatEXT)( GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset );
void qemu_glVertexArrayVertexAttribIFormatEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexArrayVertexAttribIOffsetEXT)( GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset );
void qemu_glVertexArrayVertexAttribIOffsetEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexArrayVertexAttribLFormatEXT)( GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset );
void qemu_glVertexArrayVertexAttribLFormatEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexArrayVertexAttribLOffsetEXT)( GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset );
void qemu_glVertexArrayVertexAttribLOffsetEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexArrayVertexAttribOffsetEXT)( GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLintptr offset );
void qemu_glVertexArrayVertexAttribOffsetEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexArrayVertexBindingDivisorEXT)( GLuint vaobj, GLuint bindingindex, GLuint divisor );
void qemu_glVertexArrayVertexBindingDivisorEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexArrayVertexBuffer)( GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride );
void qemu_glVertexArrayVertexBuffer(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexArrayVertexBuffers)( GLuint vaobj, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides );
void qemu_glVertexArrayVertexBuffers(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexArrayVertexOffsetEXT)( GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset );
void qemu_glVertexArrayVertexOffsetEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib1d)( GLuint index, GLdouble x );
void qemu_glVertexAttrib1d(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib1dARB)( GLuint index, GLdouble x );
void qemu_glVertexAttrib1dARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib1dNV)( GLuint index, GLdouble x );
void qemu_glVertexAttrib1dNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib1dv)( GLuint index, const GLdouble *v );
void qemu_glVertexAttrib1dv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib1dvARB)( GLuint index, const GLdouble *v );
void qemu_glVertexAttrib1dvARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib1dvNV)( GLuint index, const GLdouble *v );
void qemu_glVertexAttrib1dvNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib1f)( GLuint index, GLfloat x );
void qemu_glVertexAttrib1f(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib1fARB)( GLuint index, GLfloat x );
void qemu_glVertexAttrib1fARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib1fNV)( GLuint index, GLfloat x );
void qemu_glVertexAttrib1fNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib1fv)( GLuint index, const GLfloat *v );
void qemu_glVertexAttrib1fv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib1fvARB)( GLuint index, const GLfloat *v );
void qemu_glVertexAttrib1fvARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib1fvNV)( GLuint index, const GLfloat *v );
void qemu_glVertexAttrib1fvNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib1hNV)( GLuint index, GLhalfNV x );
void qemu_glVertexAttrib1hNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib1hvNV)( GLuint index, const GLhalfNV *v );
void qemu_glVertexAttrib1hvNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib1s)( GLuint index, GLshort x );
void qemu_glVertexAttrib1s(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib1sARB)( GLuint index, GLshort x );
void qemu_glVertexAttrib1sARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib1sNV)( GLuint index, GLshort x );
void qemu_glVertexAttrib1sNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib1sv)( GLuint index, const GLshort *v );
void qemu_glVertexAttrib1sv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib1svARB)( GLuint index, const GLshort *v );
void qemu_glVertexAttrib1svARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib1svNV)( GLuint index, const GLshort *v );
void qemu_glVertexAttrib1svNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib2d)( GLuint index, GLdouble x, GLdouble y );
void qemu_glVertexAttrib2d(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib2dARB)( GLuint index, GLdouble x, GLdouble y );
void qemu_glVertexAttrib2dARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib2dNV)( GLuint index, GLdouble x, GLdouble y );
void qemu_glVertexAttrib2dNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib2dv)( GLuint index, const GLdouble *v );
void qemu_glVertexAttrib2dv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib2dvARB)( GLuint index, const GLdouble *v );
void qemu_glVertexAttrib2dvARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib2dvNV)( GLuint index, const GLdouble *v );
void qemu_glVertexAttrib2dvNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib2f)( GLuint index, GLfloat x, GLfloat y );
void qemu_glVertexAttrib2f(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib2fARB)( GLuint index, GLfloat x, GLfloat y );
void qemu_glVertexAttrib2fARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib2fNV)( GLuint index, GLfloat x, GLfloat y );
void qemu_glVertexAttrib2fNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib2fv)( GLuint index, const GLfloat *v );
void qemu_glVertexAttrib2fv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib2fvARB)( GLuint index, const GLfloat *v );
void qemu_glVertexAttrib2fvARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib2fvNV)( GLuint index, const GLfloat *v );
void qemu_glVertexAttrib2fvNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib2hNV)( GLuint index, GLhalfNV x, GLhalfNV y );
void qemu_glVertexAttrib2hNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib2hvNV)( GLuint index, const GLhalfNV *v );
void qemu_glVertexAttrib2hvNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib2s)( GLuint index, GLshort x, GLshort y );
void qemu_glVertexAttrib2s(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib2sARB)( GLuint index, GLshort x, GLshort y );
void qemu_glVertexAttrib2sARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib2sNV)( GLuint index, GLshort x, GLshort y );
void qemu_glVertexAttrib2sNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib2sv)( GLuint index, const GLshort *v );
void qemu_glVertexAttrib2sv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib2svARB)( GLuint index, const GLshort *v );
void qemu_glVertexAttrib2svARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib2svNV)( GLuint index, const GLshort *v );
void qemu_glVertexAttrib2svNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib3d)( GLuint index, GLdouble x, GLdouble y, GLdouble z );
void qemu_glVertexAttrib3d(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib3dARB)( GLuint index, GLdouble x, GLdouble y, GLdouble z );
void qemu_glVertexAttrib3dARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib3dNV)( GLuint index, GLdouble x, GLdouble y, GLdouble z );
void qemu_glVertexAttrib3dNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib3dv)( GLuint index, const GLdouble *v );
void qemu_glVertexAttrib3dv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib3dvARB)( GLuint index, const GLdouble *v );
void qemu_glVertexAttrib3dvARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib3dvNV)( GLuint index, const GLdouble *v );
void qemu_glVertexAttrib3dvNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib3f)( GLuint index, GLfloat x, GLfloat y, GLfloat z );
void qemu_glVertexAttrib3f(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib3fARB)( GLuint index, GLfloat x, GLfloat y, GLfloat z );
void qemu_glVertexAttrib3fARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib3fNV)( GLuint index, GLfloat x, GLfloat y, GLfloat z );
void qemu_glVertexAttrib3fNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib3fv)( GLuint index, const GLfloat *v );
void qemu_glVertexAttrib3fv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib3fvARB)( GLuint index, const GLfloat *v );
void qemu_glVertexAttrib3fvARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib3fvNV)( GLuint index, const GLfloat *v );
void qemu_glVertexAttrib3fvNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib3hNV)( GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z );
void qemu_glVertexAttrib3hNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib3hvNV)( GLuint index, const GLhalfNV *v );
void qemu_glVertexAttrib3hvNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib3s)( GLuint index, GLshort x, GLshort y, GLshort z );
void qemu_glVertexAttrib3s(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib3sARB)( GLuint index, GLshort x, GLshort y, GLshort z );
void qemu_glVertexAttrib3sARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib3sNV)( GLuint index, GLshort x, GLshort y, GLshort z );
void qemu_glVertexAttrib3sNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib3sv)( GLuint index, const GLshort *v );
void qemu_glVertexAttrib3sv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib3svARB)( GLuint index, const GLshort *v );
void qemu_glVertexAttrib3svARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib3svNV)( GLuint index, const GLshort *v );
void qemu_glVertexAttrib3svNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib4Nbv)( GLuint index, const GLbyte *v );
void qemu_glVertexAttrib4Nbv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib4NbvARB)( GLuint index, const GLbyte *v );
void qemu_glVertexAttrib4NbvARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib4Niv)( GLuint index, const GLint *v );
void qemu_glVertexAttrib4Niv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib4NivARB)( GLuint index, const GLint *v );
void qemu_glVertexAttrib4NivARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib4Nsv)( GLuint index, const GLshort *v );
void qemu_glVertexAttrib4Nsv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib4NsvARB)( GLuint index, const GLshort *v );
void qemu_glVertexAttrib4NsvARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib4Nub)( GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w );
void qemu_glVertexAttrib4Nub(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib4NubARB)( GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w );
void qemu_glVertexAttrib4NubARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib4Nubv)( GLuint index, const GLubyte *v );
void qemu_glVertexAttrib4Nubv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib4NubvARB)( GLuint index, const GLubyte *v );
void qemu_glVertexAttrib4NubvARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib4Nuiv)( GLuint index, const GLuint *v );
void qemu_glVertexAttrib4Nuiv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib4NuivARB)( GLuint index, const GLuint *v );
void qemu_glVertexAttrib4NuivARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib4Nusv)( GLuint index, const GLushort *v );
void qemu_glVertexAttrib4Nusv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib4NusvARB)( GLuint index, const GLushort *v );
void qemu_glVertexAttrib4NusvARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib4bv)( GLuint index, const GLbyte *v );
void qemu_glVertexAttrib4bv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib4bvARB)( GLuint index, const GLbyte *v );
void qemu_glVertexAttrib4bvARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib4d)( GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w );
void qemu_glVertexAttrib4d(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib4dARB)( GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w );
void qemu_glVertexAttrib4dARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib4dNV)( GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w );
void qemu_glVertexAttrib4dNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib4dv)( GLuint index, const GLdouble *v );
void qemu_glVertexAttrib4dv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib4dvARB)( GLuint index, const GLdouble *v );
void qemu_glVertexAttrib4dvARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib4dvNV)( GLuint index, const GLdouble *v );
void qemu_glVertexAttrib4dvNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib4f)( GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w );
void qemu_glVertexAttrib4f(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib4fARB)( GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w );
void qemu_glVertexAttrib4fARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib4fNV)( GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w );
void qemu_glVertexAttrib4fNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib4fv)( GLuint index, const GLfloat *v );
void qemu_glVertexAttrib4fv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib4fvARB)( GLuint index, const GLfloat *v );
void qemu_glVertexAttrib4fvARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib4fvNV)( GLuint index, const GLfloat *v );
void qemu_glVertexAttrib4fvNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib4hNV)( GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w );
void qemu_glVertexAttrib4hNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib4hvNV)( GLuint index, const GLhalfNV *v );
void qemu_glVertexAttrib4hvNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib4iv)( GLuint index, const GLint *v );
void qemu_glVertexAttrib4iv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib4ivARB)( GLuint index, const GLint *v );
void qemu_glVertexAttrib4ivARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib4s)( GLuint index, GLshort x, GLshort y, GLshort z, GLshort w );
void qemu_glVertexAttrib4s(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib4sARB)( GLuint index, GLshort x, GLshort y, GLshort z, GLshort w );
void qemu_glVertexAttrib4sARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib4sNV)( GLuint index, GLshort x, GLshort y, GLshort z, GLshort w );
void qemu_glVertexAttrib4sNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib4sv)( GLuint index, const GLshort *v );
void qemu_glVertexAttrib4sv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib4svARB)( GLuint index, const GLshort *v );
void qemu_glVertexAttrib4svARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib4svNV)( GLuint index, const GLshort *v );
void qemu_glVertexAttrib4svNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib4ubNV)( GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w );
void qemu_glVertexAttrib4ubNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib4ubv)( GLuint index, const GLubyte *v );
void qemu_glVertexAttrib4ubv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib4ubvARB)( GLuint index, const GLubyte *v );
void qemu_glVertexAttrib4ubvARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib4ubvNV)( GLuint index, const GLubyte *v );
void qemu_glVertexAttrib4ubvNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib4uiv)( GLuint index, const GLuint *v );
void qemu_glVertexAttrib4uiv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib4uivARB)( GLuint index, const GLuint *v );
void qemu_glVertexAttrib4uivARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib4usv)( GLuint index, const GLushort *v );
void qemu_glVertexAttrib4usv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttrib4usvARB)( GLuint index, const GLushort *v );
void qemu_glVertexAttrib4usvARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribArrayObjectATI)( GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset );
void qemu_glVertexAttribArrayObjectATI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribBinding)( GLuint attribindex, GLuint bindingindex );
void qemu_glVertexAttribBinding(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribDivisor)( GLuint index, GLuint divisor );
void qemu_glVertexAttribDivisor(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribDivisorARB)( GLuint index, GLuint divisor );
void qemu_glVertexAttribDivisorARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribFormat)( GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset );
void qemu_glVertexAttribFormat(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribFormatNV)( GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride );
void qemu_glVertexAttribFormatNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribI1i)( GLuint index, GLint x );
void qemu_glVertexAttribI1i(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribI1iEXT)( GLuint index, GLint x );
void qemu_glVertexAttribI1iEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribI1iv)( GLuint index, const GLint *v );
void qemu_glVertexAttribI1iv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribI1ivEXT)( GLuint index, const GLint *v );
void qemu_glVertexAttribI1ivEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribI1ui)( GLuint index, GLuint x );
void qemu_glVertexAttribI1ui(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribI1uiEXT)( GLuint index, GLuint x );
void qemu_glVertexAttribI1uiEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribI1uiv)( GLuint index, const GLuint *v );
void qemu_glVertexAttribI1uiv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribI1uivEXT)( GLuint index, const GLuint *v );
void qemu_glVertexAttribI1uivEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribI2i)( GLuint index, GLint x, GLint y );
void qemu_glVertexAttribI2i(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribI2iEXT)( GLuint index, GLint x, GLint y );
void qemu_glVertexAttribI2iEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribI2iv)( GLuint index, const GLint *v );
void qemu_glVertexAttribI2iv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribI2ivEXT)( GLuint index, const GLint *v );
void qemu_glVertexAttribI2ivEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribI2ui)( GLuint index, GLuint x, GLuint y );
void qemu_glVertexAttribI2ui(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribI2uiEXT)( GLuint index, GLuint x, GLuint y );
void qemu_glVertexAttribI2uiEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribI2uiv)( GLuint index, const GLuint *v );
void qemu_glVertexAttribI2uiv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribI2uivEXT)( GLuint index, const GLuint *v );
void qemu_glVertexAttribI2uivEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribI3i)( GLuint index, GLint x, GLint y, GLint z );
void qemu_glVertexAttribI3i(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribI3iEXT)( GLuint index, GLint x, GLint y, GLint z );
void qemu_glVertexAttribI3iEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribI3iv)( GLuint index, const GLint *v );
void qemu_glVertexAttribI3iv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribI3ivEXT)( GLuint index, const GLint *v );
void qemu_glVertexAttribI3ivEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribI3ui)( GLuint index, GLuint x, GLuint y, GLuint z );
void qemu_glVertexAttribI3ui(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribI3uiEXT)( GLuint index, GLuint x, GLuint y, GLuint z );
void qemu_glVertexAttribI3uiEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribI3uiv)( GLuint index, const GLuint *v );
void qemu_glVertexAttribI3uiv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribI3uivEXT)( GLuint index, const GLuint *v );
void qemu_glVertexAttribI3uivEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribI4bv)( GLuint index, const GLbyte *v );
void qemu_glVertexAttribI4bv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribI4bvEXT)( GLuint index, const GLbyte *v );
void qemu_glVertexAttribI4bvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribI4i)( GLuint index, GLint x, GLint y, GLint z, GLint w );
void qemu_glVertexAttribI4i(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribI4iEXT)( GLuint index, GLint x, GLint y, GLint z, GLint w );
void qemu_glVertexAttribI4iEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribI4iv)( GLuint index, const GLint *v );
void qemu_glVertexAttribI4iv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribI4ivEXT)( GLuint index, const GLint *v );
void qemu_glVertexAttribI4ivEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribI4sv)( GLuint index, const GLshort *v );
void qemu_glVertexAttribI4sv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribI4svEXT)( GLuint index, const GLshort *v );
void qemu_glVertexAttribI4svEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribI4ubv)( GLuint index, const GLubyte *v );
void qemu_glVertexAttribI4ubv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribI4ubvEXT)( GLuint index, const GLubyte *v );
void qemu_glVertexAttribI4ubvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribI4ui)( GLuint index, GLuint x, GLuint y, GLuint z, GLuint w );
void qemu_glVertexAttribI4ui(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribI4uiEXT)( GLuint index, GLuint x, GLuint y, GLuint z, GLuint w );
void qemu_glVertexAttribI4uiEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribI4uiv)( GLuint index, const GLuint *v );
void qemu_glVertexAttribI4uiv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribI4uivEXT)( GLuint index, const GLuint *v );
void qemu_glVertexAttribI4uivEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribI4usv)( GLuint index, const GLushort *v );
void qemu_glVertexAttribI4usv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribI4usvEXT)( GLuint index, const GLushort *v );
void qemu_glVertexAttribI4usvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribIFormat)( GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset );
void qemu_glVertexAttribIFormat(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribIFormatNV)( GLuint index, GLint size, GLenum type, GLsizei stride );
void qemu_glVertexAttribIFormatNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribIPointer)( GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer );
void qemu_glVertexAttribIPointer(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribIPointerEXT)( GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer );
void qemu_glVertexAttribIPointerEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribL1d)( GLuint index, GLdouble x );
void qemu_glVertexAttribL1d(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribL1dEXT)( GLuint index, GLdouble x );
void qemu_glVertexAttribL1dEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribL1dv)( GLuint index, const GLdouble *v );
void qemu_glVertexAttribL1dv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribL1dvEXT)( GLuint index, const GLdouble *v );
void qemu_glVertexAttribL1dvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribL1i64NV)( GLuint index, GLint64EXT x );
void qemu_glVertexAttribL1i64NV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribL1i64vNV)( GLuint index, const GLint64EXT *v );
void qemu_glVertexAttribL1i64vNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribL1ui64ARB)( GLuint index, GLuint64EXT x );
void qemu_glVertexAttribL1ui64ARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribL1ui64NV)( GLuint index, GLuint64EXT x );
void qemu_glVertexAttribL1ui64NV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribL1ui64vARB)( GLuint index, const GLuint64EXT *v );
void qemu_glVertexAttribL1ui64vARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribL1ui64vNV)( GLuint index, const GLuint64EXT *v );
void qemu_glVertexAttribL1ui64vNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribL2d)( GLuint index, GLdouble x, GLdouble y );
void qemu_glVertexAttribL2d(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribL2dEXT)( GLuint index, GLdouble x, GLdouble y );
void qemu_glVertexAttribL2dEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribL2dv)( GLuint index, const GLdouble *v );
void qemu_glVertexAttribL2dv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribL2dvEXT)( GLuint index, const GLdouble *v );
void qemu_glVertexAttribL2dvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribL2i64NV)( GLuint index, GLint64EXT x, GLint64EXT y );
void qemu_glVertexAttribL2i64NV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribL2i64vNV)( GLuint index, const GLint64EXT *v );
void qemu_glVertexAttribL2i64vNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribL2ui64NV)( GLuint index, GLuint64EXT x, GLuint64EXT y );
void qemu_glVertexAttribL2ui64NV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribL2ui64vNV)( GLuint index, const GLuint64EXT *v );
void qemu_glVertexAttribL2ui64vNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribL3d)( GLuint index, GLdouble x, GLdouble y, GLdouble z );
void qemu_glVertexAttribL3d(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribL3dEXT)( GLuint index, GLdouble x, GLdouble y, GLdouble z );
void qemu_glVertexAttribL3dEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribL3dv)( GLuint index, const GLdouble *v );
void qemu_glVertexAttribL3dv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribL3dvEXT)( GLuint index, const GLdouble *v );
void qemu_glVertexAttribL3dvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribL3i64NV)( GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z );
void qemu_glVertexAttribL3i64NV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribL3i64vNV)( GLuint index, const GLint64EXT *v );
void qemu_glVertexAttribL3i64vNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribL3ui64NV)( GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z );
void qemu_glVertexAttribL3ui64NV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribL3ui64vNV)( GLuint index, const GLuint64EXT *v );
void qemu_glVertexAttribL3ui64vNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribL4d)( GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w );
void qemu_glVertexAttribL4d(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribL4dEXT)( GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w );
void qemu_glVertexAttribL4dEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribL4dv)( GLuint index, const GLdouble *v );
void qemu_glVertexAttribL4dv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribL4dvEXT)( GLuint index, const GLdouble *v );
void qemu_glVertexAttribL4dvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribL4i64NV)( GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w );
void qemu_glVertexAttribL4i64NV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribL4i64vNV)( GLuint index, const GLint64EXT *v );
void qemu_glVertexAttribL4i64vNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribL4ui64NV)( GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w );
void qemu_glVertexAttribL4ui64NV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribL4ui64vNV)( GLuint index, const GLuint64EXT *v );
void qemu_glVertexAttribL4ui64vNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribLFormat)( GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset );
void qemu_glVertexAttribLFormat(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribLFormatNV)( GLuint index, GLint size, GLenum type, GLsizei stride );
void qemu_glVertexAttribLFormatNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribLPointer)( GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer );
void qemu_glVertexAttribLPointer(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribLPointerEXT)( GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer );
void qemu_glVertexAttribLPointerEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribP1ui)( GLuint index, GLenum type, GLboolean normalized, GLuint value );
void qemu_glVertexAttribP1ui(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribP1uiv)( GLuint index, GLenum type, GLboolean normalized, const GLuint *value );
void qemu_glVertexAttribP1uiv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribP2ui)( GLuint index, GLenum type, GLboolean normalized, GLuint value );
void qemu_glVertexAttribP2ui(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribP2uiv)( GLuint index, GLenum type, GLboolean normalized, const GLuint *value );
void qemu_glVertexAttribP2uiv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribP3ui)( GLuint index, GLenum type, GLboolean normalized, GLuint value );
void qemu_glVertexAttribP3ui(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribP3uiv)( GLuint index, GLenum type, GLboolean normalized, const GLuint *value );
void qemu_glVertexAttribP3uiv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribP4ui)( GLuint index, GLenum type, GLboolean normalized, GLuint value );
void qemu_glVertexAttribP4ui(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribP4uiv)( GLuint index, GLenum type, GLboolean normalized, const GLuint *value );
void qemu_glVertexAttribP4uiv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribParameteriAMD)( GLuint index, GLenum pname, GLint param );
void qemu_glVertexAttribParameteriAMD(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribPointer)( GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer );
void qemu_glVertexAttribPointer(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribPointerARB)( GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer );
void qemu_glVertexAttribPointerARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribPointerNV)( GLuint index, GLint fsize, GLenum type, GLsizei stride, const void *pointer );
void qemu_glVertexAttribPointerNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribs1dvNV)( GLuint index, GLsizei count, const GLdouble *v );
void qemu_glVertexAttribs1dvNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribs1fvNV)( GLuint index, GLsizei count, const GLfloat *v );
void qemu_glVertexAttribs1fvNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribs1hvNV)( GLuint index, GLsizei n, const GLhalfNV *v );
void qemu_glVertexAttribs1hvNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribs1svNV)( GLuint index, GLsizei count, const GLshort *v );
void qemu_glVertexAttribs1svNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribs2dvNV)( GLuint index, GLsizei count, const GLdouble *v );
void qemu_glVertexAttribs2dvNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribs2fvNV)( GLuint index, GLsizei count, const GLfloat *v );
void qemu_glVertexAttribs2fvNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribs2hvNV)( GLuint index, GLsizei n, const GLhalfNV *v );
void qemu_glVertexAttribs2hvNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribs2svNV)( GLuint index, GLsizei count, const GLshort *v );
void qemu_glVertexAttribs2svNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribs3dvNV)( GLuint index, GLsizei count, const GLdouble *v );
void qemu_glVertexAttribs3dvNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribs3fvNV)( GLuint index, GLsizei count, const GLfloat *v );
void qemu_glVertexAttribs3fvNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribs3hvNV)( GLuint index, GLsizei n, const GLhalfNV *v );
void qemu_glVertexAttribs3hvNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribs3svNV)( GLuint index, GLsizei count, const GLshort *v );
void qemu_glVertexAttribs3svNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribs4dvNV)( GLuint index, GLsizei count, const GLdouble *v );
void qemu_glVertexAttribs4dvNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribs4fvNV)( GLuint index, GLsizei count, const GLfloat *v );
void qemu_glVertexAttribs4fvNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribs4hvNV)( GLuint index, GLsizei n, const GLhalfNV *v );
void qemu_glVertexAttribs4hvNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribs4svNV)( GLuint index, GLsizei count, const GLshort *v );
void qemu_glVertexAttribs4svNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexAttribs4ubvNV)( GLuint index, GLsizei count, const GLubyte *v );
void qemu_glVertexAttribs4ubvNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexBindingDivisor)( GLuint bindingindex, GLuint divisor );
void qemu_glVertexBindingDivisor(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexBlendARB)( GLint count );
void qemu_glVertexBlendARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexBlendEnvfATI)( GLenum pname, GLfloat param );
void qemu_glVertexBlendEnvfATI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexBlendEnviATI)( GLenum pname, GLint param );
void qemu_glVertexBlendEnviATI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexFormatNV)( GLint size, GLenum type, GLsizei stride );
void qemu_glVertexFormatNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexP2ui)( GLenum type, GLuint value );
void qemu_glVertexP2ui(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexP2uiv)( GLenum type, const GLuint *value );
void qemu_glVertexP2uiv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexP3ui)( GLenum type, GLuint value );
void qemu_glVertexP3ui(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexP3uiv)( GLenum type, const GLuint *value );
void qemu_glVertexP3uiv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexP4ui)( GLenum type, GLuint value );
void qemu_glVertexP4ui(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexP4uiv)( GLenum type, const GLuint *value );
void qemu_glVertexP4uiv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexPointerEXT)( GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer );
void qemu_glVertexPointerEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexPointerListIBM)( GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride );
void qemu_glVertexPointerListIBM(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexPointervINTEL)( GLint size, GLenum type, const void **pointer );
void qemu_glVertexPointervINTEL(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexStream1dATI)( GLenum stream, GLdouble x );
void qemu_glVertexStream1dATI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexStream1dvATI)( GLenum stream, const GLdouble *coords );
void qemu_glVertexStream1dvATI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexStream1fATI)( GLenum stream, GLfloat x );
void qemu_glVertexStream1fATI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexStream1fvATI)( GLenum stream, const GLfloat *coords );
void qemu_glVertexStream1fvATI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexStream1iATI)( GLenum stream, GLint x );
void qemu_glVertexStream1iATI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexStream1ivATI)( GLenum stream, const GLint *coords );
void qemu_glVertexStream1ivATI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexStream1sATI)( GLenum stream, GLshort x );
void qemu_glVertexStream1sATI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexStream1svATI)( GLenum stream, const GLshort *coords );
void qemu_glVertexStream1svATI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexStream2dATI)( GLenum stream, GLdouble x, GLdouble y );
void qemu_glVertexStream2dATI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexStream2dvATI)( GLenum stream, const GLdouble *coords );
void qemu_glVertexStream2dvATI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexStream2fATI)( GLenum stream, GLfloat x, GLfloat y );
void qemu_glVertexStream2fATI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexStream2fvATI)( GLenum stream, const GLfloat *coords );
void qemu_glVertexStream2fvATI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexStream2iATI)( GLenum stream, GLint x, GLint y );
void qemu_glVertexStream2iATI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexStream2ivATI)( GLenum stream, const GLint *coords );
void qemu_glVertexStream2ivATI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexStream2sATI)( GLenum stream, GLshort x, GLshort y );
void qemu_glVertexStream2sATI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexStream2svATI)( GLenum stream, const GLshort *coords );
void qemu_glVertexStream2svATI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexStream3dATI)( GLenum stream, GLdouble x, GLdouble y, GLdouble z );
void qemu_glVertexStream3dATI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexStream3dvATI)( GLenum stream, const GLdouble *coords );
void qemu_glVertexStream3dvATI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexStream3fATI)( GLenum stream, GLfloat x, GLfloat y, GLfloat z );
void qemu_glVertexStream3fATI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexStream3fvATI)( GLenum stream, const GLfloat *coords );
void qemu_glVertexStream3fvATI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexStream3iATI)( GLenum stream, GLint x, GLint y, GLint z );
void qemu_glVertexStream3iATI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexStream3ivATI)( GLenum stream, const GLint *coords );
void qemu_glVertexStream3ivATI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexStream3sATI)( GLenum stream, GLshort x, GLshort y, GLshort z );
void qemu_glVertexStream3sATI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexStream3svATI)( GLenum stream, const GLshort *coords );
void qemu_glVertexStream3svATI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexStream4dATI)( GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w );
void qemu_glVertexStream4dATI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexStream4dvATI)( GLenum stream, const GLdouble *coords );
void qemu_glVertexStream4dvATI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexStream4fATI)( GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w );
void qemu_glVertexStream4fATI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexStream4fvATI)( GLenum stream, const GLfloat *coords );
void qemu_glVertexStream4fvATI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexStream4iATI)( GLenum stream, GLint x, GLint y, GLint z, GLint w );
void qemu_glVertexStream4iATI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexStream4ivATI)( GLenum stream, const GLint *coords );
void qemu_glVertexStream4ivATI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexStream4sATI)( GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w );
void qemu_glVertexStream4sATI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexStream4svATI)( GLenum stream, const GLshort *coords );
void qemu_glVertexStream4svATI(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexWeightPointerEXT)( GLint size, GLenum type, GLsizei stride, const void *pointer );
void qemu_glVertexWeightPointerEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexWeightfEXT)( GLfloat weight );
void qemu_glVertexWeightfEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexWeightfvEXT)( const GLfloat *weight );
void qemu_glVertexWeightfvEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexWeighthNV)( GLhalfNV weight );
void qemu_glVertexWeighthNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVertexWeighthvNV)( const GLhalfNV *weight );
void qemu_glVertexWeighthvNV(struct qemu_syscall *call);
GLenum     (WINE_GLAPI *p_glVideoCaptureNV)( GLuint video_capture_slot, GLuint *sequence_num, GLuint64EXT *capture_time );
void qemu_glVideoCaptureNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVideoCaptureStreamParameterdvNV)( GLuint video_capture_slot, GLuint stream, GLenum pname, const GLdouble *params );
void qemu_glVideoCaptureStreamParameterdvNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVideoCaptureStreamParameterfvNV)( GLuint video_capture_slot, GLuint stream, GLenum pname, const GLfloat *params );
void qemu_glVideoCaptureStreamParameterfvNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glVideoCaptureStreamParameterivNV)( GLuint video_capture_slot, GLuint stream, GLenum pname, const GLint *params );
void qemu_glVideoCaptureStreamParameterivNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glViewportArrayv)( GLuint first, GLsizei count, const GLfloat *v );
void qemu_glViewportArrayv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glViewportIndexedf)( GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h );
void qemu_glViewportIndexedf(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glViewportIndexedfv)( GLuint index, const GLfloat *v );
void qemu_glViewportIndexedfv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glViewportPositionWScaleNV)( GLuint index, GLfloat xcoeff, GLfloat ycoeff );
void qemu_glViewportPositionWScaleNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glViewportSwizzleNV)( GLuint index, GLenum swizzlex, GLenum swizzley, GLenum swizzlez, GLenum swizzlew );
void qemu_glViewportSwizzleNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glWaitSemaphoreEXT)( GLuint semaphore, GLuint numBufferBarriers, const GLuint *buffers, GLuint numTextureBarriers, const GLuint *textures, const GLenum *srcLayouts );
void qemu_glWaitSemaphoreEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glWaitSemaphoreui64NVX)( GLuint waitGpu, GLsizei fenceObjectCount, const GLuint *semaphoreArray, const GLuint64 *fenceValueArray );
void qemu_glWaitSemaphoreui64NVX(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glWaitSync)( GLsync sync, GLbitfield flags, GLuint64 timeout );
void qemu_glWaitSync(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glWaitVkSemaphoreNV)( GLuint64 vkSemaphore );
void qemu_glWaitVkSemaphoreNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glWeightPathsNV)( GLuint resultPath, GLsizei numPaths, const GLuint *paths, const GLfloat *weights );
void qemu_glWeightPathsNV(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glWeightPointerARB)( GLint size, GLenum type, GLsizei stride, const void *pointer );
void qemu_glWeightPointerARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glWeightbvARB)( GLint size, const GLbyte *weights );
void qemu_glWeightbvARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glWeightdvARB)( GLint size, const GLdouble *weights );
void qemu_glWeightdvARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glWeightfvARB)( GLint size, const GLfloat *weights );
void qemu_glWeightfvARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glWeightivARB)( GLint size, const GLint *weights );
void qemu_glWeightivARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glWeightsvARB)( GLint size, const GLshort *weights );
void qemu_glWeightsvARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glWeightubvARB)( GLint size, const GLubyte *weights );
void qemu_glWeightubvARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glWeightuivARB)( GLint size, const GLuint *weights );
void qemu_glWeightuivARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glWeightusvARB)( GLint size, const GLushort *weights );
void qemu_glWeightusvARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glWindowPos2d)( GLdouble x, GLdouble y );
void qemu_glWindowPos2d(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glWindowPos2dARB)( GLdouble x, GLdouble y );
void qemu_glWindowPos2dARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glWindowPos2dMESA)( GLdouble x, GLdouble y );
void qemu_glWindowPos2dMESA(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glWindowPos2dv)( const GLdouble *v );
void qemu_glWindowPos2dv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glWindowPos2dvARB)( const GLdouble *v );
void qemu_glWindowPos2dvARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glWindowPos2dvMESA)( const GLdouble *v );
void qemu_glWindowPos2dvMESA(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glWindowPos2f)( GLfloat x, GLfloat y );
void qemu_glWindowPos2f(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glWindowPos2fARB)( GLfloat x, GLfloat y );
void qemu_glWindowPos2fARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glWindowPos2fMESA)( GLfloat x, GLfloat y );
void qemu_glWindowPos2fMESA(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glWindowPos2fv)( const GLfloat *v );
void qemu_glWindowPos2fv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glWindowPos2fvARB)( const GLfloat *v );
void qemu_glWindowPos2fvARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glWindowPos2fvMESA)( const GLfloat *v );
void qemu_glWindowPos2fvMESA(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glWindowPos2i)( GLint x, GLint y );
void qemu_glWindowPos2i(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glWindowPos2iARB)( GLint x, GLint y );
void qemu_glWindowPos2iARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glWindowPos2iMESA)( GLint x, GLint y );
void qemu_glWindowPos2iMESA(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glWindowPos2iv)( const GLint *v );
void qemu_glWindowPos2iv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glWindowPos2ivARB)( const GLint *v );
void qemu_glWindowPos2ivARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glWindowPos2ivMESA)( const GLint *v );
void qemu_glWindowPos2ivMESA(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glWindowPos2s)( GLshort x, GLshort y );
void qemu_glWindowPos2s(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glWindowPos2sARB)( GLshort x, GLshort y );
void qemu_glWindowPos2sARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glWindowPos2sMESA)( GLshort x, GLshort y );
void qemu_glWindowPos2sMESA(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glWindowPos2sv)( const GLshort *v );
void qemu_glWindowPos2sv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glWindowPos2svARB)( const GLshort *v );
void qemu_glWindowPos2svARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glWindowPos2svMESA)( const GLshort *v );
void qemu_glWindowPos2svMESA(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glWindowPos3d)( GLdouble x, GLdouble y, GLdouble z );
void qemu_glWindowPos3d(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glWindowPos3dARB)( GLdouble x, GLdouble y, GLdouble z );
void qemu_glWindowPos3dARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glWindowPos3dMESA)( GLdouble x, GLdouble y, GLdouble z );
void qemu_glWindowPos3dMESA(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glWindowPos3dv)( const GLdouble *v );
void qemu_glWindowPos3dv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glWindowPos3dvARB)( const GLdouble *v );
void qemu_glWindowPos3dvARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glWindowPos3dvMESA)( const GLdouble *v );
void qemu_glWindowPos3dvMESA(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glWindowPos3f)( GLfloat x, GLfloat y, GLfloat z );
void qemu_glWindowPos3f(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glWindowPos3fARB)( GLfloat x, GLfloat y, GLfloat z );
void qemu_glWindowPos3fARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glWindowPos3fMESA)( GLfloat x, GLfloat y, GLfloat z );
void qemu_glWindowPos3fMESA(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glWindowPos3fv)( const GLfloat *v );
void qemu_glWindowPos3fv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glWindowPos3fvARB)( const GLfloat *v );
void qemu_glWindowPos3fvARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glWindowPos3fvMESA)( const GLfloat *v );
void qemu_glWindowPos3fvMESA(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glWindowPos3i)( GLint x, GLint y, GLint z );
void qemu_glWindowPos3i(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glWindowPos3iARB)( GLint x, GLint y, GLint z );
void qemu_glWindowPos3iARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glWindowPos3iMESA)( GLint x, GLint y, GLint z );
void qemu_glWindowPos3iMESA(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glWindowPos3iv)( const GLint *v );
void qemu_glWindowPos3iv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glWindowPos3ivARB)( const GLint *v );
void qemu_glWindowPos3ivARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glWindowPos3ivMESA)( const GLint *v );
void qemu_glWindowPos3ivMESA(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glWindowPos3s)( GLshort x, GLshort y, GLshort z );
void qemu_glWindowPos3s(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glWindowPos3sARB)( GLshort x, GLshort y, GLshort z );
void qemu_glWindowPos3sARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glWindowPos3sMESA)( GLshort x, GLshort y, GLshort z );
void qemu_glWindowPos3sMESA(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glWindowPos3sv)( const GLshort *v );
void qemu_glWindowPos3sv(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glWindowPos3svARB)( const GLshort *v );
void qemu_glWindowPos3svARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glWindowPos3svMESA)( const GLshort *v );
void qemu_glWindowPos3svMESA(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glWindowPos4dMESA)( GLdouble x, GLdouble y, GLdouble z, GLdouble w );
void qemu_glWindowPos4dMESA(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glWindowPos4dvMESA)( const GLdouble *v );
void qemu_glWindowPos4dvMESA(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glWindowPos4fMESA)( GLfloat x, GLfloat y, GLfloat z, GLfloat w );
void qemu_glWindowPos4fMESA(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glWindowPos4fvMESA)( const GLfloat *v );
void qemu_glWindowPos4fvMESA(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glWindowPos4iMESA)( GLint x, GLint y, GLint z, GLint w );
void qemu_glWindowPos4iMESA(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glWindowPos4ivMESA)( const GLint *v );
void qemu_glWindowPos4ivMESA(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glWindowPos4sMESA)( GLshort x, GLshort y, GLshort z, GLshort w );
void qemu_glWindowPos4sMESA(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glWindowPos4svMESA)( const GLshort *v );
void qemu_glWindowPos4svMESA(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glWindowRectanglesEXT)( GLenum mode, GLsizei count, const GLint *box );
void qemu_glWindowRectanglesEXT(struct qemu_syscall *call);
void       (WINE_GLAPI *p_glWriteMaskEXT)( GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW );
void qemu_glWriteMaskEXT(struct qemu_syscall *call);
void *     (WINE_GLAPI *p_wglAllocateMemoryNV)( GLsizei size, GLfloat readfreq, GLfloat writefreq, GLfloat priority );
void qemu_wglAllocateMemoryNV(struct qemu_syscall *call);
BOOL       (WINE_GLAPI *p_wglBindTexImageARB)( struct wgl_pbuffer * hPbuffer, int iBuffer );
void qemu_wglBindTexImageARB(struct qemu_syscall *call);
BOOL       (WINE_GLAPI *p_wglChoosePixelFormatARB)( HDC hdc, const int *piAttribIList, const FLOAT *pfAttribFList, UINT nMaxFormats, int *piFormats, UINT *nNumFormats );
void qemu_wglChoosePixelFormatARB(struct qemu_syscall *call);
struct wgl_context * (WINE_GLAPI *p_wglCreateContextAttribsARB)( HDC hDC, struct wgl_context * hShareContext, const int *attribList );
void qemu_wglCreateContextAttribsARB(struct qemu_syscall *call);
struct wgl_pbuffer * (WINE_GLAPI *p_wglCreatePbufferARB)( HDC hDC, int iPixelFormat, int iWidth, int iHeight, const int *piAttribList );
void qemu_wglCreatePbufferARB(struct qemu_syscall *call);
BOOL       (WINE_GLAPI *p_wglDestroyPbufferARB)( struct wgl_pbuffer * hPbuffer );
void qemu_wglDestroyPbufferARB(struct qemu_syscall *call);
void       (WINE_GLAPI *p_wglFreeMemoryNV)( void *pointer );
void qemu_wglFreeMemoryNV(struct qemu_syscall *call);
HDC        (WINE_GLAPI *p_wglGetCurrentReadDCARB)(void);
void qemu_wglGetCurrentReadDCARB(struct qemu_syscall *call);
const char * (WINE_GLAPI *p_wglGetExtensionsStringARB)( HDC hdc );
void qemu_wglGetExtensionsStringARB(struct qemu_syscall *call);
const char * (WINE_GLAPI *p_wglGetExtensionsStringEXT)(void);
void qemu_wglGetExtensionsStringEXT(struct qemu_syscall *call);
HDC        (WINE_GLAPI *p_wglGetPbufferDCARB)( struct wgl_pbuffer * hPbuffer );
void qemu_wglGetPbufferDCARB(struct qemu_syscall *call);
BOOL       (WINE_GLAPI *p_wglGetPixelFormatAttribfvARB)( HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, const int *piAttributes, FLOAT *pfValues );
void qemu_wglGetPixelFormatAttribfvARB(struct qemu_syscall *call);
BOOL       (WINE_GLAPI *p_wglGetPixelFormatAttribivARB)( HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, const int *piAttributes, int *piValues );
void qemu_wglGetPixelFormatAttribivARB(struct qemu_syscall *call);
int        (WINE_GLAPI *p_wglGetSwapIntervalEXT)(void);
void qemu_wglGetSwapIntervalEXT(struct qemu_syscall *call);
BOOL       (WINE_GLAPI *p_wglMakeContextCurrentARB)( HDC hDrawDC, HDC hReadDC, struct wgl_context * hglrc );
void qemu_wglMakeContextCurrentARB(struct qemu_syscall *call);
BOOL       (WINE_GLAPI *p_wglQueryCurrentRendererIntegerWINE)( GLenum attribute, GLuint *value );
void qemu_wglQueryCurrentRendererIntegerWINE(struct qemu_syscall *call);
const GLchar * (WINE_GLAPI *p_wglQueryCurrentRendererStringWINE)( GLenum attribute );
void qemu_wglQueryCurrentRendererStringWINE(struct qemu_syscall *call);
BOOL       (WINE_GLAPI *p_wglQueryPbufferARB)( struct wgl_pbuffer * hPbuffer, int iAttribute, int *piValue );
void qemu_wglQueryPbufferARB(struct qemu_syscall *call);
BOOL       (WINE_GLAPI *p_wglQueryRendererIntegerWINE)( HDC dc, GLint renderer, GLenum attribute, GLuint *value );
void qemu_wglQueryRendererIntegerWINE(struct qemu_syscall *call);
const GLchar * (WINE_GLAPI *p_wglQueryRendererStringWINE)( HDC dc, GLint renderer, GLenum attribute );
void qemu_wglQueryRendererStringWINE(struct qemu_syscall *call);
int        (WINE_GLAPI *p_wglReleasePbufferDCARB)( struct wgl_pbuffer * hPbuffer, HDC hDC );
void qemu_wglReleasePbufferDCARB(struct qemu_syscall *call);
BOOL       (WINE_GLAPI *p_wglReleaseTexImageARB)( struct wgl_pbuffer * hPbuffer, int iBuffer );
void qemu_wglReleaseTexImageARB(struct qemu_syscall *call);
BOOL       (WINE_GLAPI *p_wglSetPbufferAttribARB)( struct wgl_pbuffer * hPbuffer, const int *piAttribList );
void qemu_wglSetPbufferAttribARB(struct qemu_syscall *call);
BOOL       (WINE_GLAPI *p_wglSetPixelFormatWINE)( HDC hdc, int format );
void qemu_wglSetPixelFormatWINE(struct qemu_syscall *call);
BOOL       (WINE_GLAPI *p_wglSwapIntervalEXT)( int interval );
void qemu_wglSwapIntervalEXT(struct qemu_syscall *call);
void qemu_wglChoosePixelFormat(struct qemu_syscall *call);
void qemu_wglCreateLayerContext(struct qemu_syscall *call);
void qemu_wglDescribeLayerPlane(struct qemu_syscall *call);
void qemu_wglGetCurrentContext(struct qemu_syscall *call);
void qemu_wglGetCurrentDC(struct qemu_syscall *call);
void qemu_wglGetDefaultProcAddress(struct qemu_syscall *call);
void qemu_wglGetLayerPaletteEntries(struct qemu_syscall *call);
void qemu_wglRealizeLayerPalette(struct qemu_syscall *call);
void qemu_wglSetLayerPaletteEntries(struct qemu_syscall *call);
void qemu_wglSwapLayerBuffers(struct qemu_syscall *call);
void qemu_wglUseFontBitmapsA(struct qemu_syscall *call);
void qemu_wglUseFontBitmapsW(struct qemu_syscall *call);
void qemu_wglUseFontOutlinesA(struct qemu_syscall *call);
void qemu_wglUseFontOutlinesW(struct qemu_syscall *call);


#endif /* QEMU_DLL_GUEST */
#endif /* __QEMU_GL_FUNCS_H */
